[assembly: System.Reflection.AssemblyMetadata("IsTrimmable", "True")]
[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/thomhurst/TUnit")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v9.0", FrameworkDisplayName=".NET 9.0")]
namespace TUnit.Playwright
{
    public class BrowserTest : TUnit.Playwright.PlaywrightTest
    {
        public BrowserTest() { }
        public BrowserTest(Microsoft.Playwright.BrowserTypeLaunchOptions options) { }
        public Microsoft.Playwright.IBrowser Browser { get; }
        [TUnit.Core.Before(TUnit.Core.HookType.Test, "<FilePath>", 29)]
        public System.Threading.Tasks.Task BrowserSetup() { }
        [TUnit.Core.After(TUnit.Core.HookType.Test, "<FilePath>", 36)]
        public System.Threading.Tasks.Task BrowserTearDown(TUnit.Core.TestContext testContext) { }
        public System.Threading.Tasks.Task<Microsoft.Playwright.IBrowserContext> NewContext(Microsoft.Playwright.BrowserNewContextOptions options) { }
    }
    public class ContextTest : TUnit.Playwright.BrowserTest
    {
        public ContextTest() { }
        public Microsoft.Playwright.IBrowserContext Context { get; }
        public virtual Microsoft.Playwright.BrowserNewContextOptions ContextOptions(TUnit.Core.TestContext testContext) { }
        [TUnit.Core.Before(TUnit.Core.HookType.Test, "<FilePath>", 19)]
        public System.Threading.Tasks.Task ContextSetup(TUnit.Core.TestContext testContext) { }
    }
    public sealed class DefaultPlaywrightParallelLimiter : TUnit.Core.Interfaces.IParallelLimit
    {
        public DefaultPlaywrightParallelLimiter() { }
        public int Limit { get; }
    }
    public interface IWorkerService
    {
        System.Threading.Tasks.Task DisposeAsync();
        System.Threading.Tasks.Task ResetAsync();
    }
    public class PageTest : TUnit.Playwright.ContextTest
    {
        public PageTest() { }
        public Microsoft.Playwright.IPage Page { get; }
        [TUnit.Core.Before(TUnit.Core.HookType.Test, "<FilePath>", 10)]
        public System.Threading.Tasks.Task PageSetup() { }
    }
    public class PlaywrightSkipAttribute : TUnit.Core.SkipAttribute
    {
        public PlaywrightSkipAttribute(params TUnit.Playwright.PlaywrightSkipAttribute.Targets[] combinations) { }
        public TUnit.Core.TestContext? TestContext { get; set; }
        public override System.Threading.Tasks.Task<bool> ShouldSkip(TUnit.Core.BeforeTestContext context) { }
        [System.Flags]
        public enum Targets : short
        {
            Windows = 1,
            Linux = 2,
            OSX = 4,
            Chromium = 8,
            Firefox = 16,
            Webkit = 32,
        }
    }
    public class PlaywrightTest : TUnit.Playwright.WorkerAwareTest
    {
        public PlaywrightTest() { }
        public virtual string BrowserName { get; }
        public Microsoft.Playwright.IBrowserType BrowserType { get; }
        public static Microsoft.Playwright.IPlaywright Playwright { get; }
        public Microsoft.Playwright.IAPIResponseAssertions Expect(Microsoft.Playwright.IAPIResponse response) { }
        public Microsoft.Playwright.ILocatorAssertions Expect(Microsoft.Playwright.ILocator locator) { }
        public Microsoft.Playwright.IPageAssertions Expect(Microsoft.Playwright.IPage page) { }
        [TUnit.Core.After(TUnit.Core.HookType.TestSession, "<FilePath>", 22)]
        public static void PlaywrightCleanup() { }
        [TUnit.Core.Before(TUnit.Core.HookType.TestSession, "<FilePath>", 15)]
        public static System.Threading.Tasks.Task PlaywrightSetup() { }
        public static void SetDefaultExpectTimeout(float timeout) { }
    }
    public class WorkerAwareTest : TUnit.Core.Interfaces.IEventReceiver, TUnit.Core.Interfaces.ITestRegisteredEventReceiver
    {
        public WorkerAwareTest() { }
        public virtual bool UseDefaultParallelLimiter { get; }
        public int WorkerIndex { get; }
        public System.Threading.Tasks.ValueTask OnTestRegistered(TUnit.Core.TestRegisteredContext context) { }
        public System.Threading.Tasks.Task<T> RegisterService<T>(string name, System.Func<System.Threading.Tasks.Task<T>> factory)
            where T :  class, TUnit.Playwright.IWorkerService { }
        protected bool TestOk(TUnit.Core.TestContext testContext) { }
        [TUnit.Core.Before(TUnit.Core.HookType.Test, "<FilePath>", 34)]
        public void WorkerSetup() { }
        [TUnit.Core.After(TUnit.Core.HookType.Test, "<FilePath>", 45)]
        public System.Threading.Tasks.Task WorkerTeardown(TUnit.Core.TestContext testContext) { }
    }
}