[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"TUnit.Engine, PublicKey=0024000004800000940000000602000000240000525341310004000001000100698a70398fa0b2230c5a72e3bd9d56b48f809f6173e49a19fbb942d621be93ad48c5566b47b28faabc359b9ad3ff4e00bbdea88f5bdfa250f391fedd28182b2e37b55d429c0151a42a98ea7a5821818cd15a79fef9903e8607a88304cf3e0317bf86ec96e32e1381535a6582251e5a6eed40b5a3ed82bc444598b1269cce57a7")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"TUnit.UnitTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100698a70398fa0b2230c5a72e3bd9d56b48f809f6173e49a19fbb942d621be93ad48c5566b47b28faabc359b9ad3ff4e00bbdea88f5bdfa250f391fedd28182b2e37b55d429c0151a42a98ea7a5821818cd15a79fef9903e8607a88304cf3e0317bf86ec96e32e1381535a6582251e5a6eed40b5a3ed82bc444598b1269cce57a7")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v9.0", FrameworkDisplayName=".NET 9.0")]
namespace TUnit.Engine.Capabilities
{
    [System.Diagnostics.CodeAnalysis.Experimental("TPEXP")]
    public class StopExecutionCapability : Microsoft.Testing.Platform.Capabilities.ICapability, Microsoft.Testing.Platform.Capabilities.TestFramework.IGracefulStopTestExecutionCapability, Microsoft.Testing.Platform.Capabilities.TestFramework.ITestFrameworkCapability
    {
        public StopExecutionCapability() { }
        public bool IsStopRequested { get; }
        public TUnit.Core.AsyncEvent<System.EventArgs>? OnStopRequested { get; set; }
        public System.Threading.Tasks.Task StopTestExecutionAsync(System.Threading.CancellationToken cancellationToken) { }
    }
}
namespace TUnit.Engine.Enums
{
    public enum EngineMode
    {
        SourceGenerated = 0,
        Reflection = 1,
    }
}
namespace TUnit.Engine.Exceptions
{
    public class HookFailedException : TUnit.Engine.Exceptions.TUnitFailedException
    {
        public HookFailedException(System.Exception exception) { }
        public HookFailedException(string? message, System.Exception? innerException) { }
    }
    public abstract class TUnitFailedException : TUnit.Core.Exceptions.TUnitException
    {
        protected TUnitFailedException(System.Exception exception) { }
        protected TUnitFailedException(string? message, System.Exception? innerException) { }
        public override string StackTrace { get; }
    }
    public class TestFailedException : TUnit.Engine.Exceptions.TUnitFailedException
    {
        public TestFailedException(System.Exception exception) { }
        public TestFailedException(string? message, System.Exception? innerException) { }
    }
}
namespace TUnit.Engine.Extensions
{
    public static class JsonExtensions
    {
        public static TUnit.Engine.Json.ExceptionJson ToJsonModel(this System.Exception exception) { }
        public static TUnit.Engine.Json.TestAssemblyJson ToJsonModel(this TUnit.Core.AssemblyHookContext context) { }
        public static TUnit.Engine.Json.TestClassJson ToJsonModel(this TUnit.Core.ClassHookContext context) { }
        public static TUnit.Engine.Json.TestJson ToJsonModel(this TUnit.Core.TestContext context) { }
        public static TUnit.Engine.Json.TestResultJson ToJsonModel(this TUnit.Core.TestResult result) { }
        public static TUnit.Engine.Json.TestSessionJson ToJsonModel(this TUnit.Core.TestSessionContext context) { }
    }
    public static class TestApplicationBuilderExtensions
    {
        public static void AddTUnit(this Microsoft.Testing.Platform.Builder.ITestApplicationBuilder testApplicationBuilder) { }
    }
    public static class TestContextExtensions
    {
        [System.Diagnostics.CodeAnalysis.Experimental("WIP")]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Reflection")]
        public static System.Threading.Tasks.Task ReregisterTestWithArguments(this TUnit.Core.TestContext testContext, object?[]? methodArguments, System.Collections.Generic.Dictionary<string, object?>? objectBag = null) { }
    }
}
namespace TUnit.Engine.Framework
{
    public interface IFilterReceiver
    {
        string? Filter { set; }
    }
    public static class TestingPlatformBuilderHook
    {
        public static void AddExtensions(Microsoft.Testing.Platform.Builder.ITestApplicationBuilder testApplicationBuilder, string[] _) { }
    }
}
namespace TUnit.Engine.Json
{
    public class ExceptionJson : System.IEquatable<TUnit.Engine.Json.ExceptionJson>
    {
        public ExceptionJson() { }
        public required TUnit.Engine.Json.ExceptionJson? InnerException { get; init; }
        public required string Message { get; init; }
        public required string? Stacktrace { get; init; }
        public required string? Type { get; init; }
    }
    public class TestAssemblyJson : System.IEquatable<TUnit.Engine.Json.TestAssemblyJson>
    {
        public TestAssemblyJson() { }
        public required string? AssemblyName { get; init; }
        public required TUnit.Engine.Json.TestClassJson[] Classes { get; init; }
    }
    public class TestClassJson : System.IEquatable<TUnit.Engine.Json.TestClassJson>
    {
        public TestClassJson() { }
        public required TUnit.Engine.Json.TestJson[] Tests { get; init; }
        public required string? Type { get; init; }
    }
    public class TestJson : System.IEquatable<TUnit.Engine.Json.TestJson>
    {
        public TestJson() { }
        public required System.Collections.Generic.IReadOnlyList<string> Categories { get; init; }
        public required string? ClassType { get; init; }
        public required System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<string>> CustomProperties { get; init; }
        public required string DisplayName { get; set; }
        public required System.Collections.Generic.Dictionary<string, object?> ObjectBag { get; init; }
        public required TUnit.Engine.Json.TestResultJson? Result { get; set; }
        public required int RetryLimit { get; init; }
        public required string? ReturnType { get; init; }
        public required object?[]? TestClassArguments { get; init; }
        public required string?[]? TestClassParameterTypes { get; init; }
        public required string TestFilePath { get; init; }
        public required string TestId { get; init; }
        public required int TestLineNumber { get; init; }
        public required object?[]? TestMethodArguments { get; init; }
        public required string?[]? TestMethodParameterTypes { get; init; }
        public required string TestName { get; init; }
        public required System.TimeSpan? Timeout { get; init; }
    }
    public class TestResultJson : System.IEquatable<TUnit.Engine.Json.TestResultJson>
    {
        public TestResultJson() { }
        public required string ComputerName { get; init; }
        public required System.TimeSpan? Duration { get; init; }
        public required System.DateTimeOffset? End { get; init; }
        public required TUnit.Engine.Json.ExceptionJson? Exception { get; init; }
        public required string? Output { get; init; }
        public required System.DateTimeOffset? Start { get; init; }
        public required TUnit.Core.Enums.Status Status { get; init; }
    }
    public class TestSessionJson : System.IEquatable<TUnit.Engine.Json.TestSessionJson>
    {
        public TestSessionJson() { }
        public required TUnit.Engine.Json.TestAssemblyJson[] Assemblies { get; init; }
    }
}
namespace TUnit.Engine.Reporters
{
    public class GitHubReporter : Microsoft.Testing.Platform.Extensions.IExtension, Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer, Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks, Microsoft.Testing.Platform.Extensions.TestHost.ITestHostExtension, TUnit.Engine.Framework.IFilterReceiver
    {
        public GitHubReporter(Microsoft.Testing.Platform.Extensions.IExtension extension) { }
        public System.Type[] DataTypesConsumed { get; }
        public string Description { get; }
        public string DisplayName { get; }
        public string? Filter { get; set; }
        public string Uid { get; }
        public string Version { get; }
        public System.Threading.Tasks.Task AfterRunAsync(int exitCode, System.Threading.CancellationToken cancellation) { }
        public System.Threading.Tasks.Task BeforeRunAsync(System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task ConsumeAsync(Microsoft.Testing.Platform.Extensions.Messages.IDataProducer dataProducer, Microsoft.Testing.Platform.Extensions.Messages.IData value, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<bool> IsEnabledAsync() { }
    }
}
namespace TUnit.Engine.Services
{
    public class FilterParser
    {
        public FilterParser() { }
        public string? GetTestFilter(Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext context) { }
        public static string? StringifyFilter(Microsoft.Testing.Platform.Requests.ITestExecutionFilter filter) { }
    }
    public class HookMessagePublisher : Microsoft.Testing.Platform.Extensions.IExtension, Microsoft.Testing.Platform.Extensions.Messages.IDataProducer, TUnit.Core.Hooks.IHookMessagePublisher
    {
        public HookMessagePublisher(Microsoft.Testing.Platform.Extensions.IExtension extension, Microsoft.Testing.Platform.Messages.IMessageBus messageBus) { }
        public System.Type[] DataTypesProduced { get; }
        public string Description { get; }
        public string DisplayName { get; }
        public string Uid { get; }
        public string Version { get; }
        public System.Threading.Tasks.Task Discover(string sessionId, string displayName, TUnit.Core.Hooks.StaticHookMethod hookMethod) { }
        public System.Threading.Tasks.Task<bool> IsEnabledAsync() { }
        public System.Threading.Tasks.Task Push(string sessionId, string displayName, TUnit.Core.Hooks.StaticHookMethod hookMethod, System.Func<System.Threading.Tasks.Task> func) { }
    }
    public class LogLevelProvider
    {
        public LogLevelProvider(Microsoft.Testing.Platform.CommandLine.ICommandLineOptions commandLineOptions) { }
        public TUnit.Core.Enums.LogLevel LogLevel { get; }
    }
    public static class TUnitRunner
    {
        public static System.Threading.Tasks.Task<int> RunTests(params string[] args) { }
    }
}