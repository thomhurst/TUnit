[assembly: System.Reflection.AssemblyMetadata("IsTrimmable", "True")]
[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/thomhurst/TUnit.git")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
namespace TUnit.Engine.Exceptions
{
    public class TestFailedException : TUnit.Core.Exceptions.TUnitException
    {
        public TestFailedException(System.Exception exception) { }
        public override string StackTrace { get; }
    }
}
namespace TUnit.Engine.Extensions
{
    public static class JsonExtensions
    {
        public static TUnit.Engine.Json.ExceptionJson ToJsonModel(this System.Exception exception) { }
        public static TUnit.Engine.Json.TestAssemblyJson ToJsonModel(this TUnit.Core.AssemblyHookContext context) { }
        public static TUnit.Engine.Json.TestClassJson ToJsonModel(this TUnit.Core.ClassHookContext context) { }
        public static TUnit.Engine.Json.TestJson ToJsonModel(this TUnit.Core.TestContext context) { }
        public static TUnit.Engine.Json.TestResultJson ToJsonModel(this TUnit.Core.TestResult result) { }
        public static TUnit.Engine.Json.TestSessionJson ToJsonModel(this TUnit.Core.TestSessionContext context) { }
    }
    public static class TestContextExtensions
    {
        [System.Diagnostics.CodeAnalysis.Experimental("WIP")]
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode("Reflection")]
        public static System.Threading.Tasks.Task ReregisterTestWithArguments(this TUnit.Core.TestContext testContext, object?[]? methodArguments, System.Collections.Generic.Dictionary<string, object?>? objectBag = null) { }
    }
}
namespace TUnit.Engine.Framework
{
    public interface IFilterReceiver
    {
        string? Filter { set; }
    }
    public static class TestingPlatformBuilderHook
    {
        public static void AddExtensions(Microsoft.Testing.Platform.Builder.ITestApplicationBuilder testApplicationBuilder, string[] _) { }
    }
}
namespace TUnit.Engine.Json
{
    [System.Runtime.CompilerServices.RequiredMember]
    public class ExceptionJson : System.IEquatable<TUnit.Engine.Json.ExceptionJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public ExceptionJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.ExceptionJson? InnerException { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string Message { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? Stacktrace { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? Type { get; init; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class TestAssemblyJson : System.IEquatable<TUnit.Engine.Json.TestAssemblyJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public TestAssemblyJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? AssemblyName { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.TestClassJson[] Classes { get; init; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class TestClassJson : System.IEquatable<TUnit.Engine.Json.TestClassJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public TestClassJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.TestJson[] Tests { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? Type { get; init; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class TestJson : System.IEquatable<TUnit.Engine.Json.TestJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public TestJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Collections.Generic.IReadOnlyList<string> Categories { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? ClassType { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Collections.Generic.IReadOnlyDictionary<string, string> CustomProperties { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string DisplayName { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.Collections.Generic.Dictionary<string, object?> ObjectBag { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.TestResultJson? Result { get; set; }
        [System.Runtime.CompilerServices.RequiredMember]
        public int RetryLimit { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? ReturnType { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public object?[]? TestClassArguments { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string?[]? TestClassParameterTypes { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string TestFilePath { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string TestId { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public int TestLineNumber { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public object?[]? TestMethodArguments { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string?[]? TestMethodParameterTypes { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string TestName { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.TimeSpan? Timeout { get; init; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class TestResultJson : System.IEquatable<TUnit.Engine.Json.TestResultJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public TestResultJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public string ComputerName { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.TimeSpan? Duration { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.DateTimeOffset? End { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.ExceptionJson? Exception { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public string? Output { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public System.DateTimeOffset? Start { get; init; }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Core.Enums.Status Status { get; init; }
    }
    [System.Runtime.CompilerServices.RequiredMember]
    public class TestSessionJson : System.IEquatable<TUnit.Engine.Json.TestSessionJson>
    {
        [System.Obsolete("Constructors of types with required members are not supported in this version of " +
            "your compiler.", true)]
        public TestSessionJson() { }
        [System.Runtime.CompilerServices.RequiredMember]
        public TUnit.Engine.Json.TestAssemblyJson[] Assemblies { get; init; }
    }
}
namespace TUnit.Engine.Reporters
{
    public class GitHubReporter : Microsoft.Testing.Platform.Extensions.IExtension, Microsoft.Testing.Platform.Extensions.TestHost.IDataConsumer, Microsoft.Testing.Platform.Extensions.TestHost.ITestApplicationLifecycleCallbacks, Microsoft.Testing.Platform.Extensions.TestHost.ITestHostExtension, TUnit.Engine.Framework.IFilterReceiver
    {
        public GitHubReporter(Microsoft.Testing.Platform.Extensions.IExtension extension) { }
        public System.Type[] DataTypesConsumed { get; }
        public string Description { get; }
        public string DisplayName { get; }
        public string? Filter { get; set; }
        public string Uid { get; }
        public string Version { get; }
        public System.Threading.Tasks.Task AfterRunAsync(int exitCode, System.Threading.CancellationToken cancellation) { }
        public System.Threading.Tasks.Task BeforeRunAsync(System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task ConsumeAsync(Microsoft.Testing.Platform.Extensions.Messages.IDataProducer dataProducer, Microsoft.Testing.Platform.Extensions.Messages.IData value, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<bool> IsEnabledAsync() { }
    }
}
namespace TUnit.Engine.Services
{
    public class FilterParser
    {
        public FilterParser() { }
        public string? GetTestFilter(Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext context) { }
        public static string? StringifyFilter(Microsoft.Testing.Platform.Requests.ITestExecutionFilter filter) { }
    }
    public class HookMessagePublisher : Microsoft.Testing.Platform.Extensions.IExtension, Microsoft.Testing.Platform.Extensions.Messages.IDataProducer, TUnit.Core.Hooks.IHookMessagePublisher
    {
        public HookMessagePublisher(Microsoft.Testing.Platform.Extensions.IExtension extension, Microsoft.Testing.Platform.Messages.IMessageBus messageBus) { }
        public System.Type[] DataTypesProduced { get; }
        public string Description { get; }
        public string DisplayName { get; }
        public string Uid { get; }
        public string Version { get; }
        public System.Threading.Tasks.Task Discover(string sessionId, string displayName, TUnit.Core.Hooks.StaticHookMethod hookMethod) { }
        public System.Threading.Tasks.Task<bool> IsEnabledAsync() { }
        public System.Threading.Tasks.Task Push(string sessionId, string displayName, TUnit.Core.Hooks.StaticHookMethod hookMethod, System.Func<System.Threading.Tasks.Task> func) { }
    }
    public class LogLevelProvider
    {
        public LogLevelProvider(Microsoft.Testing.Platform.CommandLine.ICommandLineOptions commandLineOptions) { }
        public TUnit.Core.Enums.LogLevel LogLevel { get; }
    }
    public static class TUnitRunner
    {
        public static System.Threading.Tasks.Task<int> RunTests(params string[] args) { }
    }
}
namespace TUnit.Engine
{
    public class TUnitMessageBus : Microsoft.Testing.Platform.Extensions.IExtension, Microsoft.Testing.Platform.Extensions.Messages.IDataProducer
    {
        public TUnitMessageBus(Microsoft.Testing.Platform.Extensions.IExtension extension, Microsoft.Testing.Platform.CommandLine.ICommandLineOptions commandLineOptions, Microsoft.Testing.Platform.Extensions.TestFramework.ExecuteRequestContext context) { }
        public System.Type[] DataTypesProduced { get; }
        public string Description { get; }
        public string DisplayName { get; }
        public string Uid { get; }
        public string Version { get; }
        public System.Threading.Tasks.ValueTask Cancelled(TUnit.Core.TestContext testContext) { }
        public System.Threading.Tasks.ValueTask Discovered(TUnit.Core.TestContext testContext) { }
        public System.Threading.Tasks.ValueTask Failed(TUnit.Core.TestContext testContext, System.Exception exception, System.DateTimeOffset start) { }
        public System.Threading.Tasks.ValueTask InProgress(TUnit.Core.TestContext testContext) { }
        public System.Threading.Tasks.Task<bool> IsEnabledAsync() { }
        public System.Threading.Tasks.ValueTask Passed(TUnit.Core.TestContext testContext, System.DateTimeOffset start) { }
        public System.Threading.Tasks.ValueTask SessionArtifact(TUnit.Core.Artifact artifact) { }
        public System.Threading.Tasks.ValueTask Skipped(TUnit.Core.TestContext testContext, string reason) { }
        public System.Threading.Tasks.ValueTask TestArtifact(TUnit.Core.TestContext testContext, TUnit.Core.Artifact artifact) { }
    }
}