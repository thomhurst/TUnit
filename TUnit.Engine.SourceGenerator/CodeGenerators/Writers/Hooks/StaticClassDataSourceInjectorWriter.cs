using Microsoft.CodeAnalysis;
using TUnit.Engine.SourceGenerator.CodeGenerators.Helpers;
using TUnit.Engine.SourceGenerator.Enums;
using TUnit.Engine.SourceGenerator.Models;

namespace TUnit.Engine.SourceGenerator.CodeGenerators.Writers.Hooks;

internal static class StaticClassDataSourceInjectorWriter
{
    public static void Execute(SourceProductionContext context, StaticClassDataSourceInjectorModel model)
    {
        var className = $"StaticGlobalInjections__{model.MinimalTypeName}__{model.PropertyName}";
        var fileName = $"{className}__{Guid.NewGuid():N}";

        using var sourceBuilder = new SourceCodeWriter();
                
        sourceBuilder.WriteLine("// <auto-generated/>");
        sourceBuilder.WriteLine("#pragma warning disable");
        sourceBuilder.WriteLine("using global::System.Linq;");
        sourceBuilder.WriteLine("using global::System.Reflection;");
        sourceBuilder.WriteLine("using global::System.Runtime.CompilerServices;");
        sourceBuilder.WriteLine("using global::TUnit.Core;");
        sourceBuilder.WriteLine("using global::TUnit.Core.Interfaces;");
        sourceBuilder.WriteLine();
        sourceBuilder.WriteLine("namespace TUnit.SourceGenerated;");
        sourceBuilder.WriteLine();
        sourceBuilder.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
        sourceBuilder.WriteLine($"file partial class {className}");
        sourceBuilder.WriteLine("{");
        sourceBuilder.WriteLine("[global::System.Runtime.CompilerServices.ModuleInitializer]");
        sourceBuilder.WriteLine("public static void Initialise()");
        sourceBuilder.WriteLine("{");

        sourceBuilder.WriteLine(
                $$$"""
                   TestRegistrar.RegisterStaticPropertyInjector(typeof({{{model.FullyQualifiedTypeName}}}), typeof({{{model.InjectableType}}}), () => {{{model.FullyQualifiedTypeName}}}.{{{model.PropertyName}}}, new global::System.Lazy<global::System.Action>(() => 
                   		{ 
                    		{{{model.FullyQualifiedTypeName}}}.{{{model.PropertyName}}} = TestDataContainer.GetGlobalInstance<{{{model.InjectableType}}}>(() => new {{{model.InjectableType}}}());
                   		}));
                   """);

        sourceBuilder.WriteLine("}");
        sourceBuilder.WriteLine("}");

        context.AddSource($"{fileName}.Generated.cs", sourceBuilder.ToString());
    }
}