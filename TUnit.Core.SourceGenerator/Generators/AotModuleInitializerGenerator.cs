using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using TUnit.Core.SourceGenerator.CodeGenerators;

namespace TUnit.Core.SourceGenerator.Generators;

/// <summary>
/// Generates a module initializer that registers all AOT-safe components
/// and replaces reflection-based functionality
/// </summary>
[Generator]
public sealed class AotModuleInitializerGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // This generator runs after all other generators and creates the module initializer
        var compilationProvider = context.CompilationProvider;
        
        context.RegisterSourceOutput(compilationProvider, GenerateModuleInitializer);
    }

    private static void GenerateModuleInitializer(SourceProductionContext context, Compilation compilation)
    {
        var writer = new CodeWriter();

        writer.AppendLine("// <auto-generated/>");
        writer.AppendLine("#pragma warning disable");
        writer.AppendLine("#nullable enable");
        writer.AppendLine();
        writer.AppendLine("using System;");
        writer.AppendLine("using System.Collections.Generic;");
        writer.AppendLine("using System.Runtime.CompilerServices;");
        writer.AppendLine();
        writer.AppendLine("namespace TUnit.Generated;");
        writer.AppendLine();

        GenerateAotReplacementRegistry(writer);

        context.AddSource("AotModuleInitializer.g.cs", writer.ToString());
    }

    private static void GenerateAotReplacementRegistry(CodeWriter writer)
    {
        writer.AppendLine("/// <summary>");
        writer.AppendLine("/// Module initializer that registers all AOT-safe replacements for reflection-based components");
        writer.AppendLine("/// </summary>");
        writer.AppendLine("public static class AotReplacementRegistry");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("[ModuleInitializer]");
        writer.AppendLine("public static void Initialize()");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("// Initialize AOT-safe type resolution");
        writer.AppendLine("InitializeTypeResolution();");
        writer.AppendLine();

        writer.AppendLine("// Initialize AOT-safe method invocation");
        writer.AppendLine("InitializeMethodInvocation();");
        writer.AppendLine();

        writer.AppendLine("// Initialize AOT-safe tuple processing");
        writer.AppendLine("InitializeTupleProcessing();");
        writer.AppendLine();

        writer.AppendLine("// Initialize enhanced property injection");
        writer.AppendLine("InitializePropertyInjection();");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine();

        // Generate individual initialization methods
        GenerateTypeResolutionInitializer(writer);
        GenerateMethodInvocationInitializer(writer);
        GenerateTupleProcessingInitializer(writer);
        GeneratePropertyInjectionInitializer(writer);

        writer.Unindent();
        writer.AppendLine("}");
    }

    private static void GenerateTypeResolutionInitializer(CodeWriter writer)
    {
        writer.AppendLine("private static void InitializeTypeResolution()");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("// Register AOT-safe type resolution replacements");
        writer.AppendLine("try");
        writer.AppendLine("{");
        writer.Indent();
        
        writer.AppendLine("// Replace Type.GetType with AotTypeResolver.ResolveType");
        writer.AppendLine("global::TUnit.Core.Helpers.ReflectionReplacements.RegisterTypeResolver(");
        writer.AppendLine("    assemblyQualifiedName => global::TUnit.Generated.AotTypeResolver.ResolveType(assemblyQualifiedName));");
        writer.AppendLine();

        writer.AppendLine("// Replace Type.MakeGenericType with AotTypeResolver.MakeGenericType");
        writer.AppendLine("global::TUnit.Core.Helpers.ReflectionReplacements.RegisterGenericTypeFactory(");
        writer.AppendLine("    (genericDefinition, typeArgs) => global::TUnit.Generated.AotTypeResolver.MakeGenericType(genericDefinition, typeArgs));");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine("catch (System.Exception ex)");
        writer.AppendLine("{");
        writer.Indent();
        writer.AppendLine("// Log initialization failure if logging is available");
        writer.AppendLine("System.Diagnostics.Debug.WriteLine($\"Failed to initialize AOT type resolution: {ex.Message}\");");
        writer.Unindent();
        writer.AppendLine("}");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine();
    }

    private static void GenerateMethodInvocationInitializer(CodeWriter writer)
    {
        writer.AppendLine("private static void InitializeMethodInvocation()");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("// Register AOT-safe method invocation replacements");
        writer.AppendLine("try");
        writer.AppendLine("{");
        writer.Indent();
        
        writer.AppendLine("// Register method invocation if available");
        writer.AppendLine("// Note: AotMethodInvokers will be registered by its own generator when available");
        writer.AppendLine("// This is a placeholder for future method invocation registration");
        writer.AppendLine("System.Diagnostics.Debug.WriteLine(\"AOT method invocation setup complete\");");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine("catch (System.Exception ex)");
        writer.AppendLine("{");
        writer.Indent();
        writer.AppendLine("System.Diagnostics.Debug.WriteLine($\"Failed to initialize AOT method invocation: {ex.Message}\");");
        writer.Unindent();
        writer.AppendLine("}");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine();
    }

    private static void GenerateTupleProcessingInitializer(CodeWriter writer)
    {
        writer.AppendLine("private static void InitializeTupleProcessing()");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("// Register AOT-safe tuple processing replacements");
        writer.AppendLine("try");
        writer.AppendLine("{");
        writer.Indent();
        
        writer.AppendLine("// Register tuple processing if available");
        writer.AppendLine("// Note: AotTupleProcessor will be registered by its own generator when available");
        writer.AppendLine("// This is a placeholder for future tuple processing registration");
        writer.AppendLine("System.Diagnostics.Debug.WriteLine(\"AOT tuple processing setup complete\");");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine("catch (System.Exception ex)");
        writer.AppendLine("{");
        writer.Indent();
        writer.AppendLine("System.Diagnostics.Debug.WriteLine($\"Failed to initialize AOT tuple processing: {ex.Message}\");");
        writer.Unindent();
        writer.AppendLine("}");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine();
    }

    private static void GeneratePropertyInjectionInitializer(CodeWriter writer)
    {
        writer.AppendLine("private static void InitializePropertyInjection()");
        writer.AppendLine("{");
        writer.Indent();

        writer.AppendLine("// Register enhanced property injection");
        writer.AppendLine("try");
        writer.AppendLine("{");
        writer.Indent();
        
        writer.AppendLine("// Register enhanced property injection if available");
        writer.AppendLine("// Note: Enhanced property injectors will be registered by their own generator when available");
        writer.AppendLine("// This is a placeholder for future property injection registration");
        writer.AppendLine("System.Diagnostics.Debug.WriteLine(\"AOT property injection setup complete\");");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine("catch (System.Exception ex)");
        writer.AppendLine("{");
        writer.Indent();
        writer.AppendLine("System.Diagnostics.Debug.WriteLine($\"Failed to initialize enhanced property injection: {ex.Message}\");");
        writer.Unindent();
        writer.AppendLine("}");

        writer.Unindent();
        writer.AppendLine("}");
        writer.AppendLine();
    }
}