using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace TUnit.Core.SourceGenerator;

public class SourceCodeWriter : IDisposable
{
    private readonly StringBuilder _output = new();
    private readonly string _indentString;
    private int _indentLevel;
    private bool _isAtLineStart = true;
    
    public int IndentLevel => _indentLevel;
    
    // Legacy property for backward compatibility
    public int TabLevel
    {
        get => _indentLevel;
        private set => _indentLevel = value;
    }

    public SourceCodeWriter(int initialIndentLevel = 0, string indentString = "\t")
    {
        _indentLevel = initialIndentLevel;
        _indentString = indentString;
        
        if (initialIndentLevel == 0)
        {
            _output.AppendLine("// <auto-generated/>");
            _output.AppendLine("#pragma warning disable");
            _isAtLineStart = true;
        }
    }

    public void Write([StringSyntax("c#")] string content)
    {
        if (string.IsNullOrWhiteSpace(content))
        {
            return;
        }

        var trimmedContent = content.Trim();
        if (trimmedContent.Length == 0)
        {
            return;
        }

        var firstChar = GetFirstNonWhitespaceChar(trimmedContent);
        var lastChar = GetLastNonWhitespaceChar(trimmedContent);

        // Handle closing braces - decrease indent BEFORE writing
        if (firstChar.HasValue && IsClosingBrace(firstChar.Value))
        {
            _indentLevel = Math.Max(0, _indentLevel - 1);
        }

        // Add newline before if needed
        if (ShouldAddNewLineBefore(trimmedContent, firstChar))
        {
            EnsureNewLine();
        }

        // Write indentation if at line start
        if (_isAtLineStart)
        {
            WriteIndentation();
        }

        // Write the actual content
        _output.Append(trimmedContent);
        _isAtLineStart = false;

        // Handle opening braces - increase indent AFTER writing
        if (firstChar.HasValue && IsOpeningBrace(firstChar.Value))
        {
            _indentLevel++;
        }

        // Add newline after if needed
        if (ShouldAddNewLineAfter(trimmedContent, lastChar))
        {
            WriteLine();
        }
    }

    public void WriteLine()
    {
        _output.AppendLine();
        _isAtLineStart = true;
    }

    public void WriteLine([StringSyntax("c#")] string content)
    {
        Write(content);
        if (!_isAtLineStart)
        {
            WriteLine();
        }
    }

    public override string ToString()
    {
        return _output.ToString();
    }

    public void Dispose()
    {
        _output.Clear();
    }

    private void WriteIndentation()
    {
        for (var i = 0; i < _indentLevel; i++)
        {
            _output.Append(_indentString);
        }
    }

    private void EnsureNewLine()
    {
        if (!_isAtLineStart)
        {
            WriteLine();
        }
    }

    private bool ShouldAddNewLineBefore(string content, char? firstChar)
    {
        if (_isAtLineStart)
        {
            return false;
        }

        // Add newline before closing braces
        if (firstChar.HasValue && IsClosingBrace(firstChar.Value))
        {
            return true;
        }

        // Add newline before certain keywords
        if (content.StartsWith("#pragma", StringComparison.Ordinal) ||
            content.StartsWith("using", StringComparison.Ordinal) ||
            content.StartsWith("namespace", StringComparison.Ordinal))
        {
            return true;
        }

        // Add newline before attributes
        if (firstChar == '[')
        {
            return true;
        }

        return false;
    }

    private bool ShouldAddNewLineAfter(string content, char? lastChar)
    {
        if (!lastChar.HasValue)
        {
            return false;
        }

        // Add newline after opening braces
        if (IsOpeningBrace(lastChar.Value))
        {
            return true;
        }

        // Add newline after closing braces
        if (IsClosingBrace(lastChar.Value))
        {
            return true;
        }

        // Add newline after semicolons
        if (lastChar == ';')
        {
            return true;
        }

        // Add newline after certain keywords/directives
        if (content.StartsWith("#pragma", StringComparison.Ordinal) ||
            content.StartsWith("#endregion", StringComparison.Ordinal) ||
            content.StartsWith("#region", StringComparison.Ordinal))
        {
            return true;
        }

        // Add newline after attributes
        if (lastChar == ']' && content.Contains('['))
        {
            return true;
        }

        return false;
    }

    private static char? GetFirstNonWhitespaceChar(string content)
    {
        foreach (var c in content)
        {
            if (!char.IsWhiteSpace(c))
            {
                return c;
            }
        }
        return null;
    }

    private static char? GetLastNonWhitespaceChar(string content)
    {
        for (var i = content.Length - 1; i >= 0; i--)
        {
            if (!char.IsWhiteSpace(content[i]))
            {
                return content[i];
            }
        }
        return null;
    }

    private static bool IsOpeningBrace(char c) => c == '{' || c == '[';
    
    private static bool IsClosingBrace(char c) => c == '}' || c == ']';
}