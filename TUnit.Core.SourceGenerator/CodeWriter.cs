using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;

namespace TUnit.Core.SourceGenerator;

/// <summary>
/// Implementation of ICodeWriter for generating formatted C# source code.
/// </summary>
public class CodeWriter : ICodeWriter
{
    private readonly StringBuilder _output = new();
    private readonly string _indentString;
    internal int _indentLevel;
    private bool _isNewLine = true;

    public CodeWriter(string indentString = "    ", bool includeHeader = true)
    {
        _indentString = indentString;

        if (includeHeader)
        {
            _output.AppendLine("// <auto-generated/>");
            _output.AppendLine("#pragma warning disable");
            _output.AppendLine();
        }
    }

    public ICodeWriter AppendLine(string line = "")
    {
        if (string.IsNullOrEmpty(line))
        {
            _output.AppendLine();
            _isNewLine = true;
            return this;
        }

        WriteIndentationIfNeeded();
        _output.AppendLine(line);
        _isNewLine = true;
        return this;
    }

    public ICodeWriter Append(string text)
    {
        if (string.IsNullOrEmpty(text))
        {
            return this;
        }

        WriteIndentationIfNeeded();
        _output.Append(text);
        _isNewLine = false;
        return this;
    }

    public ICodeWriter AppendLines(IEnumerable<string> lines)
    {
        foreach (var line in lines)
        {
            AppendLine(line);
        }
        return this;
    }

    public ICodeWriter AppendLines(params string[] lines)
    {
        return AppendLines(lines.AsEnumerable());
    }

    public ICodeWriter AppendBlock(string header, Action<ICodeWriter> body)
    {
        AppendLine(header);
        using (Block())
        {
            body(this);
        }
        return this;
    }

    public IDisposable Block(string opener = "{", string closer = "}")
    {
        AppendLine(opener);
        _indentLevel++;
        return new BlockScope(this, closer);
    }

    public IDisposable Scope()
    {
        _indentLevel++;
        return new BlockScope(this, null);
    }

    public ICodeWriter AppendLineIf(bool condition, string line)
    {
        if (condition)
        {
            AppendLine(line);
        }
        return this;
    }

    public ICodeWriter AppendComment(string comment)
    {
        return AppendLine($"// {comment}");
    }

    public ICodeWriter AppendRaw(string multilineText)
    {
        if (string.IsNullOrEmpty(multilineText))
        {
            return this;
        }

        var lines = multilineText.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);

        // Skip leading empty lines
        var startIndex = 0;
        while (startIndex < lines.Length && string.IsNullOrWhiteSpace(lines[startIndex]))
        {
            startIndex++;
        }

        // Skip trailing empty lines
        var endIndex = lines.Length - 1;
        while (endIndex >= startIndex && string.IsNullOrWhiteSpace(lines[endIndex]))
        {
            endIndex--;
        }

        // Process remaining lines
        for (var i = startIndex; i <= endIndex; i++)
        {
            AppendLine(lines[i].TrimEnd());
        }

        return this;
    }

    public override string ToString()
    {
        return _output.ToString();
    }

    public void Dispose()
    {
        _output.Clear();
    }

    private void WriteIndentationIfNeeded()
    {
        if (_isNewLine && _indentLevel > 0)
        {
            for (var i = 0; i < _indentLevel; i++)
            {
                _output.Append(_indentString);
            }

            _isNewLine = false;
        }
    }

    private class BlockScope : IDisposable
    {
        private readonly CodeWriter _writer;
        private readonly string? _closer;

        public BlockScope(CodeWriter writer, string? closer)
        {
            _writer = writer;
            _closer = closer;
        }

        public void Dispose()
        {
            _writer._indentLevel = Math.Max(0, _writer._indentLevel - 1);
            if (!string.IsNullOrEmpty(_closer))
            {
                _writer.AppendLine(_closer!);
            }
        }
    }
}
