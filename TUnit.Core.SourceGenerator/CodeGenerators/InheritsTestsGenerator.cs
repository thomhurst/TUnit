using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using TUnit.Core.SourceGenerator.CodeGenerators.Helpers;
using TUnit.Core.SourceGenerator.CodeGenerators.Writers;
using TUnit.Core.SourceGenerator.Extensions;
using TUnit.Core.SourceGenerator.Models;

namespace TUnit.Core.SourceGenerator.CodeGenerators;

[Generator]
internal class InheritsTestsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var inheritsTestsClasses = context.SyntaxProvider
            .ForAttributeWithMetadataName("TUnit.Core.InheritsTestsAttribute",
                predicate: static (s, _) => IsSyntaxTargetForGeneration(s),
                transform: static (ctx, _) => GetSemanticTargetForGeneration(ctx))
            .Where(static m => m is not null);
        
        context.RegisterSourceOutput(inheritsTestsClasses, Execute);
    }

    static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is ClassDeclarationSyntax;
    }

    static InheritsTestsDataModel? GetSemanticTargetForGeneration(GeneratorAttributeSyntaxContext context)
    {
        if (context.TargetSymbol is not INamedTypeSymbol namedTypeSymbol)
        {
            return null;
        }
        
        if (namedTypeSymbol.IsAbstract)
        {
            return null;
        }

        if (namedTypeSymbol.IsStatic)
        {
            return null;
        }

        if (namedTypeSymbol.DeclaredAccessibility != Accessibility.Public)
        {
            return null;
        }

        return new InheritsTestsDataModel(namedTypeSymbol.Name,
            namedTypeSymbol.GetMembersIncludingBase()
                .OfType<IMethodSymbol>()
                .Where(x => !x.IsAbstract)
                .Where(x => x.MethodKind != MethodKind.Constructor)
                .Where(x => x.IsTest())
                .SelectMany(x => x.ParseTestDatas(context, namedTypeSymbol))
        );
    }

    private void Execute(SourceProductionContext context, InheritsTestsDataModel? model)
    {
        if (model is null)
        {
            return;
        }

        foreach (var modelTestSourceDataModel in model.TestSourceDataModels)
        {
            var className = $"{model.MinimalTypeName}__Inherited";
            var fileName = $"{className}__{Guid.NewGuid():N}";

            using var sourceBuilder = new SourceCodeWriter();

            sourceBuilder.WriteLine("// <auto-generated/>");
            sourceBuilder.WriteLine("#pragma warning disable");
            sourceBuilder.WriteLine("using global::TUnit.Core;");
            sourceBuilder.WriteLine("using global::System.Reflection;");
            sourceBuilder.WriteLine("using global::System.Linq;");
            sourceBuilder.WriteLine();
            sourceBuilder.WriteLine("namespace TUnit.SourceGenerated;");
            sourceBuilder.WriteLine();
            sourceBuilder.WriteLine();
            sourceBuilder.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
            sourceBuilder.WriteLine($"file class {className}");
            sourceBuilder.WriteLine("{");
            sourceBuilder.WriteLine("[SourceGeneratedTestNodeAttribute]");
            sourceBuilder.WriteLine("public static System.Collections.Generic.List<SourceGeneratedTestNode> TestNodes()");
            sourceBuilder.WriteLine("{");

            sourceBuilder.WriteLine("var nodes = new global::System.Collections.Generic.List<SourceGeneratedTestNode>();");

            sourceBuilder.WriteLine($"var {VariableNames.ClassDataIndex} = 0;");
            sourceBuilder.WriteLine($"var {VariableNames.TestMethodDataIndex} = 0;");
            
            sourceBuilder.WriteLine("try");
            sourceBuilder.WriteLine("{");
            GenericTestInvocationWriter.GenerateTestInvocationCode(sourceBuilder, modelTestSourceDataModel);
            sourceBuilder.WriteLine("}");
            sourceBuilder.WriteLine("catch (global::System.Exception exception)");
            sourceBuilder.WriteLine("{");
            FailedTestInitializationWriter.GenerateFailedTestCode(sourceBuilder, modelTestSourceDataModel);
            sourceBuilder.WriteLine("}");
            
            sourceBuilder.WriteLine("return nodes;");
            
            sourceBuilder.WriteLine("}");
            sourceBuilder.WriteLine("}");

            context.AddSource($"{fileName}.Generated.cs", sourceBuilder.ToString());
        }
    }
}