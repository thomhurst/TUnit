[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassDataSourceDrivenTests2 : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ClassDataSourceDrivenTests2());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2);
			var methodInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived1", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>>(true).ElementAt(0);

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = classArgGeneratedDataAccessor();

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests2>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTests2(classArgGeneratedData)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests2>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived1:0",
					TestClassArguments = [classArgGeneratedData],
					TestMethodArguments = [],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Base_Derived1()),
					TestFilePath = @"",
					TestLineNumber = 9,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
					ClassAttributes = [ new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>()
{
    
} ],
					AssemblyAttributes = [  ],
					DataAttributes = [ classDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived1:0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2),
				ReturnType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived1", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Base_Derived1",
				TestFilePath = @"",
				TestLineNumber = 9,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2);
			var methodInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived1", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>>(true).ElementAt(0);

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = classArgGeneratedDataAccessor();

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests2>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTests2(classArgGeneratedData)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests2>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived1:0",
					TestClassArguments = [classArgGeneratedData],
					TestMethodArguments = [],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Base_Derived1()),
					TestFilePath = @"",
					TestLineNumber = 9,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
					ClassAttributes = [ new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>()
{
    
} ],
					AssemblyAttributes = [  ],
					DataAttributes = [ classDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived1:0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2),
				ReturnType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived1", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Base_Derived1",
				TestFilePath = @"",
				TestLineNumber = 9,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassDataSourceDrivenTests2 : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ClassDataSourceDrivenTests2());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2);
			var methodInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived2", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>>(true).ElementAt(0);

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = classArgGeneratedDataAccessor();

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests2>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTests2(classArgGeneratedData)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests2>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived2:0",
					TestClassArguments = [classArgGeneratedData],
					TestMethodArguments = [],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Base_Derived2()),
					TestFilePath = @"",
					TestLineNumber = 15,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
					ClassAttributes = [ new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>()
{
    
} ],
					AssemblyAttributes = [  ],
					DataAttributes = [ classDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived2:0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2),
				ReturnType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived2", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Base_Derived2",
				TestFilePath = @"",
				TestLineNumber = 15,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2);
			var methodInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived2", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>>(true).ElementAt(0);

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = classArgGeneratedDataAccessor();

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests2>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTests2(classArgGeneratedData)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests2>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived2:0",
					TestClassArguments = [classArgGeneratedData],
					TestMethodArguments = [],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Base_Derived2()),
					TestFilePath = @"",
					TestLineNumber = 15,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
					ClassAttributes = [ new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived1>()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>()
{
    
} ],
					AssemblyAttributes = [  ],
					DataAttributes = [ classDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.ClassDataSourceDrivenTests2.Derived2>:{classDataIndex}:CL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests2(TUnit.TestProject.ClassDataSourceDrivenTests2.Base).Base_Derived2:0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2),
				ReturnType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests2).GetMethod("Base_Derived2", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Base_Derived2",
				TestFilePath = @"",
				TestLineNumber = 15,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]