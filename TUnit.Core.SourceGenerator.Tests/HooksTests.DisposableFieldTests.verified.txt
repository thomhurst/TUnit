// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks;
public sealed class GeneratedHookRegistry
{
    static GeneratedHookRegistry()
    {
        try
        {
            PopulateSourcesDictionaries();
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Failed to initialize hook registry: {ex.Message}", ex);
        }
    }
    private static void PopulateSourcesDictionaries()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.DisposableFieldTests), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.DisposableFieldTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.DisposableFieldTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.DisposableFieldTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DisposableFieldTests, TestsBase`1"),
Name = "Setup",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DisposableFieldTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.DisposableFieldTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DisposableFieldTests, TestsBase`1"),
Name = "DisposableFieldTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_DisposableFieldTests_Setup_0Params_Body
            }
        );
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.DisposableFieldTests), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.DisposableFieldTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.DisposableFieldTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.DisposableFieldTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DisposableFieldTests, TestsBase`1"),
Name = "Blah",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DisposableFieldTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.DisposableFieldTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DisposableFieldTests, TestsBase`1"),
Name = "DisposableFieldTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_DisposableFieldTests_Blah_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_DisposableFieldTests_Setup_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.DisposableFieldTests)instance;
        await AsyncConvert.Convert(() => typedInstance.Setup());
    }
    private static async ValueTask global_TUnit_TestProject_DisposableFieldTests_Blah_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.DisposableFieldTests)instance;
        await AsyncConvert.Convert(() => typedInstance.Blah());
    }
}
internal static class HookModuleInitializer
{
    [ModuleInitializer]
    public static void Initialize()
    {
        _ = new GeneratedHookRegistry();
    }
}
