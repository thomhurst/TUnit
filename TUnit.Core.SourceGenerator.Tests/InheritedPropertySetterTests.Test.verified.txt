// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class PropertySetterTests_Test_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    #if NET8_0_OR_GREATER
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property2>k__BackingField")]
    private static extern ref string GetProperty2BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property3>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty3BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property4>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty4BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property5>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty5BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property6>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty6BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property7>k__BackingField")]
    private static extern ref string GetProperty7BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    #endif
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.PropertySetterTests>
        {
            TestName = "Test",
            TestClassType = typeof(global::TUnit.TestProject.PropertySetterTests),
            TestMethodName = "Test",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(string),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("MethodData")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.PropertySetterTests.MethodData();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>(),
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.PerTestSession },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property5",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.PerClass },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property6",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.Keyed, Key = "Key" },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property7",
                    PropertyType = typeof(string),
                    DataSource = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<string>(),
                },
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(string),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty2BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (string)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty3BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty4BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property5",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty5BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property6",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty6BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property7",
                    PropertyType = typeof(string),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty7BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (string)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.PropertySetterTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.PropertySetterTests, TestsBase`1"),
Name = "Test",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.PropertySetterTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.PropertySetterTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.PropertySetterTests, TestsBase`1"),
Name = "PropertySetterTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = new global::TUnit.Core.PropertyMetadata[]
{
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property1"),
    Type = typeof(string),
    Name = "Property1",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property1,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property2"),
    Type = typeof(string),
    Name = "Property2",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property2,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property3"),
    Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
    Name = "Property3",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property3,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property4"),
    Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
    Name = "Property4",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property4,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property5"),
    Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
    Name = "Property5",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property5,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property6"),
    Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
    Name = "Property6",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property6,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property7"),
    Type = typeof(string),
    Name = "Property7",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property7,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("StaticProperty"),
    Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
    Name = "StaticProperty",
    IsStatic = true,
    IsNullable = false,
    Getter = _ => global::TUnit.TestProject.PropertySetterTests.StaticProperty,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
},
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.PropertySetterTests()
            {
                Property1 = default!,
                Property2 = default!,
                Property3 = default!,
                Property4 = default!,
                Property5 = default!,
                Property6 = default!,
                Property7 = default!,
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.PropertySetterTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                await typedInstance.Test();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.Test();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class PropertySetterTests_Test_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.PropertySetterTests), new PropertySetterTests_Test_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class InheritedPropertySetterTests_Test_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    #if NET8_0_OR_GREATER
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property2>k__BackingField")]
    private static extern ref string GetProperty2BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property3>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty3BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property4>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty4BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property5>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty5BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property6>k__BackingField")]
    private static extern ref global::TUnit.TestProject.PropertySetterTests.InnerModel GetProperty6BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property7>k__BackingField")]
    private static extern ref string GetProperty7BackingField(global::TUnit.TestProject.PropertySetterTests instance);
    #endif
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.InheritedPropertySetterTests>
        {
            TestName = "Test",
            TestClassType = typeof(global::TUnit.TestProject.InheritedPropertySetterTests),
            TestMethodName = "Test",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.InheritsTestsAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(string),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("MethodData"),
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>(),
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.PerTestSession },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property5",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.PerClass },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property6",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>() { Shared = global::TUnit.Core.SharedType.Keyed, Key = "Key" },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property7",
                    PropertyType = typeof(string),
                    DataSource = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<string>(),
                },
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(string),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty2BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (string)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty3BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty4BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property5",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty5BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property6",
                    PropertyType = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty6BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (global::TUnit.TestProject.PropertySetterTests.InnerModel)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property7",
                    PropertyType = typeof(string),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty7BackingField((global::TUnit.TestProject.PropertySetterTests)instance) = (string)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.PropertySetterTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.PropertySetterTests, TestsBase`1"),
Name = "Test",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.InheritedPropertySetterTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.InheritedPropertySetterTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.InheritedPropertySetterTests, TestsBase`1"),
Name = "InheritedPropertySetterTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.InheritedPropertySetterTests()
            {
                Property1 = default!,
                Property2 = default!,
                Property3 = default!,
                Property4 = default!,
                Property5 = default!,
                Property6 = default!,
                Property7 = default!,
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.InheritedPropertySetterTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                await typedInstance.Test();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.Test();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class InheritedPropertySetterTests_Test_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.InheritedPropertySetterTests), new InheritedPropertySetterTests_Test_TestSource_GUID());
    }
}
