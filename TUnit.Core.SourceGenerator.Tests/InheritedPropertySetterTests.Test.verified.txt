// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class PropertySetterTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new PropertySetterTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.PropertySetterTests),
				Name = "Test",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = [],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.PropertySetterTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.PropertySetterTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("InheritedPropertySetterTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "InheritedPropertySetterTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "PropertySetterTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property1"),
							Type = typeof(string),
							Name = "Property1",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property1,
							Attributes = 
							[
								new global::TUnit.Core.ArgumentsAttribute("1")
							],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property2"),
							Type = typeof(string),
							Name = "Property2",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property2,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("MethodData")
							],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property3"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property3",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property3,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property4"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property4",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property4,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property5"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property5",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property5,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property6"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property6",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property6,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property7"),
							Type = typeof(string),
							Name = "Property7",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property7,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("StaticProperty"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
							Name = "StaticProperty",
							IsStatic = true,
							Getter = _ => global::TUnit.TestProject.PropertySetterTests.StaticProperty,
							Attributes = [],
						},
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.PropertySetterTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];
			string propertyArg = "1";

			string propertyArg1 = global::TUnit.TestProject.PropertySetterTests.MethodData();
			var propertyDataAttribute2 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>();

			testBuilderContext.DataAttributes.Add(propertyDataAttribute2);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg2 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute2).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property3"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property3",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property3,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute3 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerTestSession,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute3);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg3 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute3).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property4"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property4",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property4,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute4 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerClass,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute4);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg4 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute4).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property5"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property5",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property5,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute5 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.Keyed,
				Key = "Key",
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute5);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg5 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute5).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property6"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property6",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property6,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute6 = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<string>();

			testBuilderContext.DataAttributes.Add(propertyDataAttribute6);

			string propertyArg6 = (string)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute6).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("Property7"),
						Type = typeof(string),
						Name = "Property7",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.PropertySetterTests)o).Property7,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute7 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.StaticInnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerTestSession,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute7);

			global::TUnit.TestProject.PropertySetterTests.StaticInnerModel propertyArg7 = (global::TUnit.TestProject.PropertySetterTests.StaticInnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute7).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetProperty("StaticProperty"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
						Name = "StaticProperty",
						IsStatic = true,
						Getter = _ => global::TUnit.TestProject.PropertySetterTests.StaticProperty,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;


var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PropertySetterTests>(() => new global::TUnit.TestProject.PropertySetterTests()
			{
				Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg),
				Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg1),
				Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg2),
				Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg3),
				Property5 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg4),
				Property6 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg5),
				Property7 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg6),
			}
			, sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();
			global::TUnit.TestProject.PropertySetterTests.StaticProperty = propertyArg7;
			global::TUnit.Core.SourceRegistrar.RegisterGlobalInitializer(async () => await global::TUnit.Core.ObjectInitializer.InitializeAsync(global::TUnit.TestProject.PropertySetterTests.StaticProperty));


			nodes.Add(new TestMetadata<global::TUnit.TestProject.PropertySetterTests>
			{
				TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
					["Property1"] = propertyArg,
					["Property2"] = propertyArg1,
					["Property3"] = propertyArg2,
					["Property4"] = propertyArg3,
					["Property5"] = propertyArg4,
					["Property6"] = propertyArg5,
					["Property7"] = propertyArg6,
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
				TestFilePath = @"",
				TestLineNumber = 69,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.PropertySetterTests>
			{
				TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
				MethodName = $"Test",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("PropertySetterTests.Test failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 69,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Inherited_InheritedPropertySetterTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Inherited_InheritedPropertySetterTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.InheritedPropertySetterTests),
				Name = "Test",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = [],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.InheritedPropertySetterTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.InheritedPropertySetterTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("InheritedPropertySetterTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "InheritedPropertySetterTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "InheritedPropertySetterTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.InheritsTestsAttribute(),

						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property1"),
							Type = typeof(string),
							Name = "Property1",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property1,
							Attributes = 
							[
								new global::TUnit.Core.ArgumentsAttribute("1")
							],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property2"),
							Type = typeof(string),
							Name = "Property2",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property2,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("MethodData")
							],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property3"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property3",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property3,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property4"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property4",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property4,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property5"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property5",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property5,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property6"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property6",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property6,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property7"),
							Type = typeof(string),
							Name = "Property7",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property7,
							Attributes = [],
						},
						new global::TUnit.Core.TestProperty
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("StaticProperty"),
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
							Name = "StaticProperty",
							IsStatic = true,
							Getter = _ => global::TUnit.TestProject.InheritedPropertySetterTests.StaticProperty,
							Attributes = [],
						},
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.InheritedPropertySetterTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];
			string propertyArg = "1";

			string propertyArg1 = global::TUnit.TestProject.InheritedPropertySetterTests.MethodData();
			var propertyDataAttribute2 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>();

			testBuilderContext.DataAttributes.Add(propertyDataAttribute2);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg2 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute2).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property3"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property3",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property3,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute3 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerTestSession,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute3);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg3 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute3).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property4"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property4",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property4,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute4 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerClass,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute4);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg4 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute4).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property5"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property5",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property5,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute5 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.Keyed,
				Key = "Key",
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute5);

			global::TUnit.TestProject.PropertySetterTests.InnerModel propertyArg5 = (global::TUnit.TestProject.PropertySetterTests.InnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute5).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property6"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
						Name = "Property6",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property6,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute6 = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<string>();

			testBuilderContext.DataAttributes.Add(propertyDataAttribute6);

			string propertyArg6 = (string)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute6).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("Property7"),
						Type = typeof(string),
						Name = "Property7",
						IsStatic = false,
						Getter = o => ((global::TUnit.TestProject.InheritedPropertySetterTests)o).Property7,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;

var propertyDataAttribute7 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.StaticInnerModel>()
			{
				Shared = global::TUnit.Core.SharedType.PerTestSession,
			};

			testBuilderContext.DataAttributes.Add(propertyDataAttribute7);

			global::TUnit.TestProject.PropertySetterTests.StaticInnerModel propertyArg7 = (global::TUnit.TestProject.PropertySetterTests.StaticInnerModel)(await global::TUnit.Core.Helpers.AsyncDataSourceHelper.GetFirstValueAsync(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)propertyDataAttribute7).GenerateAsync(new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestProperty
					{
						ReflectionInfo = typeof(global::TUnit.TestProject.InheritedPropertySetterTests).GetProperty("StaticProperty"),
						Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
						Name = "StaticProperty",
						IsStatic = true,
						Getter = _ => global::TUnit.TestProject.InheritedPropertySetterTests.StaticProperty,
						Attributes = [],
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			}
			)))!;


var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.InheritedPropertySetterTests>(() => new global::TUnit.TestProject.InheritedPropertySetterTests()
			{
				Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg),
				Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg1),
				Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg2),
				Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg3),
				Property5 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg4),
				Property6 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg5),
				Property7 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg6),
			}
			, sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();
			global::TUnit.TestProject.InheritedPropertySetterTests.StaticProperty = propertyArg7;
			global::TUnit.Core.SourceRegistrar.RegisterGlobalInitializer(async () => await global::TUnit.Core.ObjectInitializer.InitializeAsync(global::TUnit.TestProject.InheritedPropertySetterTests.StaticProperty));


			nodes.Add(new TestMetadata<global::TUnit.TestProject.InheritedPropertySetterTests>
			{
				TestId = $"TUnit.TestProject.InheritedPropertySetterTests.Test:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
					["Property1"] = propertyArg,
					["Property2"] = propertyArg1,
					["Property3"] = propertyArg2,
					["Property4"] = propertyArg3,
					["Property5"] = propertyArg4,
					["Property6"] = propertyArg5,
					["Property7"] = propertyArg6,
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
				TestFilePath = @"",
				TestLineNumber = 69,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.InheritedPropertySetterTests>
			{
				TestId = $"TUnit.TestProject.InheritedPropertySetterTests.Test:0",
				MethodName = $"Test",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("InheritedPropertySetterTests.Test failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 69,
			});
		}
		return nodes;
	}

}