// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase1_AfterEach1_After_Test_GUID;
internal static class GlobalBase1_AfterEach1_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalBase1), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalBase1)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase1)),
                    Name = "AfterEach1",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase1", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase1)),
                            Name = "GlobalBase1",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase1_AfterEach1_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase1_AfterEach1_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalBase1)instance;
        await AsyncConvert.Convert(() => typedInstance.AfterEach1());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase2_AfterEach2_After_Test_GUID;
internal static class GlobalBase2_AfterEach2_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalBase2), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalBase2)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase2)),
                    Name = "AfterEach2",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase2", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase2)),
                            Name = "GlobalBase2",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase2_AfterEach2_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase2_AfterEach2_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalBase2)instance;
        await AsyncConvert.Convert(() => typedInstance.AfterEach2());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase3_AfterEach3_After_Test_GUID;
internal static class GlobalBase3_AfterEach3_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalBase3), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalBase3)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase3)),
                    Name = "AfterEach3",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase3", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase3)),
                            Name = "GlobalBase3",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase3_AfterEach3_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase3_AfterEach3_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalBase3)instance;
        await AsyncConvert.Convert(() => typedInstance.AfterEach3());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_CleanUp_After_Test_GUID;
internal static class GlobalCleanUpTests_CleanUp_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "CleanUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUp_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUp_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.CleanUp());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_CleanUp_After_Test_GUID;
internal static class GlobalCleanUpTests_CleanUp_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "CleanUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("CleanUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUp_1Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUp_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.CleanUp(cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_CleanUpWithContext_After_Test_GUID;
internal static class GlobalCleanUpTests_CleanUpWithContext_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "CleanUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "testContext",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("CleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUpWithContext_1Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUpWithContext_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.CleanUpWithContext(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_CleanUpWithContext_After_Test_GUID;
internal static class GlobalCleanUpTests_CleanUpWithContext_After_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.AfterTestHooks[typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "CleanUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "testContext",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("CleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("CleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUpWithContext_2Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_CleanUpWithContext_2Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.CleanUpWithContext(context, cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase1_AfterAll1_AfterEvery_Test_GUID;
internal static class GlobalBase1_AfterAll1_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase1)),
                    Name = "AfterAll1",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1).GetMethod("AfterAll1", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase1", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase1),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase1)),
                            Name = "GlobalBase1",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase1_AfterAll1_1Params_Body,
                FilePath = @"",
                LineNumber = 5
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase1_AfterAll1_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalBase1.AfterAll1(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase2_AfterAll2_AfterEvery_Test_GUID;
internal static class GlobalBase2_AfterAll2_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase2)),
                    Name = "AfterAll2",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2).GetMethod("AfterAll2", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase2", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase2),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase2)),
                            Name = "GlobalBase2",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase2_AfterAll2_1Params_Body,
                FilePath = @"",
                LineNumber = 20
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase2_AfterAll2_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalBase2.AfterAll2(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase3_AfterAll3_AfterEvery_Test_GUID;
internal static class GlobalBase3_AfterAll3_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase3)),
                    Name = "AfterAll3",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3).GetMethod("AfterAll3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalBase3", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalBase3),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalBase3)),
                            Name = "GlobalBase3",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalBase3_AfterAll3_1Params_Body,
                FilePath = @"",
                LineNumber = 35
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalBase3_AfterAll3_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalBase3.AfterAll3(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_AfterAllCleanUp_AfterEvery_Test_GUID;
internal static class GlobalCleanUpTests_AfterAllCleanUp_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "AfterAllCleanUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUp_1Params_Body,
                FilePath = @"",
                LineNumber = 50
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUp_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalCleanUpTests.AfterAllCleanUp(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_AfterAllCleanUp_AfterEvery_Test_GUID;
internal static class GlobalCleanUpTests_AfterAllCleanUp_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "AfterAllCleanUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUp_2Params_Body,
                FilePath = @"",
                LineNumber = 56
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUp_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalCleanUpTests.AfterAllCleanUp(context, cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_AfterAllCleanUpWithContext_AfterEvery_Test_GUID;
internal static class GlobalCleanUpTests_AfterAllCleanUpWithContext_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "AfterAllCleanUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUpWithContext_1Params_Body,
                FilePath = @"",
                LineNumber = 62
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUpWithContext_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalCleanUpTests.AfterAllCleanUpWithContext(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalCleanUpTests_AfterAllCleanUpWithContext_AfterEvery_Test_GUID;
internal static class GlobalCleanUpTests_AfterAllCleanUpWithContext_AfterEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.AfterEveryTestHooks.Add(
            new AfterTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                    Name = "AfterAllCleanUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests).GetMethod("AfterAllCleanUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AfterTests.GlobalCleanUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.AfterTests.GlobalCleanUpTests)),
                            Name = "GlobalCleanUpTests",
                            Namespace = "TUnit.TestProject.AfterTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextAfterEveryTestHookIndex(),
                Body = global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUpWithContext_2Params_Body,
                FilePath = @"",
                LineNumber = 68
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_AfterTests_GlobalCleanUpTests_AfterAllCleanUpWithContext_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.GlobalCleanUpTests.AfterAllCleanUpWithContext(context, cancellationToken));
    }
}
