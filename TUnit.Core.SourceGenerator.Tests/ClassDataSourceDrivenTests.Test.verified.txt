// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "DataSource_Class",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Class",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class(TUnit.TestProject.Library.Models.SomeAsyncDisposableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Class(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 11,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "DataSource_Class",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class(TUnit.TestProject.Library.Models.SomeAsyncDisposableClass):0",
				MethodName = $"DataSource_Class",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.DataSource_Class failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 11,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "DataSource_Class_Generic",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Class_Generic",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class_Generic(TUnit.TestProject.Library.Models.SomeAsyncDisposableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Class_Generic(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 18,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "DataSource_Class_Generic",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.DataSource_Class_Generic(TUnit.TestProject.Library.Models.SomeAsyncDisposableClass):0",
				MethodName = $"DataSource_Class_Generic",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.DataSource_Class_Generic failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 18,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "IsInitialized_With_1_ClassDataSource",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IsInitialized_With_1_ClassDataSource",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_1_ClassDataSource(TUnit.TestProject.Library.Models.InitializableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IsInitialized_With_1_ClassDataSource(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 25,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "IsInitialized_With_1_ClassDataSource",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_1_ClassDataSource(TUnit.TestProject.Library.Models.InitializableClass):0",
				MethodName = $"IsInitialized_With_1_ClassDataSource",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.IsInitialized_With_1_ClassDataSource failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 25,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "IsInitialized_With_2_ClassDataSources",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IsInitialized_With_2_ClassDataSources",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[0]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[1]);

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_2_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IsInitialized_With_2_ClassDataSources(methodArg, methodArg1)),
					TestFilePath = @"",
					TestLineNumber = 32,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "IsInitialized_With_2_ClassDataSources",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_2_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
				MethodName = $"IsInitialized_With_2_ClassDataSources",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.IsInitialized_With_2_ClassDataSources failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 32,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "IsInitialized_With_3_ClassDataSources",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IsInitialized_With_3_ClassDataSources",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[0]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[1]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[2]);

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_3_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IsInitialized_With_3_ClassDataSources(methodArg, methodArg1, methodArg2)),
					TestFilePath = @"",
					TestLineNumber = 40,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "IsInitialized_With_3_ClassDataSources",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_3_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
				MethodName = $"IsInitialized_With_3_ClassDataSources",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.IsInitialized_With_3_ClassDataSources failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 40,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "IsInitialized_With_4_ClassDataSources",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class4",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IsInitialized_With_4_ClassDataSources",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class4",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[0]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[1]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[2]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[3]);

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_4_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IsInitialized_With_4_ClassDataSources(methodArg, methodArg1, methodArg2, methodArg3)),
					TestFilePath = @"",
					TestLineNumber = 49,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "IsInitialized_With_4_ClassDataSources",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_4_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
				MethodName = $"IsInitialized_With_4_ClassDataSources",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.IsInitialized_With_4_ClassDataSources failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 49,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
				Name = "IsInitialized_With_5_ClassDataSources",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class4",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class5",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("ClassDataSourceDrivenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "ClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "ClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IsInitialized_With_5_ClassDataSources",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class1",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class3",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class4",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Library.Models.InitializableClass>
					{
						Name = "class5",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = global::TUnit.Core.Helpers.AsyncDataSourceHelper.WrapAsyncEnumerable(((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute), methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[0]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[1]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[2]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[3]);
				global::TUnit.TestProject.Library.Models.InitializableClass methodArg4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Library.Models.InitializableClass>(methodArgGeneratedData[4]);

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.ClassDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_5_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3, methodArg4],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IsInitialized_With_5_ClassDataSources(methodArg, methodArg1, methodArg2, methodArg3, methodArg4)),
					TestFilePath = @"",
					TestLineNumber = 59,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "IsInitialized_With_5_ClassDataSources",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass, global::TUnit.TestProject.Library.Models.InitializableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTests.IsInitialized_With_5_ClassDataSources(TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass,TUnit.TestProject.Library.Models.InitializableClass):0",
				MethodName = $"IsInitialized_With_5_ClassDataSources",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassDataSourceDrivenTests.IsInitialized_With_5_ClassDataSources failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 59,
			});
		}
		return nodes;
	}

}