[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Name = "Params",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string[]>
    {
        Name = "arguments",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ArgsAsArrayTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "ArgsAsArrayTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string[] methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => 
			new global::TUnit.TestProject.ArgsAsArrayTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Params(string[]):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Params(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Params(string[]):0",
				TestClass = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string[])],
				TestName = "Params",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Name = "NonParams",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string[]>
    {
        Name = "arguments",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ArgsAsArrayTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "ArgsAsArrayTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string[] methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => 
			new global::TUnit.TestProject.ArgsAsArrayTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.NonParams(string[]):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NonParams(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 15,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.NonParams(string[]):0",
				TestClass = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string[])],
				TestName = "NonParams",
				TestFilePath = @"",
				TestLineNumber = 15,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Name = "ParamsEnumerable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Collections.Generic.IEnumerable<string>>
    {
        Name = "arguments",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ArgsAsArrayTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "ArgsAsArrayTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Collections.Generic.IEnumerable<string> methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => 
			new global::TUnit.TestProject.ArgsAsArrayTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.ParamsEnumerable(System.Collections.Generic.IEnumerable<string>):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.ParamsEnumerable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 25,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.ParamsEnumerable(System.Collections.Generic.IEnumerable<string>):0",
				TestClass = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(global::System.Collections.Generic.IEnumerable<string>)],
				TestName = "ParamsEnumerable",
				TestFilePath = @"",
				TestLineNumber = 25,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Name = "Enumerable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Collections.Generic.IEnumerable<string>>
    {
        Name = "arguments",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ArgsAsArrayTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "ArgsAsArrayTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Collections.Generic.IEnumerable<string> methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => 
			new global::TUnit.TestProject.ArgsAsArrayTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Enumerable(System.Collections.Generic.IEnumerable<string>):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Enumerable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 35,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Enumerable(System.Collections.Generic.IEnumerable<string>):0",
				TestClass = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(global::System.Collections.Generic.IEnumerable<string>)],
				TestName = "Enumerable",
				TestFilePath = @"",
				TestLineNumber = 35,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Name = "Following_Non_Params",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(1, "arg1", "arg2", "arg3")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "i",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Collections.Generic.IEnumerable<string>>
    {
        Name = "arguments",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ArgsAsArrayTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "ArgsAsArrayTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			int methodArg = 1;
			global::System.Collections.Generic.IEnumerable<string> methodArg1 = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => 
			new global::TUnit.TestProject.ArgsAsArrayTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Following_Non_Params(int,System.Collections.Generic.IEnumerable<string>):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Following_Non_Params(methodArg, methodArg1)),
				TestFilePath = @"",
				TestLineNumber = 45,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Following_Non_Params(int,System.Collections.Generic.IEnumerable<string>):0",
				TestClass = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(int), typeof(global::System.Collections.Generic.IEnumerable<string>)],
				TestName = "Following_Non_Params",
				TestFilePath = @"",
				TestLineNumber = 45,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]