// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				Name = "Params",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Params",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							"",
							5,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Params",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "arg1", "arg2", "arg3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string[]>
					{
						Name = "arguments",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "ArgsAsArrayTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "ArgsAsArrayTests",
							}

						],
					}),
					Name = "ArgsAsArrayTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Params",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ArgsAsArrayTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string[] methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => new global::TUnit.TestProject.ArgsAsArrayTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Params(string[]):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 5,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Params(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Params",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Params(string[]):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ArgsAsArrayTests.Params failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestClassName = "ArgsAsArrayTests",
				TestMethodName = "Params"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				Name = "NonParams",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NonParams",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							"",
							15,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NonParams",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "arg1", "arg2", "arg3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string[]>
					{
						Name = "arguments",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "ArgsAsArrayTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "ArgsAsArrayTests",
							}

						],
					}),
					Name = "ArgsAsArrayTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NonParams",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ArgsAsArrayTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string[] methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => new global::TUnit.TestProject.ArgsAsArrayTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.NonParams(string[]):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 15,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NonParams(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NonParams",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.NonParams(string[]):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ArgsAsArrayTests.NonParams failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 15,
				TestClassName = "ArgsAsArrayTests",
				TestMethodName = "NonParams"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				Name = "ParamsEnumerable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "ParamsEnumerable",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							"",
							25,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "ParamsEnumerable",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "arg1", "arg2", "arg3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Collections.Generic.IEnumerable<string>>
					{
						Name = "arguments",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "ArgsAsArrayTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "ArgsAsArrayTests",
							}

						],
					}),
					Name = "ArgsAsArrayTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "ParamsEnumerable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ArgsAsArrayTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::System.Collections.Generic.IEnumerable<string> methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => new global::TUnit.TestProject.ArgsAsArrayTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.ParamsEnumerable(System.Collections.Generic.IEnumerable<string>):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 25,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.ParamsEnumerable(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "ParamsEnumerable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.ParamsEnumerable(System.Collections.Generic.IEnumerable<string>):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ArgsAsArrayTests.ParamsEnumerable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 25,
				TestClassName = "ArgsAsArrayTests",
				TestMethodName = "ParamsEnumerable"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				Name = "Enumerable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Enumerable",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							"",
							35,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("arg1", "arg2", "arg3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Enumerable",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "arg1", "arg2", "arg3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Collections.Generic.IEnumerable<string>>
					{
						Name = "arguments",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "ArgsAsArrayTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "ArgsAsArrayTests",
							}

						],
					}),
					Name = "ArgsAsArrayTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Enumerable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ArgsAsArrayTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::System.Collections.Generic.IEnumerable<string> methodArg = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => new global::TUnit.TestProject.ArgsAsArrayTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Enumerable(System.Collections.Generic.IEnumerable<string>):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Enumerable(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Enumerable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Enumerable(System.Collections.Generic.IEnumerable<string>):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ArgsAsArrayTests.Enumerable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassName = "ArgsAsArrayTests",
				TestMethodName = "Enumerable"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class ArgsAsArrayTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ArgsAsArrayTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
				Name = "Following_Non_Params",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Following_Non_Params",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							"",
							45,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1, "arg1", "arg2", "arg3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Following_Non_Params",
						TargetType = typeof(TUnit.TestProject.ArgsAsArrayTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1, "arg1", "arg2", "arg3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "i",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::System.Collections.Generic.IEnumerable<string>>
					{
						Name = "arguments",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ArgsAsArrayTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("ArgsAsArrayTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "ArgsAsArrayTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "ArgsAsArrayTests",
							}

						],
					}),
					Name = "ArgsAsArrayTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.ArgsAsArrayTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Following_Non_Params",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.ArgsAsArrayTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 1;
			global::System.Collections.Generic.IEnumerable<string> methodArg1 = ["arg1", "arg2", "arg3"];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ArgsAsArrayTests>(() => new global::TUnit.TestProject.ArgsAsArrayTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.ArgsAsArrayTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Following_Non_Params(int,System.Collections.Generic.IEnumerable<string>):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 45,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Following_Non_Params(methodArg, methodArg1)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Following_Non_Params",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ArgsAsArrayTests.Following_Non_Params(int,System.Collections.Generic.IEnumerable<string>):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ArgsAsArrayTests.Following_Non_Params failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 45,
				TestClassName = "ArgsAsArrayTests",
				TestMethodName = "Following_Non_Params"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}