// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_Transfer_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "Transfer",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "Transfer",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(2_000m, 123_999.00000000000000001m),
                new global::TUnit.Core.ArgumentsAttribute(2_000.00000000000000001m, 123_999m),
                new global::TUnit.Core.ArgumentsAttribute(2_000.00000000000000001m, 123_999.00000000000000001m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 9,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "Transfer",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "debit",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("Transfer", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "credit",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("Transfer", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal) }, null)!.GetParameters()[1]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 2:
                        await instance.Transfer(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_Transfer_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_Transfer_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_SimpleDecimal_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "SimpleDecimal",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "SimpleDecimal",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123.456m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 29,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "SimpleDecimal",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("SimpleDecimal", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.SimpleDecimal(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_SimpleDecimal_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_SimpleDecimal_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_SmallDecimal_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "SmallDecimal",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "SmallDecimal",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(0.00000000000000001m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 36,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "SmallDecimal",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("SmallDecimal", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.SmallDecimal(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_SmallDecimal_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_SmallDecimal_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_MaxDecimal_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "MaxDecimal",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "MaxDecimal",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute("79228162514264337593543950335"),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 43,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "MaxDecimal",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("MaxDecimal", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.MaxDecimal(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_MaxDecimal_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_MaxDecimal_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_MinDecimal_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "MinDecimal",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "MinDecimal",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute("-79228162514264337593543950335"),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 50,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "MinDecimal",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("MinDecimal", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.MinDecimal(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_MinDecimal_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_MinDecimal_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_ExplicitDecimalValue_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "ExplicitDecimalValue",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "ExplicitDecimalValue",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute("123.456"),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 57,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "ExplicitDecimalValue",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("ExplicitDecimalValue", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.ExplicitDecimalValue(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_ExplicitDecimalValue_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_ExplicitDecimalValue_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_MultipleDecimals_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "MultipleDecimals",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "MultipleDecimals",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(1.1m, 2.2m, 3.3m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 64,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "MultipleDecimals",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "a",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("MultipleDecimals", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "b",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("MultipleDecimals", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal) }, null)!.GetParameters()[1]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "c",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("MultipleDecimals", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal) }, null)!.GetParameters()[2]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 3:
                        await instance.MultipleDecimals(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_MultipleDecimals_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_MultipleDecimals_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_Test_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "Test",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "Test",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(0.5m),
                new global::TUnit.Core.ArgumentsAttribute(0.75m),
                new global::TUnit.Core.ArgumentsAttribute(1m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 73,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "Test",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "test",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("Test", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        instance.Test(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_Test_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_Test_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_TransactionDiscountCalculations_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "TransactionDiscountCalculations",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "TransactionDiscountCalculations",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(50m, 75m, 70m, 5m, 0m, true),
                new global::TUnit.Core.ArgumentsAttribute(70m, 75m, 70m, 5m, 5m, true),
                new global::TUnit.Core.ArgumentsAttribute(70m, 75m, 70m, 5m, 0m, false),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 82,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "TransactionDiscountCalculations",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "amountPaying",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "invoiceBalance",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[1]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "invoiceBalanceDue",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[2]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "discountAmount",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[3]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "appliedDiscountAmount",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[4]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(bool))
                    {
                        Name = "discountAllowedForUser",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(bool)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TransactionDiscountCalculations", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(decimal), typeof(bool) }, null)!.GetParameters()[5]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 6:
                        instance.TransactionDiscountCalculations(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[2]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[3]), TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[4]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[5]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 6 arguments, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_TransactionDiscountCalculations_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_TransactionDiscountCalculations_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_Equality3_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "Equality3",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "Equality3",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(2_000.00000000000000001m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 91,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "Equality3",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "credit",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("Equality3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Equality3(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_Equality3_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_Equality3_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_Equality4_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "Equality4",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "Equality4",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123_999.00000000000000001m),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 104,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "Equality4",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "credit",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("Equality4", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Equality4(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_Equality4_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_Equality4_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class DecimalArgumentTests_TestMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.DecimalArgumentTests>
        {
            TestName = "TestMethod",
            TestClassType = typeof(global::TUnit.TestProject.DecimalArgumentTests),
            TestMethodName = "TestMethod",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(42),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 119,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                Name = "TestMethod",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(decimal))
                    {
                        Name = "batchingSize",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(decimal)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.DecimalArgumentTests).GetMethod("TestMethod", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(decimal) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.DecimalArgumentTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.DecimalArgumentTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.DecimalArgumentTests)),
                        Name = "DecimalArgumentTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.DecimalArgumentTests(),
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.TestMethod(TUnit.Core.Helpers.CastHelper.Cast<decimal>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class DecimalArgumentTests_TestMethod_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.DecimalArgumentTests), new DecimalArgumentTests_TestMethod_TestSource_GUID());
    }
}
