// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_BaseTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_BaseTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<>),
				MethodInfo = new global::TUnit.Core.TestMethod
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<>),
					Name = "Setup",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.Bugs._1589.BaseTests<>", () => new global::TUnit.Core.TestClass
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<>),
						Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("Hooks1589", () => new global::TUnit.Core.TestAssembly
						{
							Name = "Hooks1589",
							Attributes = 
							[
								new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
							],
						}),
						Name = "BaseTests",
						Namespace = "TUnit.TestProject.Bugs._1589",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.ConvertObject(() => classInstance.GetType().GetMethod("Setup", []).Invoke(classInstance, [])),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>),
				MethodInfo = new global::TUnit.Core.TestMethod
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>),
					Name = "Setup",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>", () => new global::TUnit.Core.TestClass
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>),
						Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("Hooks1589", () => new global::TUnit.Core.TestAssembly
						{
							Name = "Hooks1589",
							Attributes = 
							[
								new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
							],
						}),
						Name = "BaseTests",
						Namespace = "TUnit.TestProject.Bugs._1589",
						Attributes = [],
						Parameters = 
						[
							new global::TUnit.Core.TestParameter<global::TUnit.TestProject.Bugs._1589.MyFixture>
							{
								Name = "fixture",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Properties = 
						[
							new global::TUnit.Core.TestProperty
							{
								ReflectionInfo = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>).GetProperty("Fixture"),
								Type = typeof(global::TUnit.TestProject.Bugs._1589.MyFixture),
								Name = "Fixture",
								IsStatic = false,
								Getter = o => ((global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>)o).Fixture,
								Attributes = [],
							},
							new global::TUnit.Core.TestProperty
							{
								ReflectionInfo = typeof(global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>).GetProperty("MyProp"),
								Type = typeof(int),
								Name = "MyProp",
								IsStatic = false,
								Getter = o => ((global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>)o).MyProp,
								Attributes = [],
							},
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.Bugs._1589.BaseTests<global::TUnit.TestProject.Bugs._1589.MyFixture>)classInstance).Setup()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}