[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class AutoDataTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new AutoDataTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.AutoDataTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.AutoDataTests), "Test1", 0, [typeof(string), typeof(int), typeof(double), typeof(bool)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classInformation = new global::TUnit.Core.SourceGeneratedClassInformation<global::TUnit.TestProject.AutoDataTests>
{
     Name = "AutoDataTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
};
			var testInformation = new global::TUnit.Core.SourceGeneratedTestInformation<global::TUnit.TestProject.AutoDataTests>
{
     Name = "Test1",
     Attributes = 
     [
         new global::TUnit.TestProject.Attributes.AutoDataAttribute()
{
    
}, 
new global::TUnit.Core.TestAttribute()
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "value1",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value2",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<double>
    {
        Name = "value3",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
    {
        Name = "value4",
        Attributes = 
        [
            
        ]
    }],
     Class = classInformation,
};
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
   TestClassType = testClassType,
   TestBuilderContext = testBuilderContextAccessor,
   TestInformation = testInformation,
   MembersToGenerate = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "value1",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value2",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<double>
    {
        Name = "value3",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
    {
        Name = "value4",
        Attributes = 
        [
            
        ]
    }],
   TestSessionId = sessionId,
};
			var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoDataAttribute()
{
    
};

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				string methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[0]);
				int methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[1]);
				double methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<double>(methodArgGeneratedData[2]);
				bool methodArg3 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[3]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.AutoDataTests>(() => 
				new global::TUnit.TestProject.AutoDataTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.AutoDataTests>
				{
					TestId = $"global::TUnit.TestProject.Attributes.AutoDataAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.AutoDataTests.Test1(string,int,double,bool):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test1(methodArg, methodArg1, methodArg2, methodArg3)),
					TestFilePath = @"",
					TestLineNumber = 8,
					TestAttributes = [ new global::TUnit.TestProject.Attributes.AutoDataAttribute()
{
    
}, new global::TUnit.Core.TestAttribute()
{
    
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoDataAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.AutoDataTests.Test1(string,int,double,bool):0",
				TestClass = typeof(global::TUnit.TestProject.AutoDataTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.AutoDataTests), "Test1", 0, [typeof(string), typeof(int), typeof(double), typeof(bool)]).ReturnType,
				ParameterTypeFullNames = [typeof(string), typeof(int), typeof(double), typeof(bool)],
				TestName = "Test1",
				TestFilePath = @"",
				TestLineNumber = 8,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]