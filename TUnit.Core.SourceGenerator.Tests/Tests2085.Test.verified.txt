[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.Bugs._2085.Tests),
				Name = "Double_SpecialConsts",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<double>
					{
						Name = "d",
						Attributes = 
						[
							new global::TUnit.Core.MatrixAttribute(double.NaN, double.PositiveInfinity, double.NegativeInfinity)
						],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._2085.Tests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._2085.Tests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests2085", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "Tests2085",
						Attributes = [],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._2085",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.Bugs._2085.Tests? classInstance = null;
				object?[]? classInstanceArguments = null;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<double>
						{
							Name = "d",
							Attributes = 
							[
								new global::TUnit.Core.MatrixAttribute(double.NaN, double.PositiveInfinity, double.NegativeInfinity)
							],
							ReflectionInfo = null!,
						},
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();

				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					classInstanceArguments = [];

					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					double methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<double>(methodArgGeneratedData[0]);
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._2085.Tests>(() => 
					new global::TUnit.TestProject.Bugs._2085.Tests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._2085.Tests>
					{
						TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._2085.Tests.Double_SpecialConsts(double):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Double_SpecialConsts(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 10,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._2085.Tests>
				{
					TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._2085.Tests.Double_SpecialConsts(double):0",
					MethodName = $"Double_SpecialConsts",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.Double_SpecialConsts failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 10,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.Bugs._2085.Tests),
				Name = "Float_SpecialConsts",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<float>
					{
						Name = "d",
						Attributes = 
						[
							new global::TUnit.Core.MatrixAttribute(float.NaN, float.PositiveInfinity, float.NegativeInfinity)
						],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._2085.Tests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._2085.Tests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests2085", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "Tests2085",
						Attributes = [],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._2085",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.Bugs._2085.Tests? classInstance = null;
				object?[]? classInstanceArguments = null;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<float>
						{
							Name = "d",
							Attributes = 
							[
								new global::TUnit.Core.MatrixAttribute(float.NaN, float.PositiveInfinity, float.NegativeInfinity)
							],
							ReflectionInfo = null!,
						},
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();

				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					classInstanceArguments = [];

					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					float methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<float>(methodArgGeneratedData[0]);
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._2085.Tests>(() => 
					new global::TUnit.TestProject.Bugs._2085.Tests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._2085.Tests>
					{
						TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._2085.Tests.Float_SpecialConsts(float):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Float_SpecialConsts(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 17,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._2085.Tests>
				{
					TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._2085.Tests.Float_SpecialConsts(float):0",
					MethodName = $"Float_SpecialConsts",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.Float_SpecialConsts failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 17,
				});
			}
			return nodes;
		}
	}

]