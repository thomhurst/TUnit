[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class EnumerableTupleDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new EnumerableTupleDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
     Name = "DataSource_TupleMethod",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
{
    
}, 
new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "value2",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
    {
        Name = "value3",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("EnumerableTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "EnumerableTupleDataSourceDrivenTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "EnumerableTupleDataSourceDrivenTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			foreach (var methodDataAccessor in global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.TupleMethod())
			{
				testMethodDataIndex++;

				var methodData = methodDataAccessor;
				var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(methodData);
				int methodArg = methodArgTuples.Item1;
				string methodArg1 = methodArgTuples.Item2;
				bool methodArg2 = methodArgTuples.Item3;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests>(() => 
				new global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.DataSource_TupleMethod(int,string,bool):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
					TestFilePath = @"",
					TestLineNumber = 5,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.DataSource_TupleMethod(int,string,bool):0",
				TestClass = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(int), typeof(string), typeof(bool)],
				TestName = "DataSource_TupleMethod",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
     Name = "DataSource_TupleMethod",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
{
    
}, 
new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "value2",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
    {
        Name = "value3",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("EnumerableTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "EnumerableTupleDataSourceDrivenTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "EnumerableTupleDataSourceDrivenTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			foreach (var methodDataAccessor in global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.NamedTupleMethod())
			{
				testMethodDataIndex++;

				var methodData = methodDataAccessor;
				var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(methodData);
				int methodArg = methodArgTuples.Item1;
				string methodArg1 = methodArgTuples.Item2;
				bool methodArg2 = methodArgTuples.Item3;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests>(() => 
				new global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.DataSource_TupleMethod(int,string,bool):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
					TestFilePath = @"",
					TestLineNumber = 5,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.EnumerableTupleDataSourceDrivenTests.DataSource_TupleMethod(int,string,bool):0",
				TestClass = typeof(global::TUnit.TestProject.EnumerableTupleDataSourceDrivenTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(int), typeof(string), typeof(bool)],
				TestName = "DataSource_TupleMethod",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]