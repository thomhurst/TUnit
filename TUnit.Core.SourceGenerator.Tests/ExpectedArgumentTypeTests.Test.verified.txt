// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ExpectedArgumentTypeTests_TypedArguments_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ExpectedArgumentTypeTests>
        {
            TestName = "TypedArguments",
            TestClassType = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
            TestMethodName = "TypedArguments",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(0d, typeof(double)),
                new global::TUnit.Core.ArgumentsAttribute(0f, typeof(float)),
                new global::TUnit.Core.ArgumentsAttribute((sbyte)0, typeof(sbyte)),
                new global::TUnit.Core.ArgumentsAttribute((byte)0, typeof(byte)),
                new global::TUnit.Core.ArgumentsAttribute((short)0, typeof(short)),
                new global::TUnit.Core.ArgumentsAttribute((ushort)0, typeof(ushort)),
                new global::TUnit.Core.ArgumentsAttribute(0, typeof(int)),
                new global::TUnit.Core.ArgumentsAttribute((uint)0, typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute(0u, typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute((long)0, typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute(0L, typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute((ulong)0, typeof(ulong)),
                new global::TUnit.Core.ArgumentsAttribute(0UL, typeof(ulong)),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(0d, typeof(double)),
                new global::TUnit.Core.ArgumentsAttribute(0f, typeof(float)),
                new global::TUnit.Core.ArgumentsAttribute((sbyte)0, typeof(sbyte)),
                new global::TUnit.Core.ArgumentsAttribute((byte)0, typeof(byte)),
                new global::TUnit.Core.ArgumentsAttribute((short)0, typeof(short)),
                new global::TUnit.Core.ArgumentsAttribute((ushort)0, typeof(ushort)),
                new global::TUnit.Core.ArgumentsAttribute(0, typeof(int)),
                new global::TUnit.Core.ArgumentsAttribute((uint)0, typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute(0u, typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute((long)0, typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute(0L, typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute((ulong)0, typeof(ulong)),
                new global::TUnit.Core.ArgumentsAttribute(0UL, typeof(ulong)),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 8,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExpectedArgumentTypeTests, TestsBase`1"),
                Name = "TypedArguments",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "value",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("object, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests).GetMethod("TypedArguments", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(object), typeof(global::System.Type) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(global::System.Type))
                    {
                        Name = "expectedType",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Type, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests).GetMethod("TypedArguments", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(object), typeof(global::System.Type) }, null)!.GetParameters()[1]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ExpectedArgumentTypeTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExpectedArgumentTypeTests, TestsBase`1"),
                        Name = "ExpectedArgumentTypeTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ExpectedArgumentTypeTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ExpectedArgumentTypeTests)instance;
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.TypedArguments(TUnit.Core.Helpers.CastHelper.Cast<object>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 2:
                        await instance.TypedArguments(TUnit.Core.Helpers.CastHelper.Cast<object>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ExpectedArgumentTypeTests_TypedArguments_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests), new ExpectedArgumentTypeTests_TypedArguments_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ExpectedArgumentTypeTests_EnumTypes_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ExpectedArgumentTypeTests>
        {
            TestName = "EnumTypes",
            TestClassType = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
            TestMethodName = "EnumTypes",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.ByteEnum.Default, typeof(global::TUnit.TestProject.ByteEnum), typeof(byte)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.SByteEnum.Default, typeof(global::TUnit.TestProject.SByteEnum), typeof(sbyte)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int16Enum.Default, typeof(global::TUnit.TestProject.Int16Enum), typeof(short)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt16Enum.Default, typeof(global::TUnit.TestProject.UInt16Enum), typeof(ushort)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int32Enum.Default, typeof(global::TUnit.TestProject.Int32Enum), typeof(int)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt32Enum.Default, typeof(global::TUnit.TestProject.UInt32Enum), typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int64Enum.Default, typeof(global::TUnit.TestProject.Int64Enum), typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt64Enum.Default, typeof(global::TUnit.TestProject.UInt64Enum), typeof(ulong)),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.ByteEnum.Default, typeof(global::TUnit.TestProject.ByteEnum), typeof(byte)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.SByteEnum.Default, typeof(global::TUnit.TestProject.SByteEnum), typeof(sbyte)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int16Enum.Default, typeof(global::TUnit.TestProject.Int16Enum), typeof(short)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt16Enum.Default, typeof(global::TUnit.TestProject.UInt16Enum), typeof(ushort)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int32Enum.Default, typeof(global::TUnit.TestProject.Int32Enum), typeof(int)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt32Enum.Default, typeof(global::TUnit.TestProject.UInt32Enum), typeof(uint)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.Int64Enum.Default, typeof(global::TUnit.TestProject.Int64Enum), typeof(long)),
                new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.UInt64Enum.Default, typeof(global::TUnit.TestProject.UInt64Enum), typeof(ulong)),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 25,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExpectedArgumentTypeTests, TestsBase`1"),
                Name = "EnumTypes",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "value",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("object, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests).GetMethod("EnumTypes", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(object), typeof(global::System.Type), typeof(global::System.Type) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(global::System.Type))
                    {
                        Name = "expectedValueType",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Type, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests).GetMethod("EnumTypes", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(object), typeof(global::System.Type), typeof(global::System.Type) }, null)!.GetParameters()[1]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(global::System.Type))
                    {
                        Name = "expectedEnumUnderlyingType",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Type, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests).GetMethod("EnumTypes", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(object), typeof(global::System.Type), typeof(global::System.Type) }, null)!.GetParameters()[2]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ExpectedArgumentTypeTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExpectedArgumentTypeTests, TestsBase`1"),
                        Name = "ExpectedArgumentTypeTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ExpectedArgumentTypeTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ExpectedArgumentTypeTests)instance;
                switch (args.Length)
                {
                    case 3:
                        await typedInstance.EnumTypes(TUnit.Core.Helpers.CastHelper.Cast<object>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 3:
                        await instance.EnumTypes(TUnit.Core.Helpers.CastHelper.Cast<object>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::System.Type>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ExpectedArgumentTypeTests_EnumTypes_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ExpectedArgumentTypeTests), new ExpectedArgumentTypeTests_EnumTypes_TestSource_GUID());
    }
}
