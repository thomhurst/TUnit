[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataSourceClassCombinedWithDataSourceMethod : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceClassCombinedWithDataSourceMethod());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
			..Tests6(sessionId),
			..Tests7(sessionId),
			..Tests8(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
				Name = "DataSourceClassCombinedWithDataSourceMethodTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
					new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
					new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "i",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataSourceClassCombinedWithDataSourceMethodTests",
						Attributes = [],
					}),
					Name = "DataSourceClassCombinedWithDataSourceMethod",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "i",
							Attributes = [],
						},
					],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				int classArg = global::TUnit.TestProject.CommonTestData.One();

				int methodArg = global::TUnit.TestProject.CommonTestData.One();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
				new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
					TestClassArguments = [classArg],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 10,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
					MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 10,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
					Name = "DataSourceClassCombinedWithDataSourceMethodTest",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
						new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "i",
							Attributes = [],
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "DataSourceClassCombinedWithDataSourceMethodTests",
							Attributes = [],
						}),
						Name = "DataSourceClassCombinedWithDataSourceMethod",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "i",
								Attributes = [],
							},
						],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					int classArg = global::TUnit.TestProject.CommonTestData.Two();

					int methodArg = global::TUnit.TestProject.CommonTestData.One();
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
					new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
						TestClassArguments = [classArg],
						TestMethodArguments = [methodArg],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 10,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
						MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 10,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
						Name = "DataSourceClassCombinedWithDataSourceMethodTest",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
							new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "i",
								Attributes = [],
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "DataSourceClassCombinedWithDataSourceMethodTests",
								Attributes = [],
							}),
							Name = "DataSourceClassCombinedWithDataSourceMethod",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
							],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<int>
								{
									Name = "i",
									Attributes = [],
								},
							],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						int classArg = global::TUnit.TestProject.CommonTestData.Three();

						int methodArg = global::TUnit.TestProject.CommonTestData.One();
						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
						new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
						, sessionId, testBuilderContext);

						var resettableClassFactory = resettableClassFactoryDelegate();

						nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
							TestClassArguments = [classArg],
							TestMethodArguments = [methodArg],
							TestClassProperties = [],
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
							TestFilePath = @"",
							TestLineNumber = 10,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
							MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 10,
						});
					}
					return nodes;
				}
				private global::System.Collections.Generic.List<TestMetadata> Tests3(string sessionId)
				{
					global::System.Collections.Generic.List<TestMetadata> nodes = [];
					var classDataIndex = 0;
					var testMethodDataIndex = 0;
					try
					{
						var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
						{
							Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
							Name = "DataSourceClassCombinedWithDataSourceMethodTest",
							GenericTypeCount = 0,
							ReturnType = typeof(void),
							Attributes = 
							[
								new global::TUnit.Core.TestAttribute(),
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
								new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
							],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<int>
								{
									Name = "i",
									Attributes = [],
								},
							],
							Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
							{
								Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
								Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
								{
									Name = "DataSourceClassCombinedWithDataSourceMethodTests",
									Attributes = [],
								}),
								Name = "DataSourceClassCombinedWithDataSourceMethod",
								Namespace = "TUnit.TestProject",
								Attributes = 
								[
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
								],
								Parameters = 
								[
									new global::TUnit.Core.SourceGeneratedParameterInformation<int>
									{
										Name = "i",
										Attributes = [],
									},
								],
								Properties = [],
							}),
};

							var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
							var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
							int classArg = global::TUnit.TestProject.CommonTestData.One();

							int methodArg = global::TUnit.TestProject.CommonTestData.Two();
							var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
							new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
							, sessionId, testBuilderContext);

							var resettableClassFactory = resettableClassFactoryDelegate();

							nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
								TestClassArguments = [classArg],
								TestMethodArguments = [methodArg],
								TestClassProperties = [],
								CurrentRepeatAttempt = 0,
								RepeatLimit = 0,
								ResettableClassFactory = resettableClassFactory,
								TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
								TestFilePath = @"",
								TestLineNumber = 10,
								TestMethod = testInformation,
								TestBuilderContext = testBuilderContext,
							});
							resettableClassFactory = resettableClassFactoryDelegate();
							testBuilderContext = new();
							testBuilderContextAccessor.Current = testBuilderContext;
						}
						catch (global::System.Exception exception)
						{
							nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
								MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
								Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
								TestFilePath = @"",
								TestLineNumber = 10,
							});
						}
						return nodes;
					}
					private global::System.Collections.Generic.List<TestMetadata> Tests4(string sessionId)
					{
						global::System.Collections.Generic.List<TestMetadata> nodes = [];
						var classDataIndex = 0;
						var testMethodDataIndex = 0;
						try
						{
							var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
							{
								Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
								Name = "DataSourceClassCombinedWithDataSourceMethodTest",
								GenericTypeCount = 0,
								ReturnType = typeof(void),
								Attributes = 
								[
									new global::TUnit.Core.TestAttribute(),
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
									new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
								],
								Parameters = 
								[
									new global::TUnit.Core.SourceGeneratedParameterInformation<int>
									{
										Name = "i",
										Attributes = [],
									},
								],
								Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
								{
									Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
									Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
									{
										Name = "DataSourceClassCombinedWithDataSourceMethodTests",
										Attributes = [],
									}),
									Name = "DataSourceClassCombinedWithDataSourceMethod",
									Namespace = "TUnit.TestProject",
									Attributes = 
									[
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
									],
									Parameters = 
									[
										new global::TUnit.Core.SourceGeneratedParameterInformation<int>
										{
											Name = "i",
											Attributes = [],
										},
									],
									Properties = [],
								}),
};

								var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
								var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
								int classArg = global::TUnit.TestProject.CommonTestData.Two();

								int methodArg = global::TUnit.TestProject.CommonTestData.Two();
								var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
								new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
								, sessionId, testBuilderContext);

								var resettableClassFactory = resettableClassFactoryDelegate();

								nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
								{
									TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
									TestClassArguments = [classArg],
									TestMethodArguments = [methodArg],
									TestClassProperties = [],
									CurrentRepeatAttempt = 0,
									RepeatLimit = 0,
									ResettableClassFactory = resettableClassFactory,
									TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
									TestFilePath = @"",
									TestLineNumber = 10,
									TestMethod = testInformation,
									TestBuilderContext = testBuilderContext,
								});
								resettableClassFactory = resettableClassFactoryDelegate();
								testBuilderContext = new();
								testBuilderContextAccessor.Current = testBuilderContext;
							}
							catch (global::System.Exception exception)
							{
								nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
								{
									TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
									MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
									Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
									TestFilePath = @"",
									TestLineNumber = 10,
								});
							}
							return nodes;
						}
						private global::System.Collections.Generic.List<TestMetadata> Tests5(string sessionId)
						{
							global::System.Collections.Generic.List<TestMetadata> nodes = [];
							var classDataIndex = 0;
							var testMethodDataIndex = 0;
							try
							{
								var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
								{
									Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
									Name = "DataSourceClassCombinedWithDataSourceMethodTest",
									GenericTypeCount = 0,
									ReturnType = typeof(void),
									Attributes = 
									[
										new global::TUnit.Core.TestAttribute(),
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
										new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
									],
									Parameters = 
									[
										new global::TUnit.Core.SourceGeneratedParameterInformation<int>
										{
											Name = "i",
											Attributes = [],
										},
									],
									Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
									{
										Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
										Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
										{
											Name = "DataSourceClassCombinedWithDataSourceMethodTests",
											Attributes = [],
										}),
										Name = "DataSourceClassCombinedWithDataSourceMethod",
										Namespace = "TUnit.TestProject",
										Attributes = 
										[
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
										],
										Parameters = 
										[
											new global::TUnit.Core.SourceGeneratedParameterInformation<int>
											{
												Name = "i",
												Attributes = [],
											},
										],
										Properties = [],
									}),
};

									var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
									var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
									int classArg = global::TUnit.TestProject.CommonTestData.Three();

									int methodArg = global::TUnit.TestProject.CommonTestData.Two();
									var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
									new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
									, sessionId, testBuilderContext);

									var resettableClassFactory = resettableClassFactoryDelegate();

									nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
									{
										TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
										TestClassArguments = [classArg],
										TestMethodArguments = [methodArg],
										TestClassProperties = [],
										CurrentRepeatAttempt = 0,
										RepeatLimit = 0,
										ResettableClassFactory = resettableClassFactory,
										TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
										TestFilePath = @"",
										TestLineNumber = 10,
										TestMethod = testInformation,
										TestBuilderContext = testBuilderContext,
									});
									resettableClassFactory = resettableClassFactoryDelegate();
									testBuilderContext = new();
									testBuilderContextAccessor.Current = testBuilderContext;
								}
								catch (global::System.Exception exception)
								{
									nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
									{
										TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
										MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
										Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
										TestFilePath = @"",
										TestLineNumber = 10,
									});
								}
								return nodes;
							}
							private global::System.Collections.Generic.List<TestMetadata> Tests6(string sessionId)
							{
								global::System.Collections.Generic.List<TestMetadata> nodes = [];
								var classDataIndex = 0;
								var testMethodDataIndex = 0;
								try
								{
									var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
									{
										Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
										Name = "DataSourceClassCombinedWithDataSourceMethodTest",
										GenericTypeCount = 0,
										ReturnType = typeof(void),
										Attributes = 
										[
											new global::TUnit.Core.TestAttribute(),
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
											new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
										],
										Parameters = 
										[
											new global::TUnit.Core.SourceGeneratedParameterInformation<int>
											{
												Name = "i",
												Attributes = [],
											},
										],
										Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
										{
											Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
											Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
											{
												Name = "DataSourceClassCombinedWithDataSourceMethodTests",
												Attributes = [],
											}),
											Name = "DataSourceClassCombinedWithDataSourceMethod",
											Namespace = "TUnit.TestProject",
											Attributes = 
											[
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
											],
											Parameters = 
											[
												new global::TUnit.Core.SourceGeneratedParameterInformation<int>
												{
													Name = "i",
													Attributes = [],
												},
											],
											Properties = [],
										}),
};

										var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
										var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
										int classArg = global::TUnit.TestProject.CommonTestData.One();

										int methodArg = global::TUnit.TestProject.CommonTestData.Three();
										var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
										new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
										, sessionId, testBuilderContext);

										var resettableClassFactory = resettableClassFactoryDelegate();

										nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
										{
											TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
											TestClassArguments = [classArg],
											TestMethodArguments = [methodArg],
											TestClassProperties = [],
											CurrentRepeatAttempt = 0,
											RepeatLimit = 0,
											ResettableClassFactory = resettableClassFactory,
											TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
											TestFilePath = @"",
											TestLineNumber = 10,
											TestMethod = testInformation,
											TestBuilderContext = testBuilderContext,
										});
										resettableClassFactory = resettableClassFactoryDelegate();
										testBuilderContext = new();
										testBuilderContextAccessor.Current = testBuilderContext;
									}
									catch (global::System.Exception exception)
									{
										nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
										{
											TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
											MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
											Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
											TestFilePath = @"",
											TestLineNumber = 10,
										});
									}
									return nodes;
								}
								private global::System.Collections.Generic.List<TestMetadata> Tests7(string sessionId)
								{
									global::System.Collections.Generic.List<TestMetadata> nodes = [];
									var classDataIndex = 0;
									var testMethodDataIndex = 0;
									try
									{
										var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
										{
											Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
											Name = "DataSourceClassCombinedWithDataSourceMethodTest",
											GenericTypeCount = 0,
											ReturnType = typeof(void),
											Attributes = 
											[
												new global::TUnit.Core.TestAttribute(),
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
												new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
											],
											Parameters = 
											[
												new global::TUnit.Core.SourceGeneratedParameterInformation<int>
												{
													Name = "i",
													Attributes = [],
												},
											],
											Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
											{
												Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
												Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
												{
													Name = "DataSourceClassCombinedWithDataSourceMethodTests",
													Attributes = [],
												}),
												Name = "DataSourceClassCombinedWithDataSourceMethod",
												Namespace = "TUnit.TestProject",
												Attributes = 
												[
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
												],
												Parameters = 
												[
													new global::TUnit.Core.SourceGeneratedParameterInformation<int>
													{
														Name = "i",
														Attributes = [],
													},
												],
												Properties = [],
											}),
};

											var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
											var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
											int classArg = global::TUnit.TestProject.CommonTestData.Two();

											int methodArg = global::TUnit.TestProject.CommonTestData.Three();
											var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
											new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
											, sessionId, testBuilderContext);

											var resettableClassFactory = resettableClassFactoryDelegate();

											nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
											{
												TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
												TestClassArguments = [classArg],
												TestMethodArguments = [methodArg],
												TestClassProperties = [],
												CurrentRepeatAttempt = 0,
												RepeatLimit = 0,
												ResettableClassFactory = resettableClassFactory,
												TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
												TestFilePath = @"",
												TestLineNumber = 10,
												TestMethod = testInformation,
												TestBuilderContext = testBuilderContext,
											});
											resettableClassFactory = resettableClassFactoryDelegate();
											testBuilderContext = new();
											testBuilderContextAccessor.Current = testBuilderContext;
										}
										catch (global::System.Exception exception)
										{
											nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
											{
												TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
												MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
												Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
												TestFilePath = @"",
												TestLineNumber = 10,
											});
										}
										return nodes;
									}
									private global::System.Collections.Generic.List<TestMetadata> Tests8(string sessionId)
									{
										global::System.Collections.Generic.List<TestMetadata> nodes = [];
										var classDataIndex = 0;
										var testMethodDataIndex = 0;
										try
										{
											var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
											{
												Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
												Name = "DataSourceClassCombinedWithDataSourceMethodTest",
												GenericTypeCount = 0,
												ReturnType = typeof(void),
												Attributes = 
												[
													new global::TUnit.Core.TestAttribute(),
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
													new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
												],
												Parameters = 
												[
													new global::TUnit.Core.SourceGeneratedParameterInformation<int>
													{
														Name = "i",
														Attributes = [],
													},
												],
												Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod", () => new global::TUnit.Core.SourceGeneratedClassInformation
												{
													Type = typeof(global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod),
													Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataSourceClassCombinedWithDataSourceMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
													{
														Name = "DataSourceClassCombinedWithDataSourceMethodTests",
														Attributes = [],
													}),
													Name = "DataSourceClassCombinedWithDataSourceMethod",
													Namespace = "TUnit.TestProject",
													Attributes = 
													[
														new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "One"),
														new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Two"),
														new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.CommonTestData), "Three")
													],
													Parameters = 
													[
														new global::TUnit.Core.SourceGeneratedParameterInformation<int>
														{
															Name = "i",
															Attributes = [],
														},
													],
													Properties = [],
												}),
};

												var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
												var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
												int classArg = global::TUnit.TestProject.CommonTestData.Three();

												int methodArg = global::TUnit.TestProject.CommonTestData.Three();
												var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>(() => 
												new global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(classArg)
												, sessionId, testBuilderContext);

												var resettableClassFactory = resettableClassFactoryDelegate();

												nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
												{
													TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
													TestClassArguments = [classArg],
													TestMethodArguments = [methodArg],
													TestClassProperties = [],
													CurrentRepeatAttempt = 0,
													RepeatLimit = 0,
													ResettableClassFactory = resettableClassFactory,
													TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceClassCombinedWithDataSourceMethodTest(methodArg)),
													TestFilePath = @"",
													TestLineNumber = 10,
													TestMethod = testInformation,
													TestBuilderContext = testBuilderContext,
												});
												resettableClassFactory = resettableClassFactoryDelegate();
												testBuilderContext = new();
												testBuilderContextAccessor.Current = testBuilderContext;
											}
											catch (global::System.Exception exception)
											{
												nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod>
												{
													TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS2:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.DataSourceClassCombinedWithDataSourceMethod(int).DataSourceClassCombinedWithDataSourceMethodTest(int):0",
													MethodName = $"DataSourceClassCombinedWithDataSourceMethodTest",
													Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceClassCombinedWithDataSourceMethod.DataSourceClassCombinedWithDataSourceMethodTest failed to initialize", exception),
													TestFilePath = @"",
													TestLineNumber = 10,
												});
											}
											return nodes;
										}
									}

]