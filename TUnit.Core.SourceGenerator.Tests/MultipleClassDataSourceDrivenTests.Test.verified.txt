// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MultipleClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MultipleClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
				Name = "Test1",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test1",
						TargetType = typeof(TUnit.TestProject.MultipleClassDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							17,
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MultipleClassDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MultipleClassDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MultipleClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MultipleClassDataSourceDrivenTests",
							}

						],
					}),
					Name = "MultipleClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MultipleClassDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MultipleClassDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
						{
							Name = "inject1",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
						{
							Name = "inject2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
						{
							Name = "inject3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
						{
							Name = "inject4",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
						{
							Name = "inject5",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
								{
									Name = "inject1",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
								{
									Name = "inject2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
								{
									Name = "inject3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
								{
									Name = "inject4",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
								{
									Name = "inject5",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test1",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MultipleClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
					{
						Name = "inject1",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
					{
						Name = "inject2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
					{
						Name = "inject3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
					{
						Name = "inject4",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
					{
						Name = "inject5",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
			{
				Shared = [global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None],
			};


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = await classArgGeneratedDataAccessor();
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1 classArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>(classArgGeneratedData[0]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2 classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>(classArgGeneratedData[1]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3 classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>(classArgGeneratedData[2]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4 classArg3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>(classArgGeneratedData[3]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5 classArg4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>(classArgGeneratedData[4]);

				classInstanceArguments = [classArg, classArg1, classArg2, classArg3, classArg4];

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.MultipleClassDataSourceDrivenTests(classArg, classArg1, classArg2, classArg3, classArg4), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>:{classDataIndex}:CL-GAC0:TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5).Test1:0",
					MethodMetadata = testInformation,
					RepeatCount = 0,
					TestFilePath = @"",
					TestLineNumber = 17,
					TestClassFactory = () => resettableClassFactory.Value,
					TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test1()),
					ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2, classArg3, classArg4 },
					MethodArgumentsProvider = () => new object?[] {  },
					PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
					{
					}
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "Test1",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation
				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>:{classDataIndex}:CL-GAC0:TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5).Test1:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MultipleClassDataSourceDrivenTests.Test1 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassName = "MultipleClassDataSourceDrivenTests",
				TestMethodName = "Test1"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MultipleClassDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MultipleClassDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
				Name = "Test2",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test2",
						TargetType = typeof(TUnit.TestProject.MultipleClassDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							23,
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MultipleClassDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MultipleClassDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MultipleClassDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MultipleClassDataSourceDrivenTests",
							}

						],
					}),
					Name = "MultipleClassDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MultipleClassDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MultipleClassDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
						{
							Name = "inject1",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
						{
							Name = "inject2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
						{
							Name = "inject3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
						{
							Name = "inject4",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
						{
							Name = "inject5",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
								{
									Name = "inject1",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
								{
									Name = "inject2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
								{
									Name = "inject3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
								{
									Name = "inject4",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
								{
									Name = "inject5",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MultipleClassDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>
					{
						Name = "inject1",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>
					{
						Name = "inject2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>
					{
						Name = "inject3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>
					{
						Name = "inject4",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>
					{
						Name = "inject5",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
			{
				Shared = [global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None, global::TUnit.Core.SharedType.None],
			};


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = await classArgGeneratedDataAccessor();
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1 classArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>(classArgGeneratedData[0]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2 classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>(classArgGeneratedData[1]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3 classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>(classArgGeneratedData[2]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4 classArg3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>(classArgGeneratedData[3]);
				global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5 classArg4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>(classArgGeneratedData[4]);

				classInstanceArguments = [classArg, classArg1, classArg2, classArg3, classArg4];

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>(() => new global::TUnit.TestProject.MultipleClassDataSourceDrivenTests(classArg, classArg1, classArg2, classArg3, classArg4), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>:{classDataIndex}:CL-GAC0:TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5).Test2:0",
					MethodMetadata = testInformation,
					RepeatCount = 0,
					TestFilePath = @"",
					TestLineNumber = 23,
					TestClassFactory = () => resettableClassFactory.Value,
					TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2()),
					ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2, classArg3, classArg4 },
					MethodArgumentsProvider = () => new object?[] {  },
					PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
					{
					}
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "Test2",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation
				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>:{classDataIndex}:CL-GAC0:TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4,TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5).Test2:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MultipleClassDataSourceDrivenTests.Test2 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 23,
				TestClassName = "MultipleClassDataSourceDrivenTests",
				TestMethodName = "Test2"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}