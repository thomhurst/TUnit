// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class MultipleClassDataSourceDrivenTests_Test1_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>
        {
            TestName = "Test1",
            TestClassType = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
            TestMethodName = "Test1",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
{Shared = new global::TUnit.Core.SharedType[]{global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None},}
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
{Shared = new global::TUnit.Core.SharedType[]{global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None},},
            },
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 17,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests, TestsBase`1"),
                Name = "Test1",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MultipleClassDataSourceDrivenTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests, TestsBase`1"),
                        Name = "MultipleClassDataSourceDrivenTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = new global::TUnit.Core.ParameterMetadata[]
                        {
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1))
                            {
                                Name = "inject1",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[0]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2))
                            {
                                Name = "inject2",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[1]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3))
                            {
                                Name = "inject3",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[2]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4))
                            {
                                Name = "inject4",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[3]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5))
                            {
                                Name = "inject5",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[4]
                            }
                        },
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>(args[2]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>(args[3]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>(args[4]));
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MultipleClassDataSourceDrivenTests)instance;
                typedInstance.Test1();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                instance.Test1();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class MultipleClassDataSourceDrivenTests_Test1_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests), new MultipleClassDataSourceDrivenTests_Test1_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class MultipleClassDataSourceDrivenTests_Test2_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests>
        {
            TestName = "Test2",
            TestClassType = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
            TestMethodName = "Test2",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
{Shared = new global::TUnit.Core.SharedType[]{global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None},}
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>()
{Shared = new global::TUnit.Core.SharedType[]{global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None,global::TUnit.Core.SharedType.None},},
            },
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 23,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests, TestsBase`1"),
                Name = "Test2",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MultipleClassDataSourceDrivenTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests, TestsBase`1"),
                        Name = "MultipleClassDataSourceDrivenTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = new global::TUnit.Core.ParameterMetadata[]
                        {
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1))
                            {
                                Name = "inject1",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[0]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2))
                            {
                                Name = "inject2",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[1]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3))
                            {
                                Name = "inject3",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[2]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4))
                            {
                                Name = "inject4",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[3]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5))
                            {
                                Name = "inject5",
                                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5, TestsBase`1"),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4), typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5) })!.GetParameters()[4]
                            }
                        },
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.MultipleClassDataSourceDrivenTests(TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject1>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject2>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject3>(args[2]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject4>(args[3]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MultipleClassDataSourceDrivenTests.Inject5>(args[4]));
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MultipleClassDataSourceDrivenTests)instance;
                typedInstance.Test2();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                instance.Test2();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class MultipleClassDataSourceDrivenTests_Test2_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MultipleClassDataSourceDrivenTests), new MultipleClassDataSourceDrivenTests_Test2_TestSource_GUID());
    }
}
