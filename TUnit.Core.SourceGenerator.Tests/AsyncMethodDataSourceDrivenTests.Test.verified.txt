// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_SingleValue_e1a74e13118f412fa016792e48905dc0
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_SingleValue_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_SingleValue",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_SingleValue", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 8, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethod"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_SingleValue", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "AsyncDataMethod", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 8,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_SingleValue",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_SingleValue_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "AsyncMethodDataSource_SingleValue_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 8,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_SingleValue [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Tuples_741572ea660d4074be3681f268e55a42
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Tuples_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_Tuples",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Tuples", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 15, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithTuples"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Tuples", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "AsyncDataMethodWithTuples", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value1",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<string>{Name = "value2",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 15,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Tuples",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Tuples_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "AsyncMethodDataSource_Tuples_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 15,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Tuples [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Enumerable_b3830bb482cf4edb843854bc0891af6d
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Enumerable_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_Enumerable",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Enumerable", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 23, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("AsyncEnumerableDataMethod"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Enumerable", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "AsyncEnumerableDataMethod", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 23,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Enumerable",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Enumerable_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "AsyncMethodDataSource_Enumerable_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 23,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Enumerable [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Func_21b79f5bc65347c2be5e07597f4abe93
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Func_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_Func",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Func", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 30, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("AsyncFuncDataMethod"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_Func", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "AsyncFuncDataMethod", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 30,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Func",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_Func_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "AsyncMethodDataSource_Func_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 30,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_Func [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_WithArguments_c20e3eb3ee3a4d0b8b9e28efb2e6c0c5
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_WithArguments_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_WithArguments",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_WithArguments", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 37, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithArgs")
{Arguments = [5],}, TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_WithArguments", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "AsyncDataMethodWithArgs", }, NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>() { ["Arguments"] = null, }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 37,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_WithArguments",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_WithArguments_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "AsyncMethodDataSource_WithArguments_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 37,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "AsyncMethodDataSource_WithArguments [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_ExternalClass_ec69bcfa515d4e3e99ce1441ef4afdae
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testDescriptors = new System.Collections.Generic.List<ITestDescriptor>();
            var staticDef_0 = new StaticTestDefinition
            {
                TestId = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_ExternalClass_0_{{TestIndex}}",
                DisplayName = "AsyncMethodDataSource_ExternalClass",
                TestFilePath = @"",
                TestLineNumber = 44,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null,
                RepeatCount = 1,
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestMethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "AsyncMethodDataSource_ExternalClass",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_ExternalClass", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 44, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.AsyncExternalDataSource), "GetData"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "AsyncMethodDataSource_ExternalClass", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { typeof(global::TUnit.TestProject.AsyncExternalDataSource), "GetData", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<string>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                ClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                MethodInvoker = async (instance, args, cancellationToken) => await ((TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance).AsyncMethodDataSource_ExternalClass(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0])),
                PropertyValuesProvider = () => new[] { new System.Collections.Generic.Dictionary<string, object?>() },
                ClassDataProvider = new TUnit.Core.EmptyDataProvider(),
                MethodDataProvider = new TUnit.Core.EmptyDataProvider()
            };
            testDescriptors.Add(staticDef_0);
            TestSourceRegistrar.RegisterTests(testDescriptors);
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testDescriptors = new System.Collections.Generic.List<ITestDescriptor>();
            var failureDef = new StaticTestDefinition
            {
                TestId = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncMethodDataSource_ExternalClass_RuntimeFailure_{{TestIndex}}",
                DisplayName = "AsyncMethodDataSource_ExternalClass [RUNTIME INITIALIZATION FAILED]",
                TestFilePath = @"",
                TestLineNumber = 44,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null,
                RepeatCount = 1,
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestMethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_ExternalClass_RuntimeFailure",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Attributes = new global::TUnit.Core.AttributeMetadata[] { },
Parameters = new global::TUnit.Core.ParameterMetadata[] { },
Class = new global::TUnit.Core.ClassMetadata
{
Name = "AsyncMethodDataSourceDrivenTests",
Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Namespace = "TUnit.TestProject",
Attributes = new global::TUnit.Core.AttributeMetadata[] { },
Properties = new global::TUnit.Core.PropertyMetadata[] { },
Parameters = new global::TUnit.Core.ParameterMetadata[] { },
Parent = null,
Assembly = new global::TUnit.Core.AssemblyMetadata
{
    Name = "TestsBase`1",
    Attributes = new global::TUnit.Core.AttributeMetadata[] { }
}
},
ReflectionInformation = null
},
                ClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodInvoker = async (instance, args, cancellationToken) => { await Task.CompletedTask; throw new InvalidOperationException(errorMessage); },
                PropertyValuesProvider = () => new[] { new System.Collections.Generic.Dictionary<string, object?>() },
                ClassDataProvider = new TUnit.Core.EmptyDataProvider(),
                MethodDataProvider = new TUnit.Core.EmptyDataProvider()
            };
            testDescriptors.Add(failureDef);
            TestSourceRegistrar.RegisterTests(testDescriptors);
        }
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_AsyncMethodDataSourceDrivenTests_ValueTaskMethodDataSource_SingleValue_c25778dd0b644b46bd0fa45d20586918
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.ValueTaskMethodDataSource_SingleValue_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Name = "ValueTaskMethodDataSource_SingleValue",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "ValueTaskMethodDataSource_SingleValue", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "", 51, }, },
new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.MethodDataSourceAttribute("ValueTaskDataMethod"), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "ValueTaskMethodDataSource_SingleValue", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { "ValueTaskDataMethod", }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<int>{Name = "value",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),Attributes = [],ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "AsyncMethodDataSourceDrivenTests",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "AsyncMethodDataSourceDrivenTests", TargetType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [],Properties = [],}),},
                TestFilePath = @"",
                TestLineNumber = 51,
                TestClassFactory = args => new TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "ValueTaskMethodDataSource_SingleValue",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.AsyncMethodDataSourceDrivenTests.ValueTaskMethodDataSource_SingleValue_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                TestClassType = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                    Name = "ValueTaskMethodDataSource_SingleValue_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "AsyncMethodDataSourceDrivenTests",
                        Type = typeof(TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests"),
                        Namespace = "TUnit.TestProject",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 51,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "ValueTaskMethodDataSource_SingleValue [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}
