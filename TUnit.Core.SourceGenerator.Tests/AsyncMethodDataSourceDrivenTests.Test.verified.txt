// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_SingleValue_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_SingleValue",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_SingleValue",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethod"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncDataMethod();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_SingleValue",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_SingleValue", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.AsyncMethodDataSource_SingleValue(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.AsyncMethodDataSource_SingleValue(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_SingleValue_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_SingleValue_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Tuples_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_Tuples",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_Tuples",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithTuples"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithTuples")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncDataMethodWithTuples();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(string),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "string",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_Tuples",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value1",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_Tuples", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "value2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_Tuples", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.AsyncMethodDataSource_Tuples(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.AsyncMethodDataSource_Tuples(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Tuples_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Tuples_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Enumerable_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_Enumerable",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_Enumerable",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncEnumerableDataMethod"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncEnumerableDataMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncEnumerableDataMethod();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_Enumerable",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_Enumerable", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.AsyncMethodDataSource_Enumerable(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.AsyncMethodDataSource_Enumerable(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Enumerable_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Enumerable_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Func_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_Func",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_Func",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncFuncDataMethod"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncFuncDataMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncFuncDataMethod();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_Func",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_Func", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.AsyncMethodDataSource_Func(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.AsyncMethodDataSource_Func(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Func_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_Func_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_WithArguments_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_WithArguments",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_WithArguments",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithArgs")
{Arguments = [5],},
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AsyncDataMethodWithArgs")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.AsyncDataMethodWithArgs();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_WithArguments",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_WithArguments", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.AsyncMethodDataSource_WithArguments(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.AsyncMethodDataSource_WithArguments(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_WithArguments_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_WithArguments_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_ExternalClass_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "AsyncMethodDataSource_ExternalClass",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "AsyncMethodDataSource_ExternalClass",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.AsyncExternalDataSource), "GetData"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute(typeof(global::TUnit.TestProject.AsyncExternalDataSource), "GetData")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncExternalDataSource.GetData();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(string),
            },
            TestMethodParameterTypes = new string[]
            {
                "string",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSource_ExternalClass",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("AsyncMethodDataSource_ExternalClass", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.AsyncMethodDataSource_ExternalClass(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.AsyncMethodDataSource_ExternalClass(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_ExternalClass_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_AsyncMethodDataSource_ExternalClass_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class AsyncMethodDataSourceDrivenTests_ValueTaskMethodDataSource_SingleValue_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests>
        {
            TestName = "ValueTaskMethodDataSource_SingleValue",
            TestClassType = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
            TestMethodName = "ValueTaskMethodDataSource_SingleValue",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("ValueTaskDataMethod"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("ValueTaskDataMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests.ValueTaskDataMethod();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "ValueTaskMethodDataSource_SingleValue",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests).GetMethod("ValueTaskMethodDataSource_SingleValue", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.AsyncMethodDataSourceDrivenTests, TestsBase`1"),
Name = "AsyncMethodDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.ValueTaskMethodDataSource_SingleValue(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.ValueTaskMethodDataSource_SingleValue(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class AsyncMethodDataSourceDrivenTests_ValueTaskMethodDataSource_SingleValue_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.AsyncMethodDataSourceDrivenTests), new AsyncMethodDataSourceDrivenTests_ValueTaskMethodDataSource_SingleValue_TestSource_GUID());
    }
}
