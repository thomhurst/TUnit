[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_STAThreadTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_STAThreadTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.STAThreadTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.STAThreadTests),
     Name = "BeforeTest",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
}, 
new global::TUnit.Core.Executors.HookExecutorAttribute<global::TUnit.Core.STAThreadExecutor>()
{
    
}
     ],  
     Parameters = [],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.STAThreadTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.STAThreadTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("STAThreadHooksTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "STAThreadHooksTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "STAThreadTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Interoperability", "CA1416:Validate platform compatibility")
{
    
}
     ],  
     Parameters = [],
     Properties = [],
}),
},
				Body = (classInstance, context, cancellationToken) => classInstance.BeforeTest(),
				HookExecutor = new global::TUnit.Core.STAThreadExecutor(),
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
}, new global::TUnit.Core.Executors.HookExecutorAttribute<global::TUnit.Core.STAThreadExecutor>()
{
    
} ],
				ClassAttributes = [ new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Interoperability", "CA1416:Validate platform compatibility")
{
    
} ],
				AssemblyAttributes = [  ],
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_STAThreadTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_STAThreadTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.STAThreadTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.STAThreadTests),
     Name = "AfterTest",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, 
new global::TUnit.Core.Executors.HookExecutorAttribute<global::TUnit.Core.STAThreadExecutor>()
{
    
}
     ],  
     Parameters = [],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.STAThreadTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.STAThreadTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("STAThreadHooksTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "STAThreadHooksTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "STAThreadTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Interoperability", "CA1416:Validate platform compatibility")
{
    
}
     ],  
     Parameters = [],
     Properties = [],
}),
},
				Body = (classInstance, context, cancellationToken) => classInstance.AfterTest(),
				HookExecutor = new global::TUnit.Core.STAThreadExecutor(),
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, new global::TUnit.Core.Executors.HookExecutorAttribute<global::TUnit.Core.STAThreadExecutor>()
{
    
} ],
				ClassAttributes = [ new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Interoperability", "CA1416:Validate platform compatibility")
{
    
} ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

]