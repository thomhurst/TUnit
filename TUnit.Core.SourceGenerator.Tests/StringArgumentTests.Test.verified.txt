// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class StringArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new StringArgumentTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		var results = new global::System.Collections.Generic.List<TestMetadata>();
		results.AddRange(await Tests0(sessionId));
		results.AddRange(await Tests1(sessionId));
		results.AddRange(await Tests2(sessionId));
		results.AddRange(await Tests3(sessionId));
		results.AddRange(await Tests4(sessionId));
		results.AddRange(await Tests5(sessionId));
		results.AddRange(await Tests6(sessionId));
		results.AddRange(await Tests7(sessionId));
		return results;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = @"\";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = @"\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Normal",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = """
        Hello
        World
        """;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Normal",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				MethodName = $"Normal",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Normal failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
			});
		}
		return nodes;
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class StringArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new StringArgumentTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		var results = new global::System.Collections.Generic.List<TestMetadata>();
		results.AddRange(await Tests0(sessionId));
		results.AddRange(await Tests1(sessionId));
		results.AddRange(await Tests2(sessionId));
		results.AddRange(await Tests3(sessionId));
		results.AddRange(await Tests4(sessionId));
		results.AddRange(await Tests5(sessionId));
		results.AddRange(await Tests6(sessionId));
		results.AddRange(await Tests7(sessionId));
		return results;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = @"\";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = @"\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "\\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.StringArgumentTests),
				Name = "Nullable",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.ArgumentsAttribute(""),

					new global::TUnit.Core.ArgumentsAttribute(@"\"),

					new global::TUnit.Core.ArgumentsAttribute(@"\t"),

					new global::TUnit.Core.ArgumentsAttribute("\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\t"),

					new global::TUnit.Core.ArgumentsAttribute("\\\\t"),

					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<string>
					{
						Name = "s",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.StringArgumentTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "StringArgumentTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "StringArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.StringArgumentTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = null;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => new global::TUnit.TestProject.StringArgumentTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Nullable",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				MethodName = $"Nullable",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("StringArgumentTests.Nullable failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
			});
		}
		return nodes;
	}

}