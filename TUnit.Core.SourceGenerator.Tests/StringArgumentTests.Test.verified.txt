[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class StringArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new StringArgumentTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
			..Tests6(sessionId),
			..Tests7(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = @"\";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = @"\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Normal",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(        """
        Hello
        World
        """
)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = """
        Hello
        World
        """;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Normal(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Normal(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Normal",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class StringArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new StringArgumentTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
			..Tests6(sessionId),
			..Tests7(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = @"\";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = @"\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS3:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS4:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS5:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = "\\\\t";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS6:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Name = "Nullable",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(@"\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute("\\\\t")
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute(null)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "s",
        Attributes = 
        [
            
        ]
    }],
     Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.StringArgumentTests),
     Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("StringArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "StringArgumentTests",
     Attributes = 
     [
         
     ],  
}),
     Name = "StringArgumentTests",
     Namespace = "TUnit.TestProject",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
}),
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = null;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.StringArgumentTests>(() => 
			new global::TUnit.TestProject.StringArgumentTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.StringArgumentTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Nullable(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS7:TUnit.TestProject.StringArgumentTests.Nullable(string):0",
				TestClass = typeof(global::TUnit.TestProject.StringArgumentTests),
				ReturnType = typeof(void),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "Nullable",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]