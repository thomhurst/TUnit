// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base1 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base1();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
					Name = "BeforeAll1",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAll1",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base1),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								5,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base1", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base1",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.Base1.BeforeAll1()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 5,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base1 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.Base1),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
					Name = "BeforeEach1",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeEach1",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base1),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								11,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base1", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base1",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base1),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.Base1)classInstance).BeforeEach1()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base2 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base2();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
					Name = "BeforeAll2",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAll2",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base2),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								20,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base2", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base2",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.Base2.BeforeAll2()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 20,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.Base2),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
					Name = "BeforeEach2",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeEach2",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base2),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								26,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base2", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base2",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base2),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.Base2)classInstance).BeforeEach2()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base3 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base3();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
					Name = "BeforeAll3",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAll3",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base3),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								35,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base3", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base3",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.Base3.BeforeAll3()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 35,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_Base3 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.Base3),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
					Name = "BeforeEach3",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeEach3",
							TargetType = typeof(TUnit.TestProject.BeforeTests.Base3),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								41,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.Base3", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "Base3",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.Base3),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.Base3)classInstance).BeforeEach3()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "BeforeAllSetUp",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAllSetUp",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								50,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.SetupTests.BeforeAllSetUp()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 50,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "BeforeAllSetUpWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAllSetUpWithContext",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								56,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.Core.ClassHookContext>
						{
							Name = "context",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.SetupTests.BeforeAllSetUpWithContext(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 56,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "BeforeAllSetUp",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAllSetUp",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								62,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.SetupTests.BeforeAllSetUp(cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 62,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeClassHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "BeforeAllSetUpWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Class),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeAllSetUpWithContext",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(1),
								"",
								68,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.Core.ClassHookContext>
						{
							Name = "context",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.SetupTests.BeforeAllSetUpWithContext(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 68,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "Setup",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "Setup",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								74,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.SetupTests)classInstance).Setup()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "Setup",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "Setup",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								80,
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.TimeoutAttribute(30_000),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "Setup",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								30000,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.SetupTests)classInstance).Setup(cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "SetupWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "SetupWithContext",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								86,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.Core.TestContext>
						{
							Name = "testContext",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.SetupTests)classInstance).SetupWithContext(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_SetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_SetupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
					Name = "SetupWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "SetupWithContext",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								92,
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.TimeoutAttribute(30_000),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "SetupWithContext",
							TargetType = typeof(TUnit.TestProject.BeforeTests.SetupTests),
							ConstructorArguments = new object?[]
							{
								30000,
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.Core.TestContext>
						{
							Name = "testContext",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.BeforeTests.SetupTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("BeforeAllTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "BeforeAllTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "BeforeAllTests",
								}

							],
						}),
						Name = "SetupTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.BeforeTests.SetupTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.SetupTests)classInstance).SetupWithContext(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}