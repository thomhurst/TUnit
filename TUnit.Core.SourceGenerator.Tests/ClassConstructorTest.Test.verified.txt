// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class ClassConstructorTest_Test_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ClassConstructorTest>
        {
            TestName = "Test",
            TestClassType = typeof(global::TUnit.TestProject.ClassConstructorTest),
            TestMethodName = "Test",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ClassConstructorAttribute<global::TUnit.TestProject.DependencyInjectionClassConstructor>()
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.ClassConstructorTest),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),
Name = "Test",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ClassConstructorTest", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.ClassConstructorTest),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),
Name = "ClassConstructorTest",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.DummyReferenceTypeClass))
{
    Name = "dummyReferenceTypeClass",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DummyReferenceTypeClass, TestsBase`1"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassConstructorTest).GetConstructor(new global::System.Type[] { typeof(global::TUnit.TestProject.DummyReferenceTypeClass) })!.GetParameters()[0]
},
},
Properties = new global::TUnit.Core.PropertyMetadata[]
{
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassConstructorTest).GetProperty("DummyReferenceTypeClass"),
    Type = typeof(global::TUnit.TestProject.DummyReferenceTypeClass),
    Name = "DummyReferenceTypeClass",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ClassConstructorTest)o).DummyReferenceTypeClass,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
},
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) =>
            {
                // ClassConstructor attribute is present - instance creation handled at runtime
                throw new global::System.NotSupportedException("Instance creation for classes with ClassConstructor attribute is handled at runtime");
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ClassConstructorTest)instance;
                var context = global::TUnit.Core.TestContext.Current;
                typedInstance.Test();
                await Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                instance.Test();
                await Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class ClassConstructorTest_Test_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ClassConstructorTest), new ClassConstructorTest_Test_TestSource_GUID());
    }
}
