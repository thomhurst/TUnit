// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_ClassConstructorTest_Test_ab630dfa342345b4973e7d5b8cf530d5
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testDescriptors = new System.Collections.Generic.List<ITestDescriptor>();
            var staticDef_0 = new StaticTestDefinition
            {
                TestId = "TUnit.TestProject.ClassConstructorTest.Test_0_{{TestIndex}}",
                DisplayName = "Test",
                TestFilePath = @"",
                TestLineNumber = 8,
                IsAsync = false,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null,
                RepeatCount = 1,
                TestClassType = typeof(TUnit.TestProject.ClassConstructorTest),
                TestMethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.ClassConstructorTest),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),Name = "Test",GenericTypeCount = 0,ReturnType = typeof(void),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "Test", TargetType = typeof(TUnit.TestProject.ClassConstructorTest), ConstructorArguments = new object?[] { "", 8, }, }
],Parameters = [],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.ClassConstructorTest", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.ClassConstructorTest),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "ClassConstructorTest",Namespace = "TUnit.TestProject",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.ClassConstructorAttribute<global::TUnit.TestProject.DependencyInjectionClassConstructor>(), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "ClassConstructorTest", TargetType = typeof(TUnit.TestProject.ClassConstructorTest), }
],Parameters = [new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.DummyReferenceTypeClass>{Name = "dummyReferenceTypeClass",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.DummyReferenceTypeClass, TestsBase`1"),Attributes = [],ReflectionInfo = null!,},],Properties = [new global::TUnit.Core.PropertyMetadata{ReflectionInfo = typeof(global::TUnit.TestProject.ClassConstructorTest).GetProperty("DummyReferenceTypeClass"),Type = typeof(global::TUnit.TestProject.DummyReferenceTypeClass),Name = "DummyReferenceTypeClass",IsStatic = false,Getter = o => ((global::TUnit.TestProject.ClassConstructorTest)o).DummyReferenceTypeClass,Attributes = [],ClassMetadata = null,},],}),},
                ClassFactory = args => new TUnit.TestProject.ClassConstructorTest(TUnit.Core.Helpers.CastHelper.Cast<TUnit.TestProject.DummyReferenceTypeClass>(args[0])),
                MethodInvoker = async (instance, args, cancellationToken) => ((TUnit.TestProject.ClassConstructorTest)instance).Test(),
                PropertyValuesProvider = () => new[] { new System.Collections.Generic.Dictionary<string, object?>() },
                ClassDataProvider = new TUnit.Core.EmptyDataProvider(),
                MethodDataProvider = new TUnit.Core.EmptyDataProvider()
            };
            testDescriptors.Add(staticDef_0);
            TestSourceRegistrar.RegisterTests(testDescriptors);
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testDescriptors = new System.Collections.Generic.List<ITestDescriptor>();
            var failureDef = new StaticTestDefinition
            {
                TestId = "TUnit.TestProject.ClassConstructorTest.Test_RuntimeFailure_{{TestIndex}}",
                DisplayName = "Test [RUNTIME INITIALIZATION FAILED]",
                TestFilePath = @"",
                TestLineNumber = 8,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null,
                RepeatCount = 1,
                TestClassType = typeof(TUnit.TestProject.ClassConstructorTest),
                TestMethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(TUnit.TestProject.ClassConstructorTest),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),
Name = "Test_RuntimeFailure",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Attributes = new global::TUnit.Core.AttributeMetadata[] { },
Parameters = new global::TUnit.Core.ParameterMetadata[] { },
Class = new global::TUnit.Core.ClassMetadata
{
Name = "ClassConstructorTest",
Type = typeof(TUnit.TestProject.ClassConstructorTest),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassConstructorTest, TestsBase`1"),
Namespace = "TUnit.TestProject",
Attributes = new global::TUnit.Core.AttributeMetadata[] { },
Properties = new global::TUnit.Core.PropertyMetadata[] { },
Parameters = new global::TUnit.Core.ParameterMetadata[] { },
Parent = null,
Assembly = new global::TUnit.Core.AssemblyMetadata
{
    Name = "TestsBase`1",
    Attributes = new global::TUnit.Core.AttributeMetadata[] { }
}
},
ReflectionInformation = null
},
                ClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodInvoker = async (instance, args, cancellationToken) => { await Task.CompletedTask; throw new InvalidOperationException(errorMessage); },
                PropertyValuesProvider = () => new[] { new System.Collections.Generic.Dictionary<string, object?>() },
                ClassDataProvider = new TUnit.Core.EmptyDataProvider(),
                MethodDataProvider = new TUnit.Core.EmptyDataProvider()
            };
            testDescriptors.Add(failureDef);
            TestSourceRegistrar.RegisterTests(testDescriptors);
        }
    }
}
