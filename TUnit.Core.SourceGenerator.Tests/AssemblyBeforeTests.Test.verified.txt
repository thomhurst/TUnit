[
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase1 : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase1();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase1),\r\n\t\t\t\t\tName = \u0022BeforeAll1\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase1\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase1),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase1\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblyBase1.BeforeAll1()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 5,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase1 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase1();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase1),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase1),\r\n\t\t\t\t\tName = \u0022BeforeEach1\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase1\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase1),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase1\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblyBase1)classInstance).BeforeEach1()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase2 : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase2();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase2),\r\n\t\t\t\t\tName = \u0022BeforeAll2\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase2\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase2),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase2\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblyBase2.BeforeAll2()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 20,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase2();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase2),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase2),\r\n\t\t\t\t\tName = \u0022BeforeEach2\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase2\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase2),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase2\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblyBase2)classInstance).BeforeEach2()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase3 : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase3();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase3),\r\n\t\t\t\t\tName = \u0022BeforeAll3\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase3\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase3),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase3\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblyBase3.BeforeAll3()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 35,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblyBase3 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblyBase3();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase3),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase3),\r\n\t\t\t\t\tName = \u0022BeforeEach3\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblyBase3\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblyBase3),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblyBase3\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblyBase3)classInstance).BeforeEach3()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022BeforeAllSetUp\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblySetupTests.BeforeAllSetUp()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 50,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022BeforeAllSetUpWithContext\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022context\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblySetupTests.BeforeAllSetUpWithContext(context)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 56,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022BeforeAllSetUp\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::System.Threading.CancellationToken\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022cancellationToken\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblySetupTests.BeforeAllSetUp(cancellationToken)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 62,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.IAssemblyHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterAssemblyHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterEveryAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectBeforeAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.BeforeAssemblyHookMethod\r\n\t\t\t{ MethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022BeforeAllSetUpWithContext\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Assembly)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022context\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::System.Threading.CancellationToken\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022cancellationToken\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E global::TUnit.TestProject.BeforeTests.AssemblySetupTests.BeforeAllSetUpWithContext(context, cancellationToken)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t\tFilePath = @\u0022\u0022,\r\n\t\t\t\tLineNumber = 68,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.AssemblyHookContext\u003E\u003E CollectAfterAssemblyHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022Setup\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = [],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblySetupTests)classInstance).Setup()),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022Setup\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),\r\n\r\n\t\t\t\t\t\tnew global::TUnit.Core.TimeoutAttribute(30_000)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::System.Threading.CancellationToken\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022cancellationToken\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblySetupTests)classInstance).Setup(cancellationToken)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022SetupWithContext\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::TUnit.Core.TestContext\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022testContext\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblySetupTests)classInstance).SetupWithContext(context)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}",
  "// \u003Cauto-generated/\u003E\r\n#pragma warning disable\r\nusing global::System.Linq;\r\nusing global::System.Reflection;\r\nusing global::System.Runtime.CompilerServices;\r\nusing global::TUnit.Core;\r\nusing global::TUnit.Core.Hooks;\r\nusing global::TUnit.Core.Interfaces;\r\n\r\nnamespace TUnit.SourceGenerated;\r\n\r\n[global::System.Diagnostics.StackTraceHidden]\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[System.CodeDom.Compiler.GeneratedCode(\u0022TUnit\u0022, \u00221.0.0.0\u0022)]\r\nfile partial class Hooks_AssemblySetupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource\r\n{\r\n\t[global::System.Runtime.CompilerServices.ModuleInitializer]\r\n\tpublic static void Initialise()\r\n\t{\r\n\t\tvar instance = new Hooks_AssemblySetupTests();\r\n\t\tSourceRegistrar.RegisterTestHookSource(instance);\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectBeforeEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.StaticHookMethod\u003Cglobal::TUnit.Core.TestContext\u003E\u003E CollectAfterEveryTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectBeforeTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t\tnew global::TUnit.Core.Hooks.InstanceHookMethod\r\n\t\t\t{\r\n\t\t\t\tClassType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\tMethodInfo = new global::TUnit.Core.TestMethod\r\n\t\t\t\t{\r\n\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\tName = \u0022SetupWithContext\u0022,\r\n\t\t\t\t\tGenericTypeCount = 0,\r\n\t\t\t\t\tReturnType = typeof(global::System.Threading.Tasks.Task),\r\n\t\t\t\t\tAttributes = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),\r\n\r\n\t\t\t\t\t\tnew global::TUnit.Core.TimeoutAttribute(30_000)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tParameters = \r\n\t\t\t\t\t[\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::TUnit.Core.TestContext\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022testContext\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tnew global::TUnit.Core.TestParameter\u003Cglobal::System.Threading.CancellationToken\u003E\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022cancellationToken\u0022,\r\n\t\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\t\tReflectionInfo = null!,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t],\r\n\t\t\t\t\tClass = global::TUnit.Core.TestClass.GetOrAdd(\u0022global::TUnit.TestProject.BeforeTests.AssemblySetupTests\u0022, () =\u003E new global::TUnit.Core.TestClass\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tParent = null,\r\n\t\t\t\t\t\tType = typeof(global::TUnit.TestProject.BeforeTests.AssemblySetupTests),\r\n\t\t\t\t\t\tAssembly = global::TUnit.Core.TestAssembly.GetOrAdd(\u0022AssemblyBeforeTests\u0022, () =\u003E new global::TUnit.Core.TestAssembly\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tName = \u0022AssemblyBeforeTests\u0022,\r\n\t\t\t\t\t\t\tAttributes = \r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\tnew global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tName = \u0022AssemblySetupTests\u0022,\r\n\t\t\t\t\t\tNamespace = \u0022TUnit.TestProject.BeforeTests\u0022,\r\n\t\t\t\t\t\tAttributes = [],\r\n\t\t\t\t\t\tParameters = [],\r\n\t\t\t\t\t\tProperties = [],\r\n\t\t\t\t\t}),\r\n\t\t\t\t}\r\n\t\t\t\t,\r\n\r\n\t\t\t\tBody = (classInstance, context, cancellationToken) =\u003E AsyncConvert.Convert(() =\u003E ((global::TUnit.TestProject.BeforeTests.AssemblySetupTests)classInstance).SetupWithContext(context, cancellationToken)),\r\n\t\t\t\tHookExecutor = DefaultExecutor.Instance,\r\n\t\t\t\tOrder = 0,\r\n\t\t\t},\r\n\t\t];\r\n\t}\r\n\r\n\tpublic global::System.Collections.Generic.IReadOnlyList\u003Cglobal::TUnit.Core.Hooks.InstanceHookMethod\u003E CollectAfterTestHooks(string sessionId)\r\n\t{\r\n\t\treturn\r\n\t\t[\r\n\t\t];\r\n\t}\r\n\r\n}"
]