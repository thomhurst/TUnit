[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class GenericMethodTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new GenericMethodTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.GenericMethodTests),
				Name = "AggregateBy_HasExpectedOutput",
				GenericTypeCount = 3,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData"),
					new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "source",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "keySelector",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "seedSelector",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "func",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "comparer",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<object>
					{
						Name = "expected",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.GenericMethodTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.GenericMethodTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GenericMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GenericMethodTests",
						Attributes = [],
					}),
					Name = "GenericMethodTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				foreach (var methodDataAccessor in global::TUnit.TestProject.GenericMethodTests.AggregateBy_Numeric_TestData())
				{
					testMethodDataIndex++;

					var methodData = methodDataAccessor();
					var methodArgTuples = global::System.TupleExtensions.ToTuple<global::System.Collections.Generic.IEnumerable<int>, global::System.Func<int, int>, global::System.Func<int, int>, global::System.Func<int, int, int>, global::System.Collections.Generic.IEqualityComparer<int>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<int, int>>>(methodData);
					global::System.Collections.Generic.IEnumerable<int> methodArg = methodArgTuples.Item1;
					global::System.Func<int, int> methodArg1 = methodArgTuples.Item2;
					global::System.Func<int, int> methodArg2 = methodArgTuples.Item3;
					global::System.Func<int, int, int> methodArg3 = methodArgTuples.Item4;
					global::System.Collections.Generic.IEqualityComparer<int> methodArg4 = methodArgTuples.Item5;
					global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<int, int>> methodArg5 = methodArgTuples.Item6;
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.GenericMethodTests>(() => 
					new global::TUnit.TestProject.GenericMethodTests()
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.GenericMethodTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.AggregateBy_HasExpectedOutput(methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5)),
						TestFilePath = @"",
						TestLineNumber = 5,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.GenericMethodTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
					MethodName = $"AggregateBy_HasExpectedOutput",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("GenericMethodTests.AggregateBy_HasExpectedOutput failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 5,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.GenericMethodTests),
					Name = "AggregateBy_HasExpectedOutput",
					GenericTypeCount = 3,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData"),
						new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "source",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "keySelector",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "seedSelector",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "func",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "comparer",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<object>
						{
							Name = "expected",
							Attributes = [],
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.GenericMethodTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Type = typeof(global::TUnit.TestProject.GenericMethodTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GenericMethodTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GenericMethodTests",
							Attributes = [],
						}),
						Name = "GenericMethodTests",
						Namespace = "TUnit.TestProject",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					foreach (var methodDataAccessor in global::TUnit.TestProject.GenericMethodTests.AggregateBy_String_TestData())
					{
						testMethodDataIndex++;

						var methodData = methodDataAccessor();
						var methodArgTuples = global::System.TupleExtensions.ToTuple<global::System.Collections.Generic.IEnumerable<string>, global::System.Func<string, string>, global::System.Func<string, string>, global::System.Func<string, string, string>, global::System.Collections.Generic.IEqualityComparer<string>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>>>(methodData);
						global::System.Collections.Generic.IEnumerable<string> methodArg = methodArgTuples.Item1;
						global::System.Func<string, string> methodArg1 = methodArgTuples.Item2;
						global::System.Func<string, string> methodArg2 = methodArgTuples.Item3;
						global::System.Func<string, string, string> methodArg3 = methodArgTuples.Item4;
						global::System.Collections.Generic.IEqualityComparer<string> methodArg4 = methodArgTuples.Item5;
						global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>> methodArg5 = methodArgTuples.Item6;
						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.GenericMethodTests>(() => 
						new global::TUnit.TestProject.GenericMethodTests()
						, sessionId, testBuilderContext);

						var resettableClassFactory = resettableClassFactoryDelegate();

						nodes.Add(new TestMetadata<global::TUnit.TestProject.GenericMethodTests>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5],
							TestClassProperties = [],
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.AggregateBy_HasExpectedOutput(methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5)),
							TestFilePath = @"",
							TestLineNumber = 5,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.GenericMethodTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
						MethodName = $"AggregateBy_HasExpectedOutput",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("GenericMethodTests.AggregateBy_HasExpectedOutput failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 5,
					});
				}
				return nodes;
			}
		}

]