// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class GenericMethodTests_AggregateBy_HasExpectedOutput_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        // Create generic metadata with concrete type registrations
        var genericMetadata = new global::TUnit.Core.GenericTestMetadata
        {
            TestName = "AggregateBy_HasExpectedOutput",
            TestClassType = typeof(global::TUnit.TestProject.GenericMethodTests),
            TestMethodName = "AggregateBy_HasExpectedOutput",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 8,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                Name = "AggregateBy_HasExpectedOutput",
                GenericTypeCount = 3,
                ReturnType = typeof(void),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "source",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.GenericParameter(0, true, "TSource")]),
                        IsNullable = false,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[0]!
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "keySelector",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                        IsNullable = false,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[1]!
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "seedSelector",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                        IsNullable = false,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[2]!
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "func",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,,>), [new global::TUnit.Core.GenericParameter(2, true, "TAccumulate"), new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                        IsNullable = false,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[3]!
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "comparer",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEqualityComparer<>), [new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                        IsNullable = true,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[4]!
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(object))
                    {
                        Name = "expected",
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.KeyValuePair<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")])]),
                        IsNullable = false,
                        ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[5]!
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.GenericMethodTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                        Name = "GenericMethodTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.GenericMethodTests();
            },
            ConcreteInstantiations = new global::System.Collections.Generic.Dictionary<string, global::TUnit.Core.TestMetadata>
            {
                [(typeof(int).FullName ?? typeof(int).Name) + "," + (typeof(int).FullName ?? typeof(int).Name) + "," + (typeof(int).FullName ?? typeof(int).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.GenericMethodTests>
                {
                    TestName = "AggregateBy_HasExpectedOutput<int, int, int>",
                    TestClassType = typeof(global::TUnit.TestProject.GenericMethodTests),
                    TestMethodName = "AggregateBy_HasExpectedOutput",
                    GenericMethodTypeArguments = new global::System.Type[] { typeof(int), typeof(int), typeof(int)},
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.TestAttribute(),
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData"),
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData"),
                        new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
                    ],
                    DataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData")
                        {
                            Factory = (dataGeneratorMetadata) =>
                            {
                                async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                                {
                                    var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_Numeric_TestData();
                                    if (result is global::System.Collections.IEnumerable enumerable && !(result is string))
                                    {
                                        foreach (var item in enumerable)
                                        {
                                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                        }
                                    }
                                    else
                                    {
                                        yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                                    }
                                }
                                return Factory();
                            }
                        },
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
                        {
                            Factory = (dataGeneratorMetadata) =>
                            {
                                async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                                {
                                    var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_String_TestData();
                                    if (result is global::System.Collections.IEnumerable enumerable && !(result is string))
                                    {
                                        foreach (var item in enumerable)
                                        {
                                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                        }
                                    }
                                    else
                                    {
                                        yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                                    }
                                }
                                return Factory();
                            }
                        },
                    },
                    ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    FilePath = @"",
                    LineNumber = 8,
                    InheritanceDepth = 0,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                        Name = "AggregateBy_HasExpectedOutput",
                        GenericTypeCount = 3,
                        ReturnType = typeof(void),
                        ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                        Parameters = new global::TUnit.Core.ParameterMetadata[]
                        {
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "source",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.GenericParameter(0, true, "TSource")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[0]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "keySelector",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[1]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "seedSelector",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[2]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "func",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,,>), [new global::TUnit.Core.GenericParameter(2, true, "TAccumulate"), new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[3]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "comparer",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEqualityComparer<>), [new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                                IsNullable = true,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[4]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "expected",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.KeyValuePair<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")])]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[5]!
                            }
                        },
                        Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.GenericMethodTests", () => 
                        {
                            var classMetadata = new global::TUnit.Core.ClassMetadata
                            {
                                Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                                Name = "GenericMethodTests",
                                Namespace = "TUnit.TestProject",
                                Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                                Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                                Parent = null
                            };
                            foreach (var prop in classMetadata.Properties)
                            {
                                prop.ClassMetadata = classMetadata;
                                prop.ContainingTypeMetadata = classMetadata;
                            }
                            return classMetadata;
                        })
                    },
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.GenericMethodTests();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.GenericMethodTests)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.AggregateBy_HasExpectedOutput<int, int, int>((global::System.Collections.Generic.IEnumerable<int>)args[0]!, (global::System.Func<int, int>)args[1]!, (global::System.Func<int, int>)args[2]!, (global::System.Func<int, int, int>)args[3]!, (global::System.Collections.Generic.IEqualityComparer<int>)args[4]!, (global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<int, int>>)args[5]!));
                    }
                }
                ,
                [(typeof(string).FullName ?? typeof(string).Name) + "," + (typeof(string).FullName ?? typeof(string).Name) + "," + (typeof(string).FullName ?? typeof(string).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.GenericMethodTests>
                {
                    TestName = "AggregateBy_HasExpectedOutput<string, string, string>",
                    TestClassType = typeof(global::TUnit.TestProject.GenericMethodTests),
                    TestMethodName = "AggregateBy_HasExpectedOutput",
                    GenericMethodTypeArguments = new global::System.Type[] { typeof(string), typeof(string), typeof(string)},
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.TestAttribute(),
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData"),
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData"),
                        new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
                    ],
                    DataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData")
                        {
                            Factory = (dataGeneratorMetadata) =>
                            {
                                async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                                {
                                    var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_Numeric_TestData();
                                    if (result is global::System.Collections.IEnumerable enumerable && !(result is string))
                                    {
                                        foreach (var item in enumerable)
                                        {
                                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                        }
                                    }
                                    else
                                    {
                                        yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                                    }
                                }
                                return Factory();
                            }
                        },
                        new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
                        {
                            Factory = (dataGeneratorMetadata) =>
                            {
                                async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                                {
                                    var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_String_TestData();
                                    if (result is global::System.Collections.IEnumerable enumerable && !(result is string))
                                    {
                                        foreach (var item in enumerable)
                                        {
                                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                        }
                                    }
                                    else
                                    {
                                        yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                                    }
                                }
                                return Factory();
                            }
                        },
                    },
                    ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    FilePath = @"",
                    LineNumber = 8,
                    InheritanceDepth = 0,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                        Name = "AggregateBy_HasExpectedOutput",
                        GenericTypeCount = 3,
                        ReturnType = typeof(void),
                        ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                        Parameters = new global::TUnit.Core.ParameterMetadata[]
                        {
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "source",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.GenericParameter(0, true, "TSource")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[0]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "keySelector",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[1]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "seedSelector",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[2]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "func",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Func<,,>), [new global::TUnit.Core.GenericParameter(2, true, "TAccumulate"), new global::TUnit.Core.GenericParameter(0, true, "TSource"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[3]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "comparer",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEqualityComparer<>), [new global::TUnit.Core.GenericParameter(1, true, "TKey")]),
                                IsNullable = true,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[4]!
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(object))
                            {
                                Name = "expected",
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.IEnumerable<>), [new global::TUnit.Core.ConstructedGeneric(typeof(global::System.Collections.Generic.KeyValuePair<,>), [new global::TUnit.Core.GenericParameter(1, true, "TKey"), new global::TUnit.Core.GenericParameter(2, true, "TAccumulate")])]),
                                IsNullable = false,
                                ReflectionInfo = global::System.Linq.Enumerable.FirstOrDefault(typeof(global::TUnit.TestProject.GenericMethodTests).GetMethods(global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance | global::System.Reflection.BindingFlags.Static), m => m.Name == "AggregateBy_HasExpectedOutput" && m.GetParameters().Length == 6)?.GetParameters()[5]!
                            }
                        },
                        Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.GenericMethodTests", () => 
                        {
                            var classMetadata = new global::TUnit.Core.ClassMetadata
                            {
                                Type = typeof(global::TUnit.TestProject.GenericMethodTests),
                                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.GenericMethodTests)),
                                Name = "GenericMethodTests",
                                Namespace = "TUnit.TestProject",
                                Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                                Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                                Parent = null
                            };
                            foreach (var prop in classMetadata.Properties)
                            {
                                prop.ClassMetadata = classMetadata;
                                prop.ContainingTypeMetadata = classMetadata;
                            }
                            return classMetadata;
                        })
                    },
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.GenericMethodTests();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.GenericMethodTests)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.AggregateBy_HasExpectedOutput<string, string, string>((global::System.Collections.Generic.IEnumerable<string>)args[0]!, (global::System.Func<string, string>)args[1]!, (global::System.Func<string, string>)args[2]!, (global::System.Func<string, string, string>)args[3]!, (global::System.Collections.Generic.IEqualityComparer<string>)args[4]!, (global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>>)args[5]!));
                    }
                }
                ,
            }
        };
        genericMetadata.TestSessionId = testSessionId;
        yield return genericMetadata;
        yield break;
    }
}
internal static class GenericMethodTests_AggregateBy_HasExpectedOutput_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.GenericMethodTests), new GenericMethodTests_AggregateBy_HasExpectedOutput_TestSource_GUID());
    }
}
