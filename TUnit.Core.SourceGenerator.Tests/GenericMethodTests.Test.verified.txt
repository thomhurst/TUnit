[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class GenericMethodTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new GenericMethodTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.GenericMethodTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.GenericMethodTests), "AggregateBy_HasExpectedOutput", 3, [typeof(global::System.Collections.Generic.IEnumerable<global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32, global::System.Int32>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.Int32>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::System.Int32>>)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			foreach (var methodDataAccessor in global::TUnit.TestProject.GenericMethodTests.AggregateBy_Numeric_TestData())
			{
				testMethodDataIndex++;

				var methodData = methodDataAccessor();
				var methodArgTuples = global::System.TupleExtensions.ToTuple<global::System.Collections.Generic.IEnumerable<global::System.Int32>, global::System.Func<global::System.Int32, global::System.Int32>, global::System.Func<global::System.Int32, global::System.Int32>, global::System.Func<global::System.Int32, global::System.Int32, global::System.Int32>, global::System.Collections.Generic.IEqualityComparer<global::System.Int32>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::System.Int32>>>(methodData);
				global::System.Collections.Generic.IEnumerable<global::System.Int32> methodArg = methodArgTuples.Item1;
				global::System.Func<global::System.Int32, global::System.Int32> methodArg1 = methodArgTuples.Item2;
				global::System.Func<global::System.Int32, global::System.Int32> methodArg2 = methodArgTuples.Item3;
				global::System.Func<global::System.Int32, global::System.Int32, global::System.Int32> methodArg3 = methodArgTuples.Item4;
				global::System.Collections.Generic.IEqualityComparer<global::System.Int32> methodArg4 = methodArgTuples.Item5;
				global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::System.Int32>> methodArg5 = methodArgTuples.Item6;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.GenericMethodTests>(() => 
				new global::TUnit.TestProject.GenericMethodTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.GenericMethodTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.AggregateBy_HasExpectedOutput(methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5)),
					TestFilePath = @"",
					TestLineNumber = 5,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData")
{
    
}, new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
{
    
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [  ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
				TestClass = typeof(global::TUnit.TestProject.GenericMethodTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.GenericMethodTests), "AggregateBy_HasExpectedOutput", 3, [typeof(global::System.Collections.Generic.IEnumerable<global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32, global::System.Int32>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.Int32>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::System.Int32>>)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Collections.Generic.IEnumerable<global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32>), typeof(global::System.Func<global::System.Int32, global::System.Int32, global::System.Int32>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.Int32>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.Int32, global::System.Int32>>)],
				TestName = "AggregateBy_HasExpectedOutput",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.GenericMethodTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.GenericMethodTests), "AggregateBy_HasExpectedOutput", 3, [typeof(global::System.Collections.Generic.IEnumerable<global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String, global::System.String>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.String>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.String>>)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			foreach (var methodDataAccessor in global::TUnit.TestProject.GenericMethodTests.AggregateBy_String_TestData())
			{
				testMethodDataIndex++;

				var methodData = methodDataAccessor();
				var methodArgTuples = global::System.TupleExtensions.ToTuple<global::System.Collections.Generic.IEnumerable<global::System.String>, global::System.Func<global::System.String, global::System.String>, global::System.Func<global::System.String, global::System.String>, global::System.Func<global::System.String, global::System.String, global::System.String>, global::System.Collections.Generic.IEqualityComparer<global::System.String>, global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.String>>>(methodData);
				global::System.Collections.Generic.IEnumerable<global::System.String> methodArg = methodArgTuples.Item1;
				global::System.Func<global::System.String, global::System.String> methodArg1 = methodArgTuples.Item2;
				global::System.Func<global::System.String, global::System.String> methodArg2 = methodArgTuples.Item3;
				global::System.Func<global::System.String, global::System.String, global::System.String> methodArg3 = methodArgTuples.Item4;
				global::System.Collections.Generic.IEqualityComparer<global::System.String> methodArg4 = methodArgTuples.Item5;
				global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.String>> methodArg5 = methodArgTuples.Item6;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.GenericMethodTests>(() => 
				new global::TUnit.TestProject.GenericMethodTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.GenericMethodTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.AggregateBy_HasExpectedOutput(methodArg, methodArg1, methodArg2, methodArg3, methodArg4, methodArg5)),
					TestFilePath = @"",
					TestLineNumber = 5,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData")
{
    
}, new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
{
    
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [  ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS1:{testMethodDataIndex}:TUnit.TestProject.GenericMethodTests.AggregateBy_HasExpectedOutput(System.Collections.Generic.IEnumerable<TSource>,TKey System.Func<TSource, TKey>(TSource),TAccumulate System.Func<TKey, TAccumulate>(TKey),TAccumulate System.Func<TAccumulate, TSource, TAccumulate>(TAccumulate, TSource),System.Collections.Generic.IEqualityComparer<TKey>,System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TAccumulate>>):0",
				TestClass = typeof(global::TUnit.TestProject.GenericMethodTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.GenericMethodTests), "AggregateBy_HasExpectedOutput", 3, [typeof(global::System.Collections.Generic.IEnumerable<global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String, global::System.String>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.String>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.String>>)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Collections.Generic.IEnumerable<global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String>), typeof(global::System.Func<global::System.String, global::System.String, global::System.String>), typeof(global::System.Collections.Generic.IEqualityComparer<global::System.String>), typeof(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.String>>)],
				TestName = "AggregateBy_HasExpectedOutput",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]