// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks;
public sealed class GeneratedHookRegistry
{
    static GeneratedHookRegistry()
    {
        try
        {
            PopulateSourcesDictionaries();
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Failed to initialize hook registry: {ex.Message}", ex);
        }
    }
    private static void PopulateSourcesDictionaries()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase1, TestsBase`1"),
Name = "BeforeEach1",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase1", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase1, TestsBase`1"),
Name = "GlobalBase1",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeEach1_0Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase2, TestsBase`1"),
Name = "BeforeEach2",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase2", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase2, TestsBase`1"),
Name = "GlobalBase2",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeEach2_0Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase3, TestsBase`1"),
Name = "BeforeEach3",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase3", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase3, TestsBase`1"),
Name = "GlobalBase3",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeEach3_0Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests), _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "SetUp",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_0Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "SetUp",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
{
    Name = "cancellationToken",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.CancellationToken, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUp", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_1Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "SetUpWithContext",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "testContext",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_1Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "SetUpWithContext",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "testContext",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
{
    Name = "cancellationToken",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.CancellationToken, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_2Params_Body
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase1, TestsBase`1"),
Name = "BeforeAll1",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1).GetMethod("BeforeAll1", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase1", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase1, TestsBase`1"),
Name = "GlobalBase1",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeAll1_1Params_Body,
                FilePath = @"",
                LineNumber = 5
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase2, TestsBase`1"),
Name = "BeforeAll2",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2).GetMethod("BeforeAll2", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase2", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase2, TestsBase`1"),
Name = "GlobalBase2",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeAll2_1Params_Body,
                FilePath = @"",
                LineNumber = 20
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase3, TestsBase`1"),
Name = "BeforeAll3",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3).GetMethod("BeforeAll3", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase3", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalBase3, TestsBase`1"),
Name = "GlobalBase3",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeAll3_1Params_Body,
                FilePath = @"",
                LineNumber = 35
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "BeforeAllSetUp",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_1Params_Body,
                FilePath = @"",
                LineNumber = 50
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "BeforeAllSetUp",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
{
    Name = "cancellationToken",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.CancellationToken, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_2Params_Body,
                FilePath = @"",
                LineNumber = 56
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "BeforeAllSetUpWithContext",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_1Params_Body,
                FilePath = @"",
                LineNumber = 62
            }
        );
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "BeforeAllSetUpWithContext",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
{
    Name = "context",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.Core.TestContext, TUnit.Core"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
{
    Name = "cancellationToken",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.CancellationToken, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.BeforeTests.GlobalSetUpTests, TestsBase`1"),
Name = "GlobalSetUpTests",
Namespace = "TUnit.TestProject.BeforeTests",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                HookExecutor = null!,
                Order = 0,
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_2Params_Body,
                FilePath = @"",
                LineNumber = 68
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeEach1_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase1)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach1());
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeEach2_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase2)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach2());
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeEach3_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase3)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach3());
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUp());
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUp(cancellationToken));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUpWithContext(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_2Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUpWithContext(context, cancellationToken));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeAll1_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase1.BeforeAll1(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeAll2_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase2.BeforeAll2(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeAll3_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase3.BeforeAll3(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context, cancellationToken));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context));
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context, cancellationToken));
    }
}
internal static class HookModuleInitializer
{
    [ModuleInitializer]
    public static void Initialize()
    {
        _ = new GeneratedHookRegistry();
    }
}
