[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase1 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
					Name = "BeforeEach1",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase1", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalBase1",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalBase1)classInstance).BeforeEach1()),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
					Name = "BeforeEach2",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase2", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalBase2",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalBase2)classInstance).BeforeEach2()),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase3 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
					Name = "BeforeEach3",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase3", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalBase3",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalBase3)classInstance).BeforeEach3()),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Name = "SetUp",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalSetUpTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)classInstance).SetUp()),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Name = "SetUp",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
						new global::TUnit.Core.TimeoutAttribute(30_000)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalSetUpTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)classInstance).SetUp(cancellationToken)),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Name = "SetUpWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
						{
							Name = "testContext",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalSetUpTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)classInstance).SetUpWithContext(context)),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Name = "SetUpWithContext",
					GenericTypeCount = 0,
					ReturnType = typeof(global::System.Threading.Tasks.Task),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
						new global::TUnit.Core.TimeoutAttribute(30_000)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
						{
							Name = "testContext",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "GlobalStaticBeforeEachTests",
							Attributes = [],
						}),
						Name = "GlobalSetUpTests",
						Namespace = "TUnit.TestProject.BeforeTests",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)classInstance).SetUpWithContext(context, cancellationToken)),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase1 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
				Name = "BeforeAll1",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase1", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalBase1",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase1.BeforeAll1(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 5,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
				Name = "BeforeAll2",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase2", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalBase2",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase2.BeforeAll2(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 20,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase3 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
				Name = "BeforeAll3",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalBase3", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalBase3",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase3.BeforeAll3(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 35,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				Name = "BeforeAllSetUp",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalSetUpTests",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 50,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				Name = "BeforeAllSetUp",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalSetUpTests",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 56,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				Name = "BeforeAllSetUpWithContext",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalSetUpTests",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 62,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
				Name = "BeforeAllSetUpWithContext",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.Test)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
					{
						Name = "context",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("GlobalStaticBeforeEachTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "GlobalStaticBeforeEachTests",
						Attributes = [],
					}),
					Name = "GlobalSetUpTests",
					Namespace = "TUnit.TestProject.BeforeTests",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
},
				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 68,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

]