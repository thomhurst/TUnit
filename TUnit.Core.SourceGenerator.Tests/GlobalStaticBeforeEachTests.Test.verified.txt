[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase1 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalBase1>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1).GetMethod("BeforeEach1", 0, []),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.BeforeEach1()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase2 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalBase2>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2).GetMethod("BeforeEach2", 0, []),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.BeforeEach2()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase3 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalBase3>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3).GetMethod("BeforeEach3", 0, []),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.BeforeEach3()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalSetUpTests>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUp", 0, []),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.SetUp()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalSetUpTests>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUp", 0, [typeof(global::System.Threading.CancellationToken)]),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.SetUp(cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalSetUpTests>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", 0, [typeof(global::TUnit.Core.TestContext)]),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.SetUpWithContext(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new InstanceHookMethod<global::TUnit.TestProject.BeforeTests.GlobalSetUpTests>
			{
				MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", 0, [typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken)]),
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.SetUpWithContext(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase1 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1).GetMethod("BeforeAll1", 0, [typeof(global::TUnit.Core.TestContext)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase1.BeforeAll1(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 5,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase2 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2).GetMethod("BeforeAll2", 0, [typeof(global::TUnit.Core.TestContext)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase2.BeforeAll2(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 20,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalBase3 : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalBase3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3).GetMethod("BeforeAll3", 0, [typeof(global::TUnit.Core.TestContext)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase3.BeforeAll3(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 35,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", 0, [typeof(global::TUnit.Core.TestContext)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 50,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", 0, [typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context, cancellationToken)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 56,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", 0, [typeof(global::TUnit.Core.TestContext)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 62,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GlobalSetUpTests : TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GlobalSetUpTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
			new BeforeTestHookMethod
			{ 
			MethodInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", 0, [typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken)]),
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context, cancellationToken)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 68,
		},
	];
}
public global::System.Collections.Generic.IReadOnlyList<StaticHookMethod<TestContext>> CollectAfterEveryTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
{
	return
	[
	];
}
public global::System.Collections.Generic.IReadOnlyList<InstanceHookMethod> CollectAfterTestHooks(string sessionId)
{
	return
	[
	];
}
}

]