// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase1_BeforeEach1_Before_Test_GUID;
internal static class GlobalBase1_BeforeEach1_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)),
                    Name = "BeforeEach1",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase1", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)),
                            Name = "GlobalBase1",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeEach1_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeEach1_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase1)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach1());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase2_BeforeEach2_Before_Test_GUID;
internal static class GlobalBase2_BeforeEach2_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)),
                    Name = "BeforeEach2",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase2", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)),
                            Name = "GlobalBase2",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeEach2_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeEach2_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase2)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach2());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase3_BeforeEach3_Before_Test_GUID;
internal static class GlobalBase3_BeforeEach3_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)),
                    Name = "BeforeEach3",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase3", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)),
                            Name = "GlobalBase3",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeEach3_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeEach3_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalBase3)instance;
        await AsyncConvert.Convert(() => typedInstance.BeforeEach3());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_SetUp_Before_Test_GUID;
internal static class GlobalSetUpTests_SetUp_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "SetUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_0Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_0Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUp());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_SetUp_Before_Test_GUID;
internal static class GlobalSetUpTests_SetUp_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "SetUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_1Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUp_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUp(cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_SetUpWithContext_Before_Test_GUID;
internal static class GlobalSetUpTests_SetUpWithContext_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "SetUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "testContext",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_1Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_1Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUpWithContext(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_SetUpWithContext_Before_Test_GUID;
internal static class GlobalSetUpTests_SetUpWithContext_Before_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeTestHooks.GetOrAdd(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests), static _ => new global::System.Collections.Concurrent.ConcurrentBag<global::TUnit.Core.Hooks.InstanceHookMethod>());
        global::TUnit.Core.Sources.BeforeTestHooks[typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)].Add(
            new InstanceHookMethod
            {
                InitClassType = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "SetUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "testContext",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("SetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_2Params_Body
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_SetUpWithContext_2Params_Body(object instance, TestContext context, CancellationToken cancellationToken)
    {
        var typedInstance = (global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)instance;
        await AsyncConvert.Convert(() => typedInstance.SetUpWithContext(context, cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase1_BeforeAll1_BeforeEvery_Test_GUID;
internal static class GlobalBase1_BeforeAll1_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)),
                    Name = "BeforeAll1",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1).GetMethod("BeforeAll1", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase1", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase1)),
                            Name = "GlobalBase1",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeAll1_1Params_Body,
                FilePath = @"",
                LineNumber = 5
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase1_BeforeAll1_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase1.BeforeAll1(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase2_BeforeAll2_BeforeEvery_Test_GUID;
internal static class GlobalBase2_BeforeAll2_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)),
                    Name = "BeforeAll2",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2).GetMethod("BeforeAll2", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase2", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase2)),
                            Name = "GlobalBase2",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeAll2_1Params_Body,
                FilePath = @"",
                LineNumber = 20
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase2_BeforeAll2_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase2.BeforeAll2(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalBase3_BeforeAll3_BeforeEvery_Test_GUID;
internal static class GlobalBase3_BeforeAll3_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)),
                    Name = "BeforeAll3",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3).GetMethod("BeforeAll3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalBase3", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalBase3)),
                            Name = "GlobalBase3",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeAll3_1Params_Body,
                FilePath = @"",
                LineNumber = 35
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalBase3_BeforeAll3_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalBase3.BeforeAll3(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_BeforeAllSetUp_BeforeEvery_Test_GUID;
internal static class GlobalSetUpTests_BeforeAllSetUp_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "BeforeAllSetUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_1Params_Body,
                FilePath = @"",
                LineNumber = 50
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_BeforeAllSetUp_BeforeEvery_Test_GUID;
internal static class GlobalSetUpTests_BeforeAllSetUp_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "BeforeAllSetUp",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUp", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_2Params_Body,
                FilePath = @"",
                LineNumber = 56
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUp_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUp(context, cancellationToken));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_BeforeAllSetUpWithContext_BeforeEvery_Test_GUID;
internal static class GlobalSetUpTests_BeforeAllSetUpWithContext_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "BeforeAllSetUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext) }, null)!.GetParameters()[0]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_1Params_Body,
                FilePath = @"",
                LineNumber = 62
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_1Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context));
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces.SourceGenerator;
using global::TUnit.Core.Models;
using HookType = global::TUnit.Core.HookType;
namespace TUnit.Generated.Hooks.GlobalSetUpTests_BeforeAllSetUpWithContext_BeforeEvery_Test_GUID;
internal static class GlobalSetUpTests_BeforeAllSetUpWithContext_BeforeEvery_Test_GUIDInitializer
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.Sources.BeforeEveryTestHooks.Add(
            new BeforeTestHookMethod
            {
                MethodInfo = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                    TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                    Name = "BeforeAllSetUpWithContext",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.Tasks.Task)),
                    Parameters = new global::TUnit.Core.ParameterMetadata[]
                    {
                        new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.Core.TestContext))
                        {
                            Name = "context",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.Core.TestContext)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
                        },
                        new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
                        {
                            Name = "cancellationToken",
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::System.Threading.CancellationToken)),
                            IsNullable = false,
                            ReflectionInfo = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests).GetMethod("BeforeAllSetUpWithContext", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Static, null, new global::System.Type[] { typeof(global::TUnit.Core.TestContext), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
                        }
                    },
                    Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.BeforeTests.GlobalSetUpTests", () => 
                    {
                        var classMetadata = new global::TUnit.Core.ClassMetadata
                        {
                            Type = typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests),
                            TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.BeforeTests.GlobalSetUpTests)),
                            Name = "GlobalSetUpTests",
                            Namespace = "TUnit.TestProject.BeforeTests",
                            Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                            Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                            Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                            Parent = null
                        };
                        foreach (var prop in classMetadata.Properties)
                        {
                            prop.ClassMetadata = classMetadata;
                            prop.ContainingTypeMetadata = classMetadata;
                        }
                        return classMetadata;
                    })
                },
                HookExecutor = DefaultExecutor.Instance,
                Order = 0,
                RegistrationIndex = global::TUnit.Core.HookRegistrationIndices.GetNextBeforeEveryTestHookIndex(),
                Body = global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_2Params_Body,
                FilePath = @"",
                LineNumber = 68
            }
        );
    }
    private static async ValueTask global_TUnit_TestProject_BeforeTests_GlobalSetUpTests_BeforeAllSetUpWithContext_2Params_Body(TestContext context, CancellationToken cancellationToken)
    {
        await AsyncConvert.Convert(() => global::TUnit.TestProject.BeforeTests.GlobalSetUpTests.BeforeAllSetUpWithContext(context, cancellationToken));
    }
}
