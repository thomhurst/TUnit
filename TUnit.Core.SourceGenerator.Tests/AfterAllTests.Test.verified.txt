[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base1 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base1();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base1),
     Name = "AfterAll1",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base1),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base1",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.Base1.AfterAll1()),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 5,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base1 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base1();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.Base1>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base1),
     Name = "AfterEach1",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base1),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base1",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.AfterEach1()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base2 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base2();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base2),
     Name = "AfterAll2",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base2),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base2",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.Base2.AfterAll2()),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 20,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base2();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.Base2>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base2),
     Name = "AfterEach2",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base2),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base2",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.AfterEach2()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base3 : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base3();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base3),
     Name = "AfterAll3",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base3),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base3",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.Base3.AfterAll3()),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 35,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_Base3 : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_Base3();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.Base3>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.Base3),
     Name = "AfterEach3",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.Base3),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "Base3",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.AfterEach3()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "AfterAllCleanUp",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.CleanupTests.AfterAllCleanUp()),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 50,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "AfterAllCleanUpWithContext",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.ClassHookContext>
    {
        Name = "context",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.CleanupTests.AfterAllCleanUpWithContext(context)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 56,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "AfterAllCleanUp",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
    {
        Name = "cancellationToken",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.CleanupTests.AfterAllCleanUp(cancellationToken)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 62,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.IClassHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterClassHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterEveryClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectBeforeClassHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.ClassHookContext>> CollectAfterClassHooks(string sessionId)
	{
		return
		[
			new AfterClassHookMethod
			{ 
			MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "AfterAllCleanUpWithContext",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.ClassHookContext>
    {
        Name = "context",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
    {
        Name = "cancellationToken",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
			AsyncBody = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.AfterTests.CleanupTests.AfterAllCleanUpWithContext(context, cancellationToken)),
			HookExecutor = DefaultExecutor.Instance,
			Order = 0,
			FilePath = @"",
			LineNumber = 68,
			MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Class)
{
    
} ],
			ClassAttributes = [  ],
			AssemblyAttributes = [  ],
		},
	];
}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.CleanupTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "Cleanup",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.Cleanup()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.CleanupTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "Cleanup",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, 
new global::TUnit.Core.TimeoutAttribute(30_000)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
    {
        Name = "cancellationToken",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.Cleanup(cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, new global::TUnit.Core.TimeoutAttribute(30_000)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.CleanupTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "CleanupWithContext",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
    {
        Name = "testContext",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.CleanupWithContext(context)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_CleanupTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_CleanupTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.AfterTests.CleanupTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Name = "CleanupWithContext",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, 
new global::TUnit.Core.TimeoutAttribute(30_000)
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.Core.TestContext>
    {
        Name = "testContext",
        Attributes = 
        [
            
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
    {
        Name = "cancellationToken",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.AfterTests.CleanupTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "AfterAllTests",
     Attributes = 
     [
         
     ],  
},
     Name = "CleanupTests",
     Namespace = "TUnit.TestProject.AfterTests",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
},
				AsyncBody = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => classInstance.CleanupWithContext(context, cancellationToken)),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.AfterAttribute(global::TUnit.Core.HookType.Test)
{
    
}, new global::TUnit.Core.TimeoutAttribute(30_000)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
}

]