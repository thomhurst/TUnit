// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		var result2 = await Tests2(sessionId);
		testDefinitions.AddRange(result2.TestDefinitions);
		discoveryFailures.AddRange(result2.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							8,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 1;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							8,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 2;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests2(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							8,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 3;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 8,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		var result2 = await Tests2(sessionId);
		testDefinitions.AddRange(result2.TestDefinitions);
		discoveryFailures.AddRange(result2.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							17,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1, "String"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1, "String" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2, "String2" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3, "String3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3, "String3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 1;
			string methodArg1 = "String";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							17,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1, "String"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1, "String" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2, "String2" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3, "String3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3, "String3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 2;
			string methodArg1 = "String2";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests2(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							17,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1, "String"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1, "String" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2, "String2" },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(3, "String3"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 3, "String3" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 3;
			string methodArg1 = "String3";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 17,
				TestClassName = "DataDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		var result2 = await Tests2(sessionId);
		testDefinitions.AddRange(result2.TestDefinitions);
		discoveryFailures.AddRange(result2.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EnumValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							26,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(0) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(1) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(-1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { -1 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.TestEnum>
					{
						Name = "testEnum",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::TUnit.TestProject.TestEnum methodArg = global::TUnit.TestProject.TestEnum.One;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassName = "DataDrivenTests",
				TestMethodName = "EnumValue"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EnumValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							26,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(0) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(1) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(-1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { -1 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.TestEnum>
					{
						Name = "testEnum",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::TUnit.TestProject.TestEnum methodArg = global::TUnit.TestProject.TestEnum.Two;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassName = "DataDrivenTests",
				TestMethodName = "EnumValue"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests2(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EnumValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							26,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(0) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { (global::TUnit.TestProject.TestEnum)(1) },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(-1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { -1 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.TestEnum>
					{
						Name = "testEnum",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::TUnit.TestProject.TestEnum methodArg = (global::TUnit.TestProject.TestEnum)(-1);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 26,
				TestClassName = "DataDrivenTests",
				TestMethodName = "EnumValue"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "NullValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NullValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							35,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(null),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NullValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							null,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NullValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = null;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NullValue(string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NullValue(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NullValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NullValue(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.NullValue failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassName = "DataDrivenTests",
				TestMethodName = "NullValue"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EmptyString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EmptyString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							42,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(""),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EmptyString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EmptyString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EmptyString(string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 42,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EmptyString(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EmptyString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EmptyString(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EmptyString failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 42,
				TestClassName = "DataDrivenTests",
				TestMethodName = "EmptyString"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "NonEmptyString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NonEmptyString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							49,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("Foo bar!"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NonEmptyString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "Foo bar!" },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NonEmptyString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "Foo bar!";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NonEmptyString(string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 49,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NonEmptyString(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NonEmptyString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NonEmptyString(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.NonEmptyString failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 49,
				TestClassName = "DataDrivenTests",
				TestMethodName = "NonEmptyString"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		var result2 = await Tests2(sessionId);
		testDefinitions.AddRange(result2.TestDefinitions);
		discoveryFailures.AddRange(result2.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "BooleanString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							56,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(null),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(false),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { false },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(true),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<bool?>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			bool? methodArg = null;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassName = "DataDrivenTests",
				TestMethodName = "BooleanString"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "BooleanString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							56,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(null),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(false),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { false },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(true),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<bool?>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			bool? methodArg = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassName = "DataDrivenTests",
				TestMethodName = "BooleanString"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests2(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "BooleanString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							56,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(null),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(false),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { false },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(true),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BooleanString",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<bool?>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			bool? methodArg = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BooleanString",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 56,
				TestClassName = "DataDrivenTests",
				TestMethodName = "BooleanString"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "Type",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Type",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							65,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(typeof(object)),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Type",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { typeof(object) },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Type>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Type",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::System.Type methodArg = typeof(object);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.Type(System.Type):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 65,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Type(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Type",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.Type(System.Type):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.Type failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 65,
				TestClassName = "DataDrivenTests",
				TestMethodName = "Type"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "IntegerArray",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "IntegerArray",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							72,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(new[] { 1, 2, 3 }),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "IntegerArray",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { new int[] { 1, 2, 3 } },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int[]>
					{
						Name = "values",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IntegerArray",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int[] methodArg = new[] { 1, 2, 3 };

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntegerArray(int[]):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 72,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IntegerArray(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IntegerArray",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntegerArray(int[]):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.IntegerArray failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 72,
				TestClassName = "DataDrivenTests",
				TestMethodName = "IntegerArray"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "IntMaxValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "IntMaxValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							79,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(2147483647),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "IntMaxValue",
						TargetType = typeof(TUnit.TestProject.DataDrivenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 2147483647 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataDrivenTests",
							}

						],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataDrivenTests",
							TargetType = typeof(TUnit.TestProject.DataDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IntMaxValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = 2147483647;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => new global::TUnit.TestProject.DataDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataDrivenTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntMaxValue(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 79,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IntMaxValue(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "IntMaxValue",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntMaxValue(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.IntMaxValue failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 79,
				TestClassName = "DataDrivenTests",
				TestMethodName = "IntMaxValue"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}