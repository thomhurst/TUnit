[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(1),
					new global::TUnit.Core.ArgumentsAttribute(2),
					new global::TUnit.Core.ArgumentsAttribute(3)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				int methodArg = 1;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 8,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
					MethodName = $"DataSource_Method",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 8,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Name = "DataSource_Method",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute(1),
						new global::TUnit.Core.ArgumentsAttribute(2),
						new global::TUnit.Core.ArgumentsAttribute(3)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "DataDrivenTests",
							Attributes = [],
						}),
						Name = "DataDrivenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new EngineTest(Pass)
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.DataDrivenTests? classInstance = null;
					object?[]? classInstanceArguments = null;
					classInstanceArguments = [];

					int methodArg = 2;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
					new global::TUnit.TestProject.DataDrivenTests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 8,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
						MethodName = $"DataSource_Method",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 8,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Name = "DataSource_Method",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.ArgumentsAttribute(1),
							new global::TUnit.Core.ArgumentsAttribute(2),
							new global::TUnit.Core.ArgumentsAttribute(3)
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "value",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "DataDrivenTests",
								Attributes = [],
							}),
							Name = "DataDrivenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new EngineTest(Pass)
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.DataDrivenTests? classInstance = null;
						object?[]? classInstanceArguments = null;
						classInstanceArguments = [];

						int methodArg = 3;

						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
						new global::TUnit.TestProject.DataDrivenTests()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
							TestFilePath = @"",
							TestLineNumber = 8,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int):0",
							MethodName = $"DataSource_Method",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 8,
						});
					}
					return nodes;
				}
			}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(1, "String"),
					new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
					new global::TUnit.Core.ArgumentsAttribute(3, "String3")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				int methodArg = 1;
				string methodArg1 = "String";

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
					TestFilePath = @"",
					TestLineNumber = 17,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
					MethodName = $"DataSource_Method",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 17,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Name = "DataSource_Method",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute(1, "String"),
						new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
						new global::TUnit.Core.ArgumentsAttribute(3, "String3")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "DataDrivenTests",
							Attributes = [],
						}),
						Name = "DataDrivenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new EngineTest(Pass)
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.DataDrivenTests? classInstance = null;
					object?[]? classInstanceArguments = null;
					classInstanceArguments = [];

					int methodArg = 2;
					string methodArg1 = "String2";

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
					new global::TUnit.TestProject.DataDrivenTests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg, methodArg1],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
						TestFilePath = @"",
						TestLineNumber = 17,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
						MethodName = $"DataSource_Method",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 17,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Name = "DataSource_Method",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.ArgumentsAttribute(1, "String"),
							new global::TUnit.Core.ArgumentsAttribute(2, "String2"),
							new global::TUnit.Core.ArgumentsAttribute(3, "String3")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "value",
								Attributes = [],
								ReflectionInfo = null!,
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<string>
							{
								Name = "value2",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "DataDrivenTests",
								Attributes = [],
							}),
							Name = "DataDrivenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new EngineTest(Pass)
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.DataDrivenTests? classInstance = null;
						object?[]? classInstanceArguments = null;
						classInstanceArguments = [];

						int methodArg = 3;
						string methodArg1 = "String3";

						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
						new global::TUnit.TestProject.DataDrivenTests()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg, methodArg1],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg, methodArg1)),
							TestFilePath = @"",
							TestLineNumber = 17,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.DataSource_Method(int,string):0",
							MethodName = $"DataSource_Method",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.DataSource_Method failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 17,
						});
					}
					return nodes;
				}
			}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EnumValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
					new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
					new global::TUnit.Core.ArgumentsAttribute(-1)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.TestEnum>
					{
						Name = "testEnum",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				global::TUnit.TestProject.TestEnum methodArg = global::TUnit.TestProject.TestEnum.One;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 26,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
					MethodName = $"EnumValue",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 26,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Name = "EnumValue",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
						new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
						new global::TUnit.Core.ArgumentsAttribute(-1)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.TestEnum>
						{
							Name = "testEnum",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "DataDrivenTests",
							Attributes = [],
						}),
						Name = "DataDrivenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new EngineTest(Pass)
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.DataDrivenTests? classInstance = null;
					object?[]? classInstanceArguments = null;
					classInstanceArguments = [];

					global::TUnit.TestProject.TestEnum methodArg = global::TUnit.TestProject.TestEnum.Two;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
					new global::TUnit.TestProject.DataDrivenTests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 26,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
						MethodName = $"EnumValue",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 26,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Name = "EnumValue",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.One),
							new global::TUnit.Core.ArgumentsAttribute(global::TUnit.TestProject.TestEnum.Two),
							new global::TUnit.Core.ArgumentsAttribute(-1)
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.TestEnum>
							{
								Name = "testEnum",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "DataDrivenTests",
								Attributes = [],
							}),
							Name = "DataDrivenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new EngineTest(Pass)
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.DataDrivenTests? classInstance = null;
						object?[]? classInstanceArguments = null;
						classInstanceArguments = [];

						global::TUnit.TestProject.TestEnum methodArg = (global::TUnit.TestProject.TestEnum)(-1);

						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
						new global::TUnit.TestProject.DataDrivenTests()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumValue(methodArg)),
							TestFilePath = @"",
							TestLineNumber = 26,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.EnumValue(TUnit.TestProject.TestEnum):0",
							MethodName = $"EnumValue",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EnumValue failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 26,
						});
					}
					return nodes;
				}
			}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "NullValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				string methodArg = null;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NullValue(string):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NullValue(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 35,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NullValue(string):0",
					MethodName = $"NullValue",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.NullValue failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 35,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "EmptyString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute("")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				string methodArg = "";

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EmptyString(string):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EmptyString(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 42,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.EmptyString(string):0",
					MethodName = $"EmptyString",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.EmptyString failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 42,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "NonEmptyString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute("Foo bar!")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				string methodArg = "Foo bar!";

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NonEmptyString(string):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NonEmptyString(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 49,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.NonEmptyString(string):0",
					MethodName = $"NonEmptyString",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.NonEmptyString failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 49,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "BooleanString",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(null),
					new global::TUnit.Core.ArgumentsAttribute(false),
					new global::TUnit.Core.ArgumentsAttribute(true)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<bool?>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				bool? methodArg = null;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 56,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
					MethodName = $"BooleanString",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 56,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Name = "BooleanString",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute(null),
						new global::TUnit.Core.ArgumentsAttribute(false),
						new global::TUnit.Core.ArgumentsAttribute(true)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<bool?>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "DataDrivenTests",
							Attributes = [],
						}),
						Name = "DataDrivenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new EngineTest(Pass)
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.DataDrivenTests? classInstance = null;
					object?[]? classInstanceArguments = null;
					classInstanceArguments = [];

					bool? methodArg = false;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
					new global::TUnit.TestProject.DataDrivenTests()
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 56,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
						MethodName = $"BooleanString",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 56,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.DataDrivenTests),
						Name = "BooleanString",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.ArgumentsAttribute(null),
							new global::TUnit.Core.ArgumentsAttribute(false),
							new global::TUnit.Core.ArgumentsAttribute(true)
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<bool?>
							{
								Name = "value",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.DataDrivenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "DataDrivenTests",
								Attributes = [],
							}),
							Name = "DataDrivenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new EngineTest(Pass)
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.DataDrivenTests? classInstance = null;
						object?[]? classInstanceArguments = null;
						classInstanceArguments = [];

						bool? methodArg = true;

						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
						new global::TUnit.TestProject.DataDrivenTests()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BooleanString(methodArg)),
							TestFilePath = @"",
							TestLineNumber = 56,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS2:TUnit.TestProject.DataDrivenTests.BooleanString(bool?):0",
							MethodName = $"BooleanString",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.BooleanString failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 56,
						});
					}
					return nodes;
				}
			}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "Type",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(typeof(object))
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Type>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				global::System.Type methodArg = typeof(object);

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.Type(System.Type):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Type(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 65,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.Type(System.Type):0",
					MethodName = $"Type",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.Type failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 65,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "IntegerArray",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(new[] { 1, 2, 3 })
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int[]>
					{
						Name = "values",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				int[] methodArg = new[] { 1, 2, 3 };

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntegerArray(int[]):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IntegerArray(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 72,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntegerArray(int[]):0",
					MethodName = $"IntegerArray",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.IntegerArray failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 72,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.DataDrivenTests),
				Name = "IntMaxValue",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(2147483647)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("DataDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "DataDrivenTests",
						Attributes = [],
					}),
					Name = "DataDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.DataDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				int methodArg = 2147483647;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataDrivenTests>(() => 
				new global::TUnit.TestProject.DataDrivenTests()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntMaxValue(int):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.IntMaxValue(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 79,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.DataDrivenTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.DataDrivenTests.IntMaxValue(int):0",
					MethodName = $"IntMaxValue",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataDrivenTests.IntMaxValue failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 79,
				});
			}
			return nodes;
		}
	}

]