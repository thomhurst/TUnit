// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_BaseClass : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_BaseClass();
		SourceRegistrar.RegisterTestHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
					Name = "Setup",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "Setup",
							TargetType = typeof(TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(0),
								"",
								7,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("Tests1899", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "Tests1899",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "Tests1899",
								}

							],
						}),
						Name = "BaseClass",
						Namespace = "TUnit.TestProject.Library.Bugs._1899",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = [],
					}),
				}
				,

				Body = (classInstance, context, cancellationToken) => AsyncConvert.ConvertObject(() => classInstance.GetType().GetMethod("Setup", []).Invoke(classInstance, [])),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}

}