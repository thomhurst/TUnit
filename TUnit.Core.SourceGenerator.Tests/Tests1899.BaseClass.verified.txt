[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;


[global::System.Diagnostics.StackTraceHidden]
	[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]		file partial class Hooks_BaseClass : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
		{
			[global::System.Runtime.CompilerServices.ModuleInitializer]				public static void Initialise()
				{					var instance = new Hooks_BaseClass();
					SourceRegistrar.RegisterTestHookSource(instance);
				}				public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
				{					return
					[					];
				}				public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
				{					return
					[					];
				}				public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
				{					return
					[						new global::TUnit.Core.Hooks.InstanceHookMethod
						{							ClassType = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
							MethodInfo = 							new global::TUnit.Core.SourceGeneratedMethodInformation

							{								Type = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
								Name = "Setup",
								GenericTypeCount = 0,
								ReturnType = typeof(void),
								Attributes = 

								[									// <auto-generated/>
new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
								],
								Parameters = 
								[],

									Class = 									global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>", () => new global::TUnit.Core.SourceGeneratedClassInformation

									{										Parent = null,
										Type = typeof(global::TUnit.TestProject.Library.Bugs._1899.BaseClass<>),
										Assembly = 										global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1899", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation

										{											Name = "Tests1899",
											Attributes = 
											[],

											}),
											Name = "BaseClass",
											Namespace = "TUnit.TestProject.Library.Bugs._1899",
											Attributes = 
											[],

												Parameters = 
												[],

													Properties = 
													[],

													}),
												}												,

												Body = (classInstance, context, cancellationToken) => AsyncConvert.ConvertObject(() => classInstance.GetType().GetMethod("Setup", []).Invoke(classInstance, [])),
												HookExecutor = DefaultExecutor.Instance,
												Order = 0,
											},
										];
									}									public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
									{										return
										[										];
									}								}
]