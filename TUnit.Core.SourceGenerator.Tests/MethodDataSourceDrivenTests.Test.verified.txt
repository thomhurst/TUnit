// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							14,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 14,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method2",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method2",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							21,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method2",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method2(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 21,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method2(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method2(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method2 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 21,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method2"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method_WithAction",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method_WithAction",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							28,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeAction"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method_WithAction",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeAction",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Action>
					{
						Name = "action",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method_WithAction",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::System.Action methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeAction()();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method_WithAction(void System.Action()):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method_WithAction(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method_WithAction",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method_WithAction(void System.Action()):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method_WithAction failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method_WithAction"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method3",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							35,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = [5],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { 5 },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { 5 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod(5);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method3(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method3",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							35,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = [5],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { 5 },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method3",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { 5 },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod(5 );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method3(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method3(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 35,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		var result2 = await Tests2(sessionId);
		testDefinitions.AddRange(result2.TestDefinitions);
		discoveryFailures.AddRange(result2.DiscoveryFailures);
		var result3 = await Tests3(sessionId);
		testDefinitions.AddRange(result3.TestDefinitions);
		discoveryFailures.AddRange(result3.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method4",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							44,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 5, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 6, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 6, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 7, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 8, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 8, true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 5, true);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method4 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method4"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method4",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							44,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 5, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 6, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 6, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 7, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 8, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 8, true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 6, true );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method4 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method4"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests2(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method4",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							44,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 5, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 6, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 6, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 7, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 8, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 8, true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 7, true);
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS2:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method4 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method4"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests3(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_Method4",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							44,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 5, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 6, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 6, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = ["Hello World!", 7, true],
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = null,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("SomeMethod")
						{
							Arguments = new object[] { "Hello World!", 8, true },
						},
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_Method4",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"SomeMethod",
						}
						,
						NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
						{
							["Arguments"] = new object[] { "Hello World!", 8, true },
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.SomeMethod("Hello World!", 8, true );
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS3:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Method4(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_Method4",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS3:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_Method4(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_Method4 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 44,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_Method4"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "DataSource_WithBaseReturn",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_WithBaseReturn",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							55,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("MethodWithBaseReturn"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSource_WithBaseReturn",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"MethodWithBaseReturn",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_WithBaseReturn",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			global::TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue methodArg = global::TUnit.TestProject.MethodDataSourceDrivenTests.MethodWithBaseReturn()();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_WithBaseReturn(TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 55,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_WithBaseReturn(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSource_WithBaseReturn",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenTests.DataSource_WithBaseReturn(TUnit.TestProject.MethodDataSourceDrivenTests.BaseValue):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.DataSource_WithBaseReturn failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 55,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "DataSource_WithBaseReturn"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
				Name = "EnumerableFuncArrayTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumerableFuncArrayTest",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"",
							61,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncArrayTestData"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "EnumerableFuncArrayTest",
						TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
						ConstructorArguments = new object?[]
						{
							"EnumerableFuncArrayTestData",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string[]>
					{
						Name = "strings",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("MethodDataSourceDrivenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "MethodDataSourceDrivenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "MethodDataSourceDrivenTests",
							}

						],
					}),
					Name = "MethodDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "MethodDataSourceDrivenTests",
							TargetType = typeof(TUnit.TestProject.MethodDataSourceDrivenTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "EnumerableFuncArrayTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTestData())
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodData = methodDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.MethodDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTest(string[]):0",
					MethodMetadata = testInformation,
					RepeatCount = 0,
					TestFilePath = @"",
					TestLineNumber = 61,
					TestClassFactory = () => resettableClassFactory.Value,
					TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.EnumerableFuncArrayTest(methodData)),
					ClassArgumentsProvider = () => new object?[] {  },
					MethodArgumentsProvider = () => new object?[] { methodData },
					PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
					{
					}
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "EnumerableFuncArrayTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation
				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenTests.EnumerableFuncArrayTest(string[]):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenTests.EnumerableFuncArrayTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 61,
				TestClassName = "MethodDataSourceDrivenTests",
				TestMethodName = "EnumerableFuncArrayTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}