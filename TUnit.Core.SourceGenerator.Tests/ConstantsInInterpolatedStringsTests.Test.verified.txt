[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantsInInterpolatedStringsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantsInInterpolatedStringsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests),
     Name = "SomeTest",
     GenericTypeCount = 0,
     ReturnType = typeof(global::System.Threading.Tasks.Task),
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.ArgumentsAttribute($"{"Value"}1")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<string>
    {
        Name = "value",
        Attributes = 
        [
            
        ]
    }],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "ConstantsInInterpolatedStringsTests",
     Attributes = 
     [
         
     ],  
},
     Name = "ConstantsInInterpolatedStringsTests",
     Namespace = "TUnit.TestProject.Bugs._1432",
     Attributes = 
     [
         
     ],  
     Parameters = [],
     Properties = [],
},
};

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			string methodArg = $"{"Value"}1";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests>(() => 
			new global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests.SomeTest(string):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.SomeTest(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 13,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests.SomeTest(string):0",
				TestClass = typeof(global::TUnit.TestProject.Bugs._1432.ConstantsInInterpolatedStringsTests),
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				ParameterTypeFullNames = [typeof(string)],
				TestName = "SomeTest",
				TestFilePath = @"",
				TestLineNumber = 13,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]