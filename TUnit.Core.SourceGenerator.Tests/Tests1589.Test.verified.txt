// <auto-generated/>
#pragma warning disable

#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using global::TUnit.Core;
using global::TUnit.Core.SourceGenerator;
namespace TUnit.Generated;
internal static class TestMetadataRegistry_TUnit_TestProject_Bugs__1589_MyTests_Test1_728be4e182c648c6864bbfe2cf91e90a
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        try
        {
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var metadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.Bugs._1589.MyTests.Test1_{{TestIndex}}",
                TestClassTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests, TestsBase`1"),
                TestClassType = typeof(TUnit.TestProject.Bugs._1589.MyTests),
                MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.Bugs._1589.MyTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests, TestsBase`1"),Name = "Test1",GenericTypeCount = 0,ReturnType = typeof(global::System.Threading.Tasks.Task),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.Core.TestAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Method, TargetMemberName = "Test1", TargetType = typeof(TUnit.TestProject.Bugs._1589.MyTests), ConstructorArguments = new object?[] { "", 15, }, }
],Parameters = [],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.Bugs._1589.MyTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.Bugs._1589.MyTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(), TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly, TargetMemberName = "TestsBase`1", }
],}),Name = "MyTests",Namespace = "TUnit.TestProject.Bugs._1589",Attributes = [new global::TUnit.Core.AttributeMetadata { Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass), TargetElement = global::TUnit.Core.TestAttributeTarget.Class, TargetMemberName = "MyTests", TargetType = typeof(TUnit.TestProject.Bugs._1589.MyTests), ConstructorArguments = new object?[] { (global::TUnit.TestProject.Attributes.ExpectedResult)(0), }, }
],Parameters = [new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1589.MyFixture>{Name = "myFixture",TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyFixture, TestsBase`1"),Attributes = [],ReflectionInfo = null!,},],Properties = [new global::TUnit.Core.PropertyMetadata{ReflectionInfo = typeof(global::TUnit.TestProject.Bugs._1589.MyTests).GetProperty("Fixture"),Type = typeof(global::TUnit.TestProject.Bugs._1589.MyFixture),Name = "Fixture",IsStatic = false,Getter = o => ((global::TUnit.TestProject.Bugs._1589.MyTests)o).Fixture,Attributes = [],ClassMetadata = null,},new global::TUnit.Core.PropertyMetadata{ReflectionInfo = typeof(global::TUnit.TestProject.Bugs._1589.MyTests).GetProperty("MyProp"),Type = typeof(int),Name = "MyProp",IsStatic = false,Getter = o => ((global::TUnit.TestProject.Bugs._1589.MyTests)o).MyProp,Attributes = [],ClassMetadata = null,},],}),},
                TestFilePath = @"",
                TestLineNumber = 15,
                TestClassFactory = args => new TUnit.TestProject.Bugs._1589.MyTests((TUnit.TestProject.Bugs._1589.MyFixture)args[0]),
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "Test1",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(metadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
        catch (System.Exception ex)
        {
            // Runtime initialization failed - generate minimal metadata that will report the error
            // Note: We can't call external methods here as this is in the module initializer
            // So we need to generate the failure metadata inline
            var errorMessage = "Runtime initialization failed: " + ex.GetType().Name + ": " + ex.Message;
            var testMetadata = new System.Collections.Generic.List<DynamicTestMetadata>();
            var failureMetadata = new DynamicTestMetadata
            {
                TestIdTemplate = "TUnit.TestProject.Bugs._1589.MyTests.Test1_RuntimeFailure_{{TestIndex}}",
                TestClassTypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests"),
                TestClassType = typeof(TUnit.TestProject.Bugs._1589.MyTests),
                TestClassFactory = args => throw new InvalidOperationException(errorMessage),
                MethodMetadata = new global::TUnit.Core.MethodMetadata
                {
                    Type = typeof(TUnit.TestProject.Bugs._1589.MyTests),
                    TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests"),
                    Name = "Test1_RuntimeFailure",
                    GenericTypeCount = 0,
                    ReturnType = typeof(global::System.Threading.Tasks.Task),
                    ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                    Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                    Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                    Class = new global::TUnit.Core.ClassMetadata
                    {
                        Name = "MyTests",
                        Type = typeof(TUnit.TestProject.Bugs._1589.MyTests),
                        TypeReference = TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1589.MyTests"),
                        Namespace = "TUnit.TestProject.Bugs._1589",
                        Attributes = new global::TUnit.Core.AttributeMetadata[] { },
                        Properties = new global::TUnit.Core.PropertyMetadata[] { },
                        Parameters = new global::TUnit.Core.ParameterMetadata[] { },
                        Parent = null,
                        Assembly = new global::TUnit.Core.AssemblyMetadata
                        {
                            Name = "TestsBase`1",
                            Attributes = new global::TUnit.Core.AttributeMetadata[] { }
                        }
                    },
                    ReflectionInformation = null
                },
                TestFilePath = @"",
                TestLineNumber = 15,
                ClassDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                MethodDataSources = System.Array.Empty<global::TUnit.Core.IDataSourceProvider>(),
                PropertyDataSources = new System.Collections.Generic.Dictionary<System.Reflection.PropertyInfo, global::TUnit.Core.IDataSourceProvider>(),
                DisplayNameTemplate = "Test1 [RUNTIME INITIALIZATION FAILED]",
                RepeatCount = 1,
                IsAsync = true,
                IsSkipped = false,
                SkipReason = null,
                Timeout = null
            };
            testMetadata.Add(failureMetadata);
            TestSourceRegistrar.RegisterTests(testMetadata.Cast<ITestDescriptor>().ToList());
        }
    }
}
