// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime;
using global::TUnit.Core;
using global::TUnit.Core.Services;
using global::TUnit.Core.Interfaces.SourceGenerator;
namespace TUnit.Generated;
public sealed class GeneratedTestSource : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    private static readonly List<TestMetadata> _allTests = new();
    public IEnumerable<TestMetadata> GetTests() => _allTests;
    static GeneratedTestSource()
    {
        try
        {
            RegisterAllDelegates();
            RegisterAllTests();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to initialize test source: {ex}");
            throw;
        }
    }
    private static void RegisterAllDelegates()
    {
        // Registering delegates for AOT execution
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.With_STA", STAThreadTests_With_STA_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.Without_STA", STAThreadTests_Without_STA_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithSimpleAwait", STAThreadTests_STA_WithSimpleAwait_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskYield", STAThreadTests_STA_WithTaskYield_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithConfigureAwaitTrue", STAThreadTests_STA_WithConfigureAwaitTrue_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithNestedAsyncCalls", STAThreadTests_STA_WithNestedAsyncCalls_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskFromResult", STAThreadTests_STA_WithTaskFromResult_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithCompletedTask", STAThreadTests_STA_WithCompletedTask_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskRun", STAThreadTests_STA_WithTaskRun_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithMultipleAwaits", STAThreadTests_STA_WithMultipleAwaits_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithAsyncEnumerable", STAThreadTests_STA_WithAsyncEnumerable_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskWhenAll", STAThreadTests_STA_WithTaskWhenAll_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.STAThreadTests", args => new global::TUnit.TestProject.STAThreadTests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithExceptionHandling", STAThreadTests_STA_WithExceptionHandling_Invoker);
    }
    private static void RegisterAllTests()
    {
        var successCount = 0;
        var failedTests = new List<string>();
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.With_STA",
                TestName = "With_STA",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "With_STA",
                FilePath = @"",
                LineNumber = 15,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.With_STA"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.With_STA";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.Without_STA",
                TestName = "Without_STA",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "Without_STA",
                FilePath = @"",
                LineNumber = 21,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.Without_STA"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.Without_STA";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithSimpleAwait",
                TestName = "STA_WithSimpleAwait",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithSimpleAwait",
                FilePath = @"",
                LineNumber = 27,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithSimpleAwait"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithSimpleAwait";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithTaskYield",
                TestName = "STA_WithTaskYield",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithTaskYield",
                FilePath = @"",
                LineNumber = 39,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskYield"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithTaskYield";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithConfigureAwaitTrue",
                TestName = "STA_WithConfigureAwaitTrue",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithConfigureAwaitTrue",
                FilePath = @"",
                LineNumber = 50,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithConfigureAwaitTrue"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithConfigureAwaitTrue";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithNestedAsyncCalls",
                TestName = "STA_WithNestedAsyncCalls",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithNestedAsyncCalls",
                FilePath = @"",
                LineNumber = 61,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithNestedAsyncCalls"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithNestedAsyncCalls";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithTaskFromResult",
                TestName = "STA_WithTaskFromResult",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithTaskFromResult",
                FilePath = @"",
                LineNumber = 74,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskFromResult"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithTaskFromResult";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithCompletedTask",
                TestName = "STA_WithCompletedTask",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithCompletedTask",
                FilePath = @"",
                LineNumber = 86,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithCompletedTask"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithCompletedTask";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithTaskRun",
                TestName = "STA_WithTaskRun",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithTaskRun",
                FilePath = @"",
                LineNumber = 97,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskRun"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithTaskRun";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithMultipleAwaits",
                TestName = "STA_WithMultipleAwaits",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithMultipleAwaits",
                FilePath = @"",
                LineNumber = 117,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithMultipleAwaits"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithMultipleAwaits";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithAsyncEnumerable",
                TestName = "STA_WithAsyncEnumerable",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithAsyncEnumerable",
                FilePath = @"",
                LineNumber = 137,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithAsyncEnumerable"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithAsyncEnumerable";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithTaskWhenAll",
                TestName = "STA_WithTaskWhenAll",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithTaskWhenAll",
                FilePath = @"",
                LineNumber = 154,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithTaskWhenAll"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithTaskWhenAll";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.STAThreadTests.STA_WithExceptionHandling",
                TestName = "STA_WithExceptionHandling",
                TestClassType = typeof(global::TUnit.TestProject.STAThreadTests),
                TestMethodName = "STA_WithExceptionHandling",
                FilePath = @"",
                LineNumber = 175,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = Array.Empty<TestDataSource>(),
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = Type.EmptyTypes,
                TestMethodParameterTypes = Array.Empty<string>(),
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.STAThreadTests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.STAThreadTests.STA_WithExceptionHandling"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.STAThreadTests.STA_WithExceptionHandling";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        if (failedTests.Count > 0)
        {
            Console.Error.WriteLine($"Failed to register {failedTests.Count} tests:");
            foreach (var failure in failedTests)
            {
                Console.Error.WriteLine($"  - {failure}");
            }
        }
    }
    // Generic test registry
    /// <summary>
    /// Registry for generic test instantiations discovered at compile-time
    /// </summary>
    internal static class GenericTestRegistry
    {
        private static readonly Dictionary<Type[], TestMetadata> Registry =
            new(TypeArrayComparer.Instance);
        /// <summary>
        /// Gets test metadata for the specified generic type arguments
        /// </summary>
        public static TestMetadata? GetMetadata(params Type[] types) => null;
        /// <summary>
        /// Gets all registered generic test combinations
        /// </summary>
        public static IEnumerable<(Type[] TypeArgs, TestMetadata Metadata)> GetAllGenericTests() =>
            Enumerable.Empty<(Type[], TestMetadata)>();
    }
    // Async data source wrapper methods
    // Helper methods
    // Factory methods for classes with required properties
    // Strongly-typed delegate implementations
    private static async Task STAThreadTests_With_STA_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.With_STA();
    }
    private static async Task STAThreadTests_Without_STA_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.Without_STA();
    }
    private static async Task STAThreadTests_STA_WithSimpleAwait_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithSimpleAwait();
    }
    private static async Task STAThreadTests_STA_WithTaskYield_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithTaskYield();
    }
    private static async Task STAThreadTests_STA_WithConfigureAwaitTrue_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithConfigureAwaitTrue();
    }
    private static async Task STAThreadTests_STA_WithNestedAsyncCalls_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithNestedAsyncCalls();
    }
    private static async Task STAThreadTests_STA_WithTaskFromResult_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithTaskFromResult();
    }
    private static async Task STAThreadTests_STA_WithCompletedTask_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithCompletedTask();
    }
    private static async Task STAThreadTests_STA_WithTaskRun_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithTaskRun();
    }
    private static async Task STAThreadTests_STA_WithMultipleAwaits_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithMultipleAwaits();
    }
    private static async Task STAThreadTests_STA_WithAsyncEnumerable_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithAsyncEnumerable();
    }
    private static async Task STAThreadTests_STA_WithTaskWhenAll_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithTaskWhenAll();
    }
    private static async Task STAThreadTests_STA_WithExceptionHandling_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.STAThreadTests)instance;
        await typedInstance.STA_WithExceptionHandling();
    }
}
internal static class ModuleInitializer
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(new GeneratedTestSource());
    }
}
