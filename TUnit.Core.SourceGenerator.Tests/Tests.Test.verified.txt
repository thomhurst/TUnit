// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
#pragma warning disable CS9113 // Parameter is unread.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime;
using global::TUnit.Core;
using global::TUnit.Core.Services;
using global::TUnit.Core.Interfaces.SourceGenerator;
namespace TUnit.Generated;
public sealed class GeneratedTestSource : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    private static readonly List<TestMetadata> _allTests = new();
    public IEnumerable<TestMetadata> GetTests() => _allTests;
    static GeneratedTestSource()
    {
        try
        {
            RegisterAllDelegates();
            RegisterAllTests();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to initialize test source: {ex}");
            throw;
        }
    }
    private static void RegisterAllDelegates()
    {
        // Registering delegates for AOT execution
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests", args => new global::TUnit.TestProject.Bugs._1304.Tests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.TryParse_InvalidString_ReturnsFailure", Tests_TryParse_InvalidString_ReturnsFailure_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests", args => new global::TUnit.TestProject.Bugs._1304.Tests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.Parse_InvalidString_ThrowsException", Tests_Parse_InvalidString_ThrowsException_Invoker);
        TestDelegateStorage.RegisterInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests", args => new global::TUnit.TestProject.Bugs._1304.Tests());
        TestDelegateStorage.RegisterTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.TryParse_ValidString_ReturnsAccountId", Tests_TryParse_ValidString_ReturnsAccountId_Invoker);
    }
    private static void RegisterAllTests()
    {
        var successCount = 0;
        var failedTests = new List<string>();
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.Bugs._1304.Tests.TryParse_InvalidString_ReturnsFailure(string?,CancellationToken)",
                TestName = "TryParse_InvalidString_ReturnsFailure",
                TestClassType = typeof(global::TUnit.TestProject.Bugs._1304.Tests),
                TestMethodName = "TryParse_InvalidString_ReturnsFailure",
                FilePath = @"",
                LineNumber = 16,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = new TestDataSource[]
                {
                    new StaticTestDataSource(new object?[][] { new object?[] { "\"2c48c152-7cb7-4f51-8f01-704454f36e60\"" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { "invalidNotAGui" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { "" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { " " } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { null } }),
                },
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = new Type[]
                {
                    typeof(string),
                    typeof(global::System.Threading.CancellationToken),
                },
                TestMethodParameterTypes = new string[]
                {
                    "string",
                    "global::System.Threading.CancellationToken",
                },
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.TryParse_InvalidString_ReturnsFailure"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.Bugs._1304.Tests.TryParse_InvalidString_ReturnsFailure";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.Bugs._1304.Tests.Parse_InvalidString_ThrowsException(string?)",
                TestName = "Parse_InvalidString_ThrowsException",
                TestClassType = typeof(global::TUnit.TestProject.Bugs._1304.Tests),
                TestMethodName = "Parse_InvalidString_ThrowsException",
                FilePath = @"",
                LineNumber = 33,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = new TestDataSource[]
                {
                    new StaticTestDataSource(new object?[][] { new object?[] { "\"2c48c152-7cb7-4f51-8f01-704454f36e60\"" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { "invalidNotAGui" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { "" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { " " } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { null } }),
                },
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = new Type[]
                {
                    typeof(string),
                },
                TestMethodParameterTypes = new string[]
                {
                    "string",
                },
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.Parse_InvalidString_ThrowsException"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.Bugs._1304.Tests.Parse_InvalidString_ThrowsException";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        try
        {
            _allTests.Add(new TestMetadata
            {
                TestId = "global::TUnit.TestProject.Bugs._1304.Tests.TryParse_ValidString_ReturnsAccountId(string)",
                TestName = "TryParse_ValidString_ReturnsAccountId",
                TestClassType = typeof(global::TUnit.TestProject.Bugs._1304.Tests),
                TestMethodName = "TryParse_ValidString_ReturnsAccountId",
                FilePath = @"",
                LineNumber = 42,
                Categories = Array.Empty<string>(),
                IsSkipped = false,
                SkipReason = null,
                TimeoutMs = null,
                RetryCount = 0,
                CanRunInParallel = true,
                Dependencies = Array.Empty<TestDependency>(),
                AttributeFactory = () => new Attribute[]
                {
                    new global::TUnit.TestProject.Attributes.EngineTest((global::TUnit.TestProject.Attributes.ExpectedResult)(0)),
                    new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
                },
                DataSources = new TestDataSource[]
                {
                    new StaticTestDataSource(new object?[][] { new object?[] { "2c48c152-7cb7-4f51-8f01-704454f36e60" } }),
                    new StaticTestDataSource(new object?[][] { new object?[] { "00000000-0000-0000-0000-000000000000" } }),
                },
                ClassDataSources = Array.Empty<TestDataSource>(),
                PropertyDataSources = Array.Empty<PropertyDataSource>(),
                ParameterTypes = new Type[]
                {
                    typeof(string),
                },
                TestMethodParameterTypes = new string[]
                {
                    "string",
                },
                Hooks = new TestHooks
                {
                    BeforeClass = Array.Empty<HookMetadata>(),
                    AfterClass = Array.Empty<HookMetadata>(),
                    BeforeTest = Array.Empty<HookMetadata>(),
                    AfterTest = Array.Empty<HookMetadata>()
                },
                InstanceFactory = TestDelegateStorage.GetInstanceFactory("global::TUnit.TestProject.Bugs._1304.Tests"),
                TestInvoker = TestDelegateStorage.GetTestInvoker("global::TUnit.TestProject.Bugs._1304.Tests.TryParse_ValidString_ReturnsAccountId"),
            });
            successCount++;
        }
        catch (Exception ex)
        {
            var testName = "TUnit.TestProject.Bugs._1304.Tests.TryParse_ValidString_ReturnsAccountId";
            failedTests.Add($"{testName}: {ex.Message}");
            Console.Error.WriteLine($"Failed to register test {testName}: {ex}");
        }
        if (failedTests.Count > 0)
        {
            Console.Error.WriteLine($"Failed to register {failedTests.Count} tests:");
            foreach (var failure in failedTests)
            {
                Console.Error.WriteLine($"  - {failure}");
            }
        }
    }
    // Generic test registry
    /// <summary>
    /// Registry for generic test instantiations discovered at compile-time
    /// </summary>
    internal static class GenericTestRegistry
    {
        private static readonly Dictionary<Type[], TestMetadata> Registry =
            new(TypeArrayComparer.Instance);
        /// <summary>
        /// Gets test metadata for the specified generic type arguments
        /// </summary>
        public static TestMetadata? GetMetadata(params Type[] types) => null;
        /// <summary>
        /// Gets all registered generic test combinations
        /// </summary>
        public static IEnumerable<(Type[] TypeArgs, TestMetadata Metadata)> GetAllGenericTests() =>
            Enumerable.Empty<(Type[], TestMetadata)>();
    }
    // Async data source wrapper methods
    // Helper methods
    // Factory methods for classes with required properties
    // Strongly-typed delegate implementations
    private static async Task Tests_TryParse_InvalidString_ReturnsFailure_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.Bugs._1304.Tests)instance;
        var arg0 = (string)args[0]!;
        var arg1 = args[1] != null ? (global::System.Threading.CancellationToken)args[1]! : default(global::System.Threading.CancellationToken);
        await typedInstance.TryParse_InvalidString_ReturnsFailure(arg0, arg1);
    }
    private static async Task Tests_Parse_InvalidString_ThrowsException_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.Bugs._1304.Tests)instance;
        var arg0 = (string)args[0]!;
        await typedInstance.Parse_InvalidString_ThrowsException(arg0);
    }
    private static async Task Tests_TryParse_ValidString_ReturnsAccountId_Invoker(object instance, object?[] args)
    {
        var typedInstance = (global::TUnit.TestProject.Bugs._1304.Tests)instance;
        var arg0 = (string)args[0]!;
        await typedInstance.TryParse_ValidString_ReturnsAccountId(arg0);
    }
}
internal static class ModuleInitializer
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(new GeneratedTestSource());
    }
}
