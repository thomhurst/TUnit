// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class AttributeTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new AttributeTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		return await Tests0(sessionId);
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.AttributeTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.TestProject.AttributeTests.MixedAttribute(),

					new global::TUnit.TestProject.AttributeTests.MixedAttribute("Foo"),

					new global::TUnit.TestProject.AttributeTests.MixedAttribute("Foo", "Bar"),

					new global::TUnit.TestProject.AttributeTests.MixedAttribute(property2: "Foo"),

					new global::TUnit.TestProject.AttributeTests.MixedAttribute()
					{
						Property = "Foo",
					},

					new global::TUnit.TestProject.AttributeTests.MixedAttribute("Foo")
					{
						Property = "Bar",
					},

					new global::TUnit.TestProject.AttributeTests.MixedAttribute(property2: "Foo")
					{
						Property = "Bar",
					},

					new global::TUnit.TestProject.AttributeTests.MixedAttribute()
					{
						Property = "Foo",
						Property2 = 1,
					}
				],
				Parameters = [],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.AttributeTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.AttributeTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("AttributeTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "AttributeTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "AttributeTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.AttributeTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.AttributeTests>(() => new global::TUnit.TestProject.AttributeTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.AttributeTests>
			{
				TestId = $"TUnit.TestProject.AttributeTests.MyTest:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest()),
				TestFilePath = @"",
				TestLineNumber = 7,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.AttributeTests>
			{
				TestId = $"TUnit.TestProject.AttributeTests.MyTest:0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("AttributeTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 7,
			});
		}
		return nodes;
	}

}