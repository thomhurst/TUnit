// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_MatrixTest_One_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "MatrixTest_One",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "MatrixTest_One",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(string),
                typeof(int),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "string",
                "int",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTest_One",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "str",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "i",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[1]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[2]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        await typedInstance.MatrixTest_One(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        await instance.MatrixTest_One(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_MatrixTest_One_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_MatrixTest_One_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_MatrixTest_Two_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "MatrixTest_Two",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "MatrixTest_Two",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(int),
                typeof(int),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "int",
                "int",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTest_Two",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "i",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int), typeof(int), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "i2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int), typeof(int), typeof(bool) }, null)!.GetParameters()[1]
},
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "i3",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int), typeof(int), typeof(bool) }, null)!.GetParameters()[2]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int), typeof(int), typeof(bool) }, null)!.GetParameters()[3]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 4:
                        await typedInstance.MatrixTest_Two(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[2]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[3]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 4 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 4:
                        await instance.MatrixTest_Two(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[2]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[3]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 4 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_MatrixTest_Two_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_MatrixTest_Two_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_MatrixTest_Enum_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "MatrixTest_Enum",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "MatrixTest_Enum",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(global::TUnit.TestProject.TestEnum),
                typeof(global::TUnit.TestProject.TestEnum?),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "global::TUnit.TestProject.TestEnum",
                "global::TUnit.TestProject.TestEnum?",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTest_Enum",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "i",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(global::TUnit.TestProject.TestEnum), typeof(global::TUnit.TestProject.TestEnum?) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.TestEnum))
{
    Name = "testEnum",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestEnum, TestsBase`1"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(global::TUnit.TestProject.TestEnum), typeof(global::TUnit.TestProject.TestEnum?) }, null)!.GetParameters()[1]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.TestEnum?))
{
    Name = "testEnum2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("T?, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestEnum, TestsBase`1")),
    IsNullable = true,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(global::TUnit.TestProject.TestEnum), typeof(global::TUnit.TestProject.TestEnum?) }, null)!.GetParameters()[2]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        await typedInstance.MatrixTest_Enum(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.TestEnum>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.TestEnum?>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        await instance.MatrixTest_Enum(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.TestEnum>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.TestEnum?>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_MatrixTest_Enum_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_MatrixTest_Enum_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_AutoGenerateBools_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "AutoGenerateBools",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "AutoGenerateBools",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(string),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "string",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "AutoGenerateBools",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "str",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("AutoGenerateBools", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("AutoGenerateBools", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(bool) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.AutoGenerateBools(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.AutoGenerateBools(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_AutoGenerateBools_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_AutoGenerateBools_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_AutoGenerateBools2_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "AutoGenerateBools2",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "AutoGenerateBools2",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(string),
                typeof(bool?),
            },
            TestMethodParameterTypes = new string[]
            {
                "string",
                "bool?",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "AutoGenerateBools2",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "str",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("AutoGenerateBools2", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(bool?) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool?))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("T?, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib")),
    IsNullable = true,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("AutoGenerateBools2", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(bool?) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.AutoGenerateBools2(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool?>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.AutoGenerateBools2(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool?>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_AutoGenerateBools2_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_AutoGenerateBools2_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_ImplicitConversion_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "ImplicitConversion",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "ImplicitConversion",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "ImplicitConversion",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>))
{
    Name = "enum",
    TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("OneOf<, >, TestsBase`1", global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestEnum, TestsBase`1"), global::TUnit.Core.TypeReference.CreateConcrete("TestEnum2, TestsBase`1")),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("ImplicitConversion", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("ImplicitConversion", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>), typeof(bool) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.ImplicitConversion(TUnit.Core.Helpers.CastHelper.Cast<OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.ImplicitConversion(TUnit.Core.Helpers.CastHelper.Cast<OneOf<global::TUnit.TestProject.TestEnum, TestEnum2>>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_ImplicitConversion_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_ImplicitConversion_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_ExcludingAutoGeneratedMatrixValues_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "ExcludingAutoGeneratedMatrixValues",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "ExcludingAutoGeneratedMatrixValues",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(global::TUnit.TestProject.MatrixTests.CountToTenEnum),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "global::TUnit.TestProject.MatrixTests.CountToTenEnum",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "ExcludingAutoGeneratedMatrixValues",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(global::TUnit.TestProject.MatrixTests.CountToTenEnum))
{
    Name = "enum",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests.CountToTenEnum, TestsBase`1"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("ExcludingAutoGeneratedMatrixValues", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.TestProject.MatrixTests.CountToTenEnum), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "boolean",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("ExcludingAutoGeneratedMatrixValues", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(global::TUnit.TestProject.MatrixTests.CountToTenEnum), typeof(bool) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.ExcludingAutoGeneratedMatrixValues(TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MatrixTests.CountToTenEnum>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.ExcludingAutoGeneratedMatrixValues(TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.MatrixTests.CountToTenEnum>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_ExcludingAutoGeneratedMatrixValues_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_ExcludingAutoGeneratedMatrixValues_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_Method1_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "Method1",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "Method1",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "Method1",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Method1", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Method1(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.Method1(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_Method1_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_Method1_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_Method2_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "Method2",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "Method2",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "Method2",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Method2", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Method2(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.Method2(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_Method2_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_Method2_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_Method3_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "Method3",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "Method3",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "Method3",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Method3", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Method3(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.Method3(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_Method3_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_Method3_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_Method4_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "Method4",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "Method4",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "Method4",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Method4", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Method4(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.Method4(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_Method4_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_Method4_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MatrixTests_Exclusion_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MatrixTests>
        {
            TestName = "Exclusion",
            TestClassType = typeof(global::TUnit.TestProject.MatrixTests),
            TestMethodName = "Exclusion",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MatrixDataSourceAttribute(),
                new global::TUnit.Core.MatrixExclusionAttribute(1, 1),
                new global::TUnit.Core.MatrixExclusionAttribute(2, 2),
                new global::TUnit.Core.MatrixExclusionAttribute(3, 3),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MatrixDataSourceAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(int),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "int",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "Exclusion",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Exclusion", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "item2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("Exclusion", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(int) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MatrixTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MatrixTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MatrixTests, TestsBase`1"),
Name = "MatrixTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MatrixTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MatrixTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.Exclusion(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 2:
                        await instance.Exclusion(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MatrixTests_Exclusion_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MatrixTests), new MatrixTests_Exclusion_TestSource_GUID());
    }
}
