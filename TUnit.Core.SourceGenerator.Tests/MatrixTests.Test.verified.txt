[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MatrixTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MatrixTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
			..Tests6(sessionId),
			..Tests7(sessionId),
			..Tests8(sessionId),
			..Tests9(sessionId),
			..Tests10(sessionId),
			..Tests11(sessionId),
			..Tests12(sessionId),
			..Tests13(sessionId),
			..Tests14(sessionId),
			..Tests15(sessionId),
			..Tests16(sessionId),
			..Tests17(sessionId),
			..Tests18(sessionId),
			..Tests19(sessionId),
			..Tests20(sessionId),
			..Tests21(sessionId),
			..Tests22(sessionId),
			..Tests23(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS4:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS4:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "A";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS5:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS5:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS6:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS6:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS7:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS7:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests8(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS8:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS8:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests9(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS9:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS9:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests10(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS10:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS10:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests11(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "B";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS11:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS11:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests12(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS12:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS12:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests13(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS13:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS13:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests14(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS14:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS14:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests15(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS15:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS15:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests16(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS16:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS16:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests17(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "C";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS17:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS17:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests18(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS18:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS18:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests19(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS19:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS19:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests20(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS20:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS20:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests21(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS21:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS21:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests22(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS22:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS22:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests23(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "D";
			global::System.Int32 methodArg1 = 3;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS23:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_One(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 5,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS23:TUnit.TestProject.MatrixTests.MatrixTest_One(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_One", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_One",
				TestFilePath = @"",
				TestLineNumber = 5,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MatrixTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MatrixTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
			..Tests6(sessionId),
			..Tests7(sessionId),
			..Tests8(sessionId),
			..Tests9(sessionId),
			..Tests10(sessionId),
			..Tests11(sessionId),
			..Tests12(sessionId),
			..Tests13(sessionId),
			..Tests14(sessionId),
			..Tests15(sessionId),
			..Tests16(sessionId),
			..Tests17(sessionId),
			..Tests18(sessionId),
			..Tests19(sessionId),
			..Tests20(sessionId),
			..Tests21(sessionId),
			..Tests22(sessionId),
			..Tests23(sessionId),
			..Tests24(sessionId),
			..Tests25(sessionId),
			..Tests26(sessionId),
			..Tests27(sessionId),
			..Tests28(sessionId),
			..Tests29(sessionId),
			..Tests30(sessionId),
			..Tests31(sessionId),
			..Tests32(sessionId),
			..Tests33(sessionId),
			..Tests34(sessionId),
			..Tests35(sessionId),
			..Tests36(sessionId),
			..Tests37(sessionId),
			..Tests38(sessionId),
			..Tests39(sessionId),
			..Tests40(sessionId),
			..Tests41(sessionId),
			..Tests42(sessionId),
			..Tests43(sessionId),
			..Tests44(sessionId),
			..Tests45(sessionId),
			..Tests46(sessionId),
			..Tests47(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS4:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS4:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS5:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS5:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests6(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS6:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS6:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests7(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS7:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS7:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests8(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS8:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS8:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests9(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS9:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS9:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests10(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS10:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS10:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests11(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS11:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS11:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests12(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS12:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS12:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests13(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS13:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS13:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests14(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS14:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS14:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests15(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS15:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS15:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests16(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS16:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS16:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests17(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS17:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS17:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests18(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS18:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS18:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests19(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS19:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS19:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests20(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS20:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS20:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests21(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS21:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS21:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests22(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS22:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS22:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests23(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS23:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS23:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests24(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS24:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS24:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests25(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS25:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS25:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests26(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS26:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS26:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests27(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS27:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS27:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests28(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS28:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS28:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests29(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS29:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS29:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests30(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS30:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS30:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests31(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 1;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS31:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS31:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests32(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS32:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS32:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests33(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS33:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS33:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests34(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS34:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS34:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests35(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS35:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS35:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests36(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS36:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS36:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests37(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS37:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS37:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests38(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS38:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS38:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests39(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 2;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS39:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS39:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests40(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS40:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS40:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests41(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 1;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS41:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS41:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests42(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS42:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS42:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests43(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 2;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS43:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS43:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests44(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS44:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS44:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests45(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 3;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS45:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS45:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests46(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS46:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS46:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests47(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::System.Int32 methodArg1 = 3;
			global::System.Int32 methodArg2 = 4;
			global::System.Boolean methodArg3 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS47:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2, methodArg3],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Two(methodArg, methodArg1, methodArg2, methodArg3)),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS47:TUnit.TestProject.MatrixTests.MatrixTest_Two(System.Int32,System.Int32,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Two", 0, [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "MatrixTest_Two",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MatrixTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new MatrixTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::TUnit.TestProject.TestEnum methodArg1 = (global::TUnit.TestProject.TestEnum)(-1);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Enum(methodArg, methodArg1)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS0:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)],
				TestName = "MatrixTest_Enum",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 1;
			global::TUnit.TestProject.TestEnum methodArg1 = global::TUnit.TestProject.TestEnum.One;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Enum(methodArg, methodArg1)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS1:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)],
				TestName = "MatrixTest_Enum",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::TUnit.TestProject.TestEnum methodArg1 = (global::TUnit.TestProject.TestEnum)(-1);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Enum(methodArg, methodArg1)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS2:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)],
				TestName = "MatrixTest_Enum",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.MatrixTests);
			var methodInfo = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 2;
			global::TUnit.TestProject.TestEnum methodArg1 = global::TUnit.TestProject.TestEnum.One;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MatrixTests>(() => 
			new global::TUnit.TestProject.MatrixTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.MatrixTests>
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest_Enum(methodArg, methodArg1)),
				TestFilePath = @"",
				TestLineNumber = 24,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TL-ARGS3:TUnit.TestProject.MatrixTests.MatrixTest_Enum(System.Int32,TUnit.TestProject.TestEnum):0",
				TestClass = typeof(global::TUnit.TestProject.MatrixTests),
				ReturnType = typeof(global::TUnit.TestProject.MatrixTests).GetMethod("MatrixTest_Enum", 0, [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::TUnit.TestProject.TestEnum)],
				TestName = "MatrixTest_Enum",
				TestFilePath = @"",
				TestLineNumber = 24,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]