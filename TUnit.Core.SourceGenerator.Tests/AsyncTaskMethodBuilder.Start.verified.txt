// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class GenericMethodTests_AggregateBy_HasExpectedOutput_TestSource_4444ec5001bc4380bcb646744dda71d2 : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.GenericMethodTests>
        {
            TestName = "AggregateBy_HasExpectedOutput",
            TestClassType = typeof(global::TUnit.TestProject.GenericMethodTests),
            TestMethodName = "AggregateBy_HasExpectedOutput",
            Categories = global::System.Array.Empty<string>(),
            TimeoutMs = null,
            RetryCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData"),
                new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_Numeric_TestData")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_Numeric_TestData();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(ConvertToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(ConvertToObjectArray(result));
                            }
                        }
                        object?[]? ConvertToObjectArray(object? item)
                        {
                            if (item == null) return new object?[] { null };
                            if (item is object?[] objArray) return objArray;
                            // Handle ValueTuples
                            var type = item.GetType();
                            if (type.Name.StartsWith("ValueTuple"))
                            {
                                // Use reflection to extract tuple fields
                                var fields = type.GetFields();
                                var values = new object?[fields.Length];
                                for (int i = 0; i < fields.Length; i++)
                                {
                                    values[i] = fields[i].GetValue(item);
                                }
                                return values;
                            }
                            // Handle regular arrays
                            if (type.IsArray)
                            {
                                var array = (Array)item;
                                var result = new object?[array.Length];
                                array.CopyTo(result, 0);
                                return result;
                            }
                            // Single value
                            return new[] { item };
                        }
                        return Factory();
                    },
                },
                new global::TUnit.Core.MethodDataSourceAttribute("AggregateBy_String_TestData")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.GenericMethodTests.AggregateBy_String_TestData();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(ConvertToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(ConvertToObjectArray(result));
                            }
                        }
                        object?[]? ConvertToObjectArray(object? item)
                        {
                            if (item == null) return new object?[] { null };
                            if (item is object?[] objArray) return objArray;
                            // Handle ValueTuples
                            var type = item.GetType();
                            if (type.Name.StartsWith("ValueTuple"))
                            {
                                // Use reflection to extract tuple fields
                                var fields = type.GetFields();
                                var values = new object?[fields.Length];
                                for (int i = 0; i < fields.Length; i++)
                                {
                                    values[i] = fields[i].GetValue(item);
                                }
                                return values;
                            }
                            // Handle regular arrays
                            if (type.IsArray)
                            {
                                var array = (Array)item;
                                var result = new object?[array.Length];
                                array.CopyTo(result, 0);
                                return result;
                            }
                            // Single value
                            return new[] { item };
                        }
                        return Factory();
                    },
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(global::System.Object),
                typeof(global::System.Object),
                typeof(global::System.Object),
                typeof(global::System.Object),
                typeof(global::System.Object),
                typeof(global::System.Object),
            },
            TestMethodParameterTypes = new string[]
            {
                "object",
                "object",
                "object",
                "object",
                "object",
                "object",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata{Type = typeof(global::TUnit.TestProject.GenericMethodTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.GenericMethodTests, TestsBase`1"),Name = "AggregateBy_HasExpectedOutput",GenericTypeCount = 3,ReturnType = typeof(void),ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),Parameters = [new global::TUnit.Core.ParameterMetadata<object>{Name = "source",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Collections.Generic.IEnumerable<>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(0, true, "TSource")),ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<object>{Name = "keySelector",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Func<,>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(0, true, "TSource"), global::TUnit.Core.TypeReference.CreateGenericParameter(1, true, "TKey")),ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<object>{Name = "seedSelector",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Func<,>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(1, true, "TKey"), global::TUnit.Core.TypeReference.CreateGenericParameter(2, true, "TAccumulate")),ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<object>{Name = "func",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Func<,,>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(2, true, "TAccumulate"), global::TUnit.Core.TypeReference.CreateGenericParameter(0, true, "TSource"), global::TUnit.Core.TypeReference.CreateGenericParameter(2, true, "TAccumulate")),ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<object>{Name = "comparer",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Collections.Generic.IEqualityComparer<>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(1, true, "TKey")),ReflectionInfo = null!,},new global::TUnit.Core.ParameterMetadata<object>{Name = "expected",TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Collections.Generic.IEnumerable<>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateConstructedGeneric("System.Collections.Generic.KeyValuePair<,>, System.Private.CoreLib", global::TUnit.Core.TypeReference.CreateGenericParameter(1, true, "TKey"), global::TUnit.Core.TypeReference.CreateGenericParameter(2, true, "TAccumulate"))),ReflectionInfo = null!,},],Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.GenericMethodTests", () => new global::TUnit.Core.ClassMetadata{Parent = null,Type = typeof(global::TUnit.TestProject.GenericMethodTests),TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.GenericMethodTests, TestsBase`1"),Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata{Name = "TestsBase`1",}),Name = "GenericMethodTests",Namespace = "TUnit.TestProject",Parameters = [],Properties = [],}),},
            Hooks = new global::TUnit.Core.TestHooks
            {
                BeforeClass = global::System.Array.Empty<global::TUnit.Core.HookMetadata>(),
                AfterClass = global::System.Array.Empty<global::TUnit.Core.HookMetadata>(),
                BeforeTest = global::System.Array.Empty<global::TUnit.Core.HookMetadata>(),
                AfterTest = global::System.Array.Empty<global::TUnit.Core.HookMetadata>()
            },
            GenericMethodInfo = new global::TUnit.Core.GenericMethodInfo
            {
                ParameterNames = new string[]
                {
                    "TSource",
                    "TKey",
                    "TAccumulate",
                },
                Constraints = new global::TUnit.Core.GenericParameterConstraints[]
                {
                    new global::TUnit.Core.GenericParameterConstraints
                    {
                        ParameterName = "TSource",
                        HasDefaultConstructorConstraint = false,
                        InterfaceConstraints = new global::System.Type[]
                        {
                        }
                    },
                    new global::TUnit.Core.GenericParameterConstraints
                    {
                        ParameterName = "TKey",
                        HasDefaultConstructorConstraint = false,
                        InterfaceConstraints = new global::System.Type[]
                        {
                        }
                    },
                    new global::TUnit.Core.GenericParameterConstraints
                    {
                        ParameterName = "TAccumulate",
                        HasDefaultConstructorConstraint = false,
                        InterfaceConstraints = new global::System.Type[]
                        {
                        }
                    },
                },
                ParameterPositions = new int[]
                {
                }
            },
            CreateInstance = async (context) =>
            {
                return new global::TUnit.TestProject.GenericMethodTests();
            },
            InvokeTest = async (instance, args, context, cancellationToken) =>
            {
                // Get resolved generic types from the test context parameter
                var resolvedTypes = context?.TestDetails?.DataCombination?.ResolvedGenericTypes;
                // Get the method to invoke
                var instanceType = instance.GetType();
                var methodInfo = instanceType.GetMethod("AggregateBy_HasExpectedOutput", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                // Construct generic method if needed
                if (methodInfo.IsGenericMethodDefinition && resolvedTypes != null)
                {
                    var methodTypeArgs = new global::System.Type[]
                    {
                        resolvedTypes["TSource"],
                        resolvedTypes["TKey"],
                        resolvedTypes["TAccumulate"],
                    };
                    methodInfo = methodInfo.MakeGenericMethod(methodTypeArgs);
                }
                // Prepare method arguments
                var methodArgs = args;
                // Invoke the method
                var result = methodInfo.Invoke(instance, methodArgs);
                if (result is Task task)
                {
                    await task;
                }
            },
        };
        metadata.SetDataCombinationGenerator(() => GenerateCombinations_a8efc11b(testSessionId));
        tests.Add(metadata);
        return tests;
    }
    private async IAsyncEnumerable<TestDataCombination> GenerateCombinations_a8efc11b(string testSessionId)
    {
        // Debug: Found 0 Arguments attributes at compile time
        // Debug: Found 0 typed data sources (async/sync) at compile time
        // Debug: Found 0 untyped data sources at compile time
        yield return new TestDataCombination
        {
            DataGenerationException = new System.InvalidOperationException(
                "Generic tests require typed data sources for type inference. " +
                "Use [Arguments] or typed data sources that inherit from AsyncDataSourceGeneratorAttribute<T>."),
            DisplayName = "[GENERIC TYPE INFERENCE FAILED: No typed data sources]"
        };
    }
}
internal static class GenericMethodTests_AggregateBy_HasExpectedOutput_ModuleInitializer_4444ec5001bc4380bcb646744dda71d2
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(new GenericMethodTests_AggregateBy_HasExpectedOutput_TestSource_4444ec5001bc4380bcb646744dda71d2());
    }
}
