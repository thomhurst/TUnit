// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class Tests_NullTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.Bugs._1692.Tests>
        {
            TestName = "NullTest",
            TestClassType = typeof(global::TUnit.TestProject.Bugs._1692.Tests),
            TestMethodName = "NullTest",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(null),
                new global::TUnit.Core.ArgumentsAttribute(null),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(null),
                new global::TUnit.Core.ArgumentsAttribute(),
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(string),
            },
            TestMethodParameterTypes = new string[]
            {
                "string",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.Bugs._1692.Tests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1692.Tests, TestsBase`1"),
Name = "NullTest",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "t",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = true,
    ReflectionInfo = typeof(global::TUnit.TestProject.Bugs._1692.Tests).GetMethod("NullTest", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string) }, null)!.GetParameters()[0]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.Bugs._1692.Tests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.Bugs._1692.Tests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.Bugs._1692.Tests, TestsBase`1"),
Name = "Tests",
Namespace = "TUnit.TestProject.Bugs._1692",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.Bugs._1692.Tests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.Bugs._1692.Tests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.NullTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        await instance.NullTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class Tests_NullTest_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.Bugs._1692.Tests), new Tests_NullTest_TestSource_GUID());
    }
}
