// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    #if NET8_0_OR_GREATER
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property1>k__BackingField")]
    private static extern ref (int, string, bool) GetProperty1BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property2>k__BackingField")]
    private static extern ref (int, string, bool) GetProperty2BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property3>k__BackingField")]
    private static extern ref (int Number, string Word, bool Flag) GetProperty3BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property4>k__BackingField")]
    private static extern ref (int Number, string Word, bool Flag) GetProperty4BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    #endif
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
        {
            TestName = "DataSource_TupleMethod",
            TestClassType = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
            TestMethodName = "DataSource_TupleMethod",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property1",
                    PropertyType = typeof((int, string, bool)),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property2",
                    PropertyType = typeof((int, string, bool)),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property3",
                    PropertyType = typeof((int Number, string Word, bool Flag)),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property4",
                    PropertyType = typeof((int Number, string Word, bool Flag)),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property1",
                    PropertyType = typeof((int, string, bool)),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty1BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = ((int, string, bool))value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property2",
                    PropertyType = typeof((int, string, bool)),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty2BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = ((int, string, bool))value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property3",
                    PropertyType = typeof((int Number, string Word, bool Flag)),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty3BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = ((int Number, string Word, bool Flag))value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property4",
                    PropertyType = typeof((int Number, string Word, bool Flag)),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty4BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = ((int Number, string Word, bool Flag))value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(string),
                typeof(bool),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "string",
                "bool",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassTupleDataSourceDrivenTests, TestsBase`1"),
Name = "DataSource_TupleMethod",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "value2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[1]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "value3",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[2]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassTupleDataSourceDrivenTests, TestsBase`1"),
Name = "ClassTupleDataSourceDrivenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(string))
{
    Name = "value2",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[1]
},
new global::TUnit.Core.ParameterMetadata(typeof(bool))
{
    Name = "value3",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[2]
},
},
Properties = new global::TUnit.Core.PropertyMetadata[]
{
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property1"),
    Type = typeof((int, string, bool)),
    Name = "Property1",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property1,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property2"),
    Type = typeof((int, string, bool)),
    Name = "Property2",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property2,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property3"),
    Type = typeof((int Number, string Word, bool Flag)),
    Name = "Property3",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property3,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property4"),
    Type = typeof((int Number, string Word, bool Flag)),
    Name = "Property4",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property4,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
},
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]))
                {
                    Property1 = default((int, string, bool)),
                    Property2 = default((int, string, bool)),
                    Property3 = default((int Number, string Word, bool Flag)),
                    Property4 = default((int Number, string Word, bool Flag)),
                };
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        typedInstance.DataSource_TupleMethod(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
                await Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 3:
                        instance.DataSource_TupleMethod(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
                await Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests), new ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_TestSource_GUID());
    }
}
