[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassTupleDataSourceDrivenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassTupleDataSourceDrivenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
				Name = "DataSource_TupleMethod",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
					new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ClassTupleDataSourceDrivenTests",
						Attributes = [],
					}),
					Name = "ClassTupleDataSourceDrivenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass),
						new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
						new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Properties = 
					[
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof((int, string, bool)),
							Name = "Property1",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof((int, string, bool)),
							Name = "Property2",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof((int Number, string Word, bool Flag)),
							Name = "Property3",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof((int Number, string Word, bool Flag)),
							Name = "Property4",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
							],
						},
					],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.ClassTupleDataSourceDrivenTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				var classArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()());
				int classArg = classArgTuples.Item1;
				string classArg1 = classArgTuples.Item2;
				bool classArg2 = classArgTuples.Item3;
				classInstanceArguments = [classArg, classArg1, classArg2];
				(int, string, bool) propertyArg = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
				(int Number, string Word, bool Flag) propertyArg1 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();
				(int, string, bool) propertyArg2 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
				(int Number, string Word, bool Flag) propertyArg3 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();

				var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()());
				int methodArg = methodArgTuples.Item1;
				string methodArg1 = methodArgTuples.Item2;
				bool methodArg2 = methodArgTuples.Item3;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>(() => 
				new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(classArg, classArg1, classArg2)
				{
					Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg),
					Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg1),
					Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg2),
					Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg3),
				}
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
					TestClassArguments = [classArg, classArg1, classArg2],
					TestMethodArguments = [methodArg, methodArg1, methodArg2],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
						["Property1"] = propertyArg,
						["Property2"] = propertyArg1,
						["Property3"] = propertyArg2,
						["Property4"] = propertyArg3,
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
					TestFilePath = @"",
					TestLineNumber = 27,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
					MethodName = $"DataSource_TupleMethod",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassTupleDataSourceDrivenTests.DataSource_TupleMethod failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 27,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
					Name = "DataSource_TupleMethod",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
						new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "ClassTupleDataSourceDrivenTests",
							Attributes = [],
						}),
						Name = "ClassTupleDataSourceDrivenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new EngineTest(Pass),
							new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
							new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "value",
								Attributes = [],
								ReflectionInfo = null!,
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<string>
							{
								Name = "value2",
								Attributes = [],
								ReflectionInfo = null!,
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
							{
								Name = "value3",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Properties = 
						[
new global::TUnit.Core.SourceGeneratedPropertyInformation
							{
								Type = typeof((int, string, bool)),
								Name = "Property1",
								IsStatic = false,
								Attributes = 
								[
									new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
								],
							},
new global::TUnit.Core.SourceGeneratedPropertyInformation
							{
								Type = typeof((int, string, bool)),
								Name = "Property2",
								IsStatic = false,
								Attributes = 
								[
									new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
								],
							},
new global::TUnit.Core.SourceGeneratedPropertyInformation
							{
								Type = typeof((int Number, string Word, bool Flag)),
								Name = "Property3",
								IsStatic = false,
								Attributes = 
								[
									new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
								],
							},
new global::TUnit.Core.SourceGeneratedPropertyInformation
							{
								Type = typeof((int Number, string Word, bool Flag)),
								Name = "Property4",
								IsStatic = false,
								Attributes = 
								[
									new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
								],
							},
						],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.ClassTupleDataSourceDrivenTests? classInstance = null;
					object?[]? classInstanceArguments = null;
					var classArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()());
					int classArg = classArgTuples.Item1;
					string classArg1 = classArgTuples.Item2;
					bool classArg2 = classArgTuples.Item3;
					classInstanceArguments = [classArg, classArg1, classArg2];
					(int, string, bool) propertyArg = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
					(int Number, string Word, bool Flag) propertyArg1 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();
					(int, string, bool) propertyArg2 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
					(int Number, string Word, bool Flag) propertyArg3 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();

					var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()());
					int methodArg = methodArgTuples.Item1;
					string methodArg1 = methodArgTuples.Item2;
					bool methodArg2 = methodArgTuples.Item3;
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>(() => 
					new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(classArg, classArg1, classArg2)
					{
						Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg),
						Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg1),
						Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg2),
						Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg3),
					}
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArg, methodArg1, methodArg2],
						TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
						{
							["Property1"] = propertyArg,
							["Property2"] = propertyArg1,
							["Property3"] = propertyArg2,
							["Property4"] = propertyArg3,
						},
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
						TestFilePath = @"",
						TestLineNumber = 27,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
						MethodName = $"DataSource_TupleMethod",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassTupleDataSourceDrivenTests.DataSource_TupleMethod failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 27,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
						Name = "DataSource_TupleMethod",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
							new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "value",
								Attributes = [],
								ReflectionInfo = null!,
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<string>
							{
								Name = "value2",
								Attributes = [],
								ReflectionInfo = null!,
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
							{
								Name = "value3",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "ClassTupleDataSourceDrivenTests",
								Attributes = [],
							}),
							Name = "ClassTupleDataSourceDrivenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new EngineTest(Pass),
								new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
								new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
							],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								},
								new global::TUnit.Core.SourceGeneratedParameterInformation<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								},
								new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								},
							],
							Properties = 
							[
new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof((int, string, bool)),
									Name = "Property1",
									IsStatic = false,
									Attributes = 
									[
										new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
									],
								},
new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof((int, string, bool)),
									Name = "Property2",
									IsStatic = false,
									Attributes = 
									[
										new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
									],
								},
new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof((int Number, string Word, bool Flag)),
									Name = "Property3",
									IsStatic = false,
									Attributes = 
									[
										new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
									],
								},
new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof((int Number, string Word, bool Flag)),
									Name = "Property4",
									IsStatic = false,
									Attributes = 
									[
										new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
									],
								},
							],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.ClassTupleDataSourceDrivenTests? classInstance = null;
						object?[]? classInstanceArguments = null;
						var classArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()());
						int classArg = classArgTuples.Item1;
						string classArg1 = classArgTuples.Item2;
						bool classArg2 = classArgTuples.Item3;
						classInstanceArguments = [classArg, classArg1, classArg2];
						(int, string, bool) propertyArg = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
						(int Number, string Word, bool Flag) propertyArg1 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();
						(int, string, bool) propertyArg2 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
						(int Number, string Word, bool Flag) propertyArg3 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();

						var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()());
						int methodArg = methodArgTuples.Item1;
						string methodArg1 = methodArgTuples.Item2;
						bool methodArg2 = methodArgTuples.Item3;
						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>(() => 
						new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(classArg, classArg1, classArg2)
						{
							Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg),
							Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg1),
							Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg2),
							Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg3),
						}
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
							TestClassArguments = [classArg, classArg1, classArg2],
							TestMethodArguments = [methodArg, methodArg1, methodArg2],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
								["Property1"] = propertyArg,
								["Property2"] = propertyArg1,
								["Property3"] = propertyArg2,
								["Property4"] = propertyArg3,
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
							TestFilePath = @"",
							TestLineNumber = 27,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
							MethodName = $"DataSource_TupleMethod",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassTupleDataSourceDrivenTests.DataSource_TupleMethod failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 27,
						});
					}
					return nodes;
				}
				private global::System.Collections.Generic.List<TestMetadata> Tests3(string sessionId)
				{
					global::System.Collections.Generic.List<TestMetadata> nodes = [];
					var classDataIndex = 0;
					var testMethodDataIndex = 0;
					try
					{
						var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
						{
							Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
							Name = "DataSource_TupleMethod",
							GenericTypeCount = 0,
							ReturnType = typeof(void),
							Attributes = 
							[
								new global::TUnit.Core.TestAttribute(),
								new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
								new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
							],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								},
								new global::TUnit.Core.SourceGeneratedParameterInformation<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								},
								new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								},
							],
							Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
							{
								Parent = null,
								Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
								Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ClassTupleDataSourceDrivenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
								{
									Name = "ClassTupleDataSourceDrivenTests",
									Attributes = [],
								}),
								Name = "ClassTupleDataSourceDrivenTests",
								Namespace = "TUnit.TestProject",
								Attributes = 
								[
									new EngineTest(Pass),
									new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
									new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
								],
								Parameters = 
								[
									new global::TUnit.Core.SourceGeneratedParameterInformation<int>
									{
										Name = "value",
										Attributes = [],
										ReflectionInfo = null!,
									},
									new global::TUnit.Core.SourceGeneratedParameterInformation<string>
									{
										Name = "value2",
										Attributes = [],
										ReflectionInfo = null!,
									},
									new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
									{
										Name = "value3",
										Attributes = [],
										ReflectionInfo = null!,
									},
								],
								Properties = 
								[
new global::TUnit.Core.SourceGeneratedPropertyInformation
									{
										Type = typeof((int, string, bool)),
										Name = "Property1",
										IsStatic = false,
										Attributes = 
										[
											new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
										],
									},
new global::TUnit.Core.SourceGeneratedPropertyInformation
									{
										Type = typeof((int, string, bool)),
										Name = "Property2",
										IsStatic = false,
										Attributes = 
										[
											new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
										],
									},
new global::TUnit.Core.SourceGeneratedPropertyInformation
									{
										Type = typeof((int Number, string Word, bool Flag)),
										Name = "Property3",
										IsStatic = false,
										Attributes = 
										[
											new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
										],
									},
new global::TUnit.Core.SourceGeneratedPropertyInformation
									{
										Type = typeof((int Number, string Word, bool Flag)),
										Name = "Property4",
										IsStatic = false,
										Attributes = 
										[
											new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
										],
									},
								],
							}),
};

							var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
							var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
							global::TUnit.TestProject.ClassTupleDataSourceDrivenTests? classInstance = null;
							object?[]? classInstanceArguments = null;
							var classArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()());
							int classArg = classArgTuples.Item1;
							string classArg1 = classArgTuples.Item2;
							bool classArg2 = classArgTuples.Item3;
							classInstanceArguments = [classArg, classArg1, classArg2];
							(int, string, bool) propertyArg = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
							(int Number, string Word, bool Flag) propertyArg1 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();
							(int, string, bool) propertyArg2 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod()();
							(int Number, string Word, bool Flag) propertyArg3 = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()();

							var methodArgTuples = global::System.TupleExtensions.ToTuple<int, string, bool>(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod()());
							int methodArg = methodArgTuples.Item1;
							string methodArg1 = methodArgTuples.Item2;
							bool methodArg2 = methodArgTuples.Item3;
							var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>(() => 
							new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(classArg, classArg1, classArg2)
							{
								Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg),
								Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<(int, string, bool)>(propertyArg1),
								Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg2),
								Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<(int Number, string Word, bool Flag)>(propertyArg3),
							}
							, sessionId, testBuilderContext);
							var resettableClassFactory = resettableClassFactoryDelegate();


							nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
								TestClassArguments = [classArg, classArg1, classArg2],
								TestMethodArguments = [methodArg, methodArg1, methodArg2],
								TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
								{
									["Property1"] = propertyArg,
									["Property2"] = propertyArg1,
									["Property3"] = propertyArg2,
									["Property4"] = propertyArg3,
								},
								CurrentRepeatAttempt = 0,
								RepeatLimit = 0,
								ResettableClassFactory = resettableClassFactory,
								TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_TupleMethod(methodArg, methodArg1, methodArg2)),
								TestFilePath = @"",
								TestLineNumber = 27,
								TestMethod = testInformation,
								TestBuilderContext = testBuilderContext,
							});
							resettableClassFactory = resettableClassFactoryDelegate();
							testBuilderContext = new();
							testBuilderContextAccessor.Current = testBuilderContext;
						}
						catch (global::System.Exception exception)
						{
							nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS1:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.ClassTupleDataSourceDrivenTests(int,string,bool).DataSource_TupleMethod(int,string,bool):0",
								MethodName = $"DataSource_TupleMethod",
								Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ClassTupleDataSourceDrivenTests.DataSource_TupleMethod failed to initialize", exception),
								TestFilePath = @"",
								TestLineNumber = 27,
							});
						}
						return nodes;
					}
				}

]