// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    #if NET8_0_OR_GREATER
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property1>k__BackingField")]
    private static extern ref global::System.ValueTuple<int, string, bool> GetProperty1BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property2>k__BackingField")]
    private static extern ref global::System.ValueTuple<int, string, bool> GetProperty2BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property3>k__BackingField")]
    private static extern ref global::System.ValueTuple<int, string, bool> GetProperty3BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Property4>k__BackingField")]
    private static extern ref global::System.ValueTuple<int, string, bool> GetProperty4BackingField(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests instance);
    #endif
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ClassTupleDataSourceDrivenTests>
        {
            TestName = "DataSource_TupleMethod",
            TestClassType = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
            TestMethodName = "DataSource_TupleMethod",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod"),
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property1",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("TupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.TupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    DataSource = new global::TUnit.Core.MethodDataSourceAttribute("NamedTupleMethod")
                    {
                        Factory = (dataGeneratorMetadata) =>
                        {
                            async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                            {
                                var result = global::TUnit.TestProject.ClassTupleDataSourceDrivenTests.NamedTupleMethod();
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                            return Factory();
                        }
                    },
                },
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property1",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty1BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = (global::System.ValueTuple<int, string, bool>)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property2",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty2BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = (global::System.ValueTuple<int, string, bool>)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property3",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty3BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = (global::System.ValueTuple<int, string, bool>)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "Property4",
                    PropertyType = typeof(global::System.ValueTuple<int, string, bool>),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetProperty4BackingField((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)instance) = (global::System.ValueTuple<int, string, bool>)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
            },
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 27,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)),
                Name = "DataSource_TupleMethod",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(int))
                    {
                        Name = "value",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(int)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "value2",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(string)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[1]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(bool))
                    {
                        Name = "value3",
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(bool)),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetMethod("DataSource_TupleMethod", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string), typeof(bool) }, null)!.GetParameters()[2]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ClassTupleDataSourceDrivenTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests),
                        TypeInfo = new global::TUnit.Core.ConcreteType(typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)),
                        Name = "ClassTupleDataSourceDrivenTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = new global::TUnit.Core.ParameterMetadata[]
                        {
                            new global::TUnit.Core.ParameterMetadata(typeof(int))
                            {
                                Name = "value",
                                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(int)),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[0]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(string))
                            {
                                Name = "value2",
                                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(string)),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[1]
                            },
                            new global::TUnit.Core.ParameterMetadata(typeof(bool))
                            {
                                Name = "value3",
                                TypeInfo = new global::TUnit.Core.ConcreteType(typeof(bool)),
                                IsNullable = false,
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetConstructor(new global::System.Type[] { typeof(int), typeof(string), typeof(bool) })!.GetParameters()[2]
                            }
                        },
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property1"),
                                Type = typeof(global::System.ValueTuple<int, string, bool>),
                                Name = "Property1",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property1,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            },
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property2"),
                                Type = typeof(global::System.ValueTuple<int, string, bool>),
                                Name = "Property2",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property2,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            },
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property3"),
                                Type = typeof(global::System.ValueTuple<int, string, bool>),
                                Name = "Property3",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property3,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            },
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests).GetProperty("Property4"),
                                Type = typeof(global::System.ValueTuple<int, string, bool>),
                                Name = "Property4",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.ClassTupleDataSourceDrivenTests)o).Property4,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.ClassTupleDataSourceDrivenTests(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]))
                {
                    Property1 = default(global::System.ValueTuple<int, string, bool>),
                    Property2 = default(global::System.ValueTuple<int, string, bool>),
                    Property3 = default(global::System.ValueTuple<int, string, bool>),
                    Property4 = default(global::System.ValueTuple<int, string, bool>),
                };
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 3:
                        instance.DataSource_TupleMethod(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ClassTupleDataSourceDrivenTests), new ClassTupleDataSourceDrivenTests_DataSource_TupleMethod_TestSource_GUID());
    }
}
