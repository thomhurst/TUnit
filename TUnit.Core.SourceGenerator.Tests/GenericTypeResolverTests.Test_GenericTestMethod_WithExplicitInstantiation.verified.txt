// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class TestClass_GenericTestMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        // Create generic metadata with concrete type registrations
        var genericMetadata = new global::TUnit.Core.GenericTestMetadata
        {
            TestName = "GenericTestMethod",
            TestClassType = typeof(global::TUnit.TestProject.TestClass),
            TestMethodName = "GenericTestMethod",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int)),
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(string)),
                new global::TUnit.Core.TestAttribute()
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "GenericTestMethod",
GenericTypeCount = 1,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.TestClass", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "TestClass",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) =>
            {
                return new global::TUnit.TestProject.TestClass();
            },
            TestInvoker = async (instance, args) =>
            {
                var instanceType = instance.GetType();
                var method = instanceType.GetMethod("GenericTestMethod", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                if (method == null)
                {
                    throw new System.InvalidOperationException($"Method 'GenericTestMethod' not found on type {instanceType.FullName}");
                }
                // Make the method generic if it has type parameters
                if (method.IsGenericMethodDefinition)
                {
                    // Use the resolved generic types from the test context
                    var testContext = global::TUnit.Core.TestContext.Current;
                    var resolvedTypes = testContext?.TestDetails?.MethodGenericArguments;
                    if (resolvedTypes != null && resolvedTypes.Length > 0)
                    {
                        // Use the pre-resolved generic types
                        method = method.MakeGenericMethod(resolvedTypes);
                    }
                    else
                    {
                        // Fallback: infer type arguments from the actual argument types
                        var typeArgs = new System.Type[1];
                        for (int i = 0; i < typeArgs.Length && i < args.Length; i++)
                        {
                            typeArgs[i] = args[i]?.GetType() ?? typeof(object);
                        }
                        method = method.MakeGenericMethod(typeArgs);
                    }
                }
                // Prepare method arguments
                var methodArgs = new object?[args.Length];
                args.CopyTo(methodArgs, 0);
                // Invoke the method
                var result = method.Invoke(instance, methodArgs);
            },
            ConcreteInstantiations = new global::System.Collections.Generic.Dictionary<string, global::TUnit.Core.TestMetadata>
            {
                [(typeof(int).FullName ?? typeof(int).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.TestClass>
                {
                    TestName = "GenericTestMethod<int>",
                    TestClassType = typeof(global::TUnit.TestProject.TestClass),
                    TestMethodName = "GenericTestMethod",
                    GenericMethodTypeArguments = new global::System.Type[] { typeof(int)},
                    TimeoutMs = null,
                    RetryCount = 0,
                    RepeatCount = 0,
                    CanRunInParallel = true,
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int)),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(string)),
                        new global::TUnit.Core.TestAttribute()
                    ],
                    DataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                    },
                    ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                    },
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    ParameterTypes = new global::System.Type[]
                    {
                    },
                    FilePath = @"",
                    LineNumber = 7,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "GenericTestMethod",
GenericTypeCount = 1,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.TestClass", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "TestClass",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.TestClass();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.TestClass)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.GenericTestMethod<int>());
                    }
                }
                ,
                [(typeof(string).FullName ?? typeof(string).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.TestClass>
                {
                    TestName = "GenericTestMethod<string>",
                    TestClassType = typeof(global::TUnit.TestProject.TestClass),
                    TestMethodName = "GenericTestMethod",
                    GenericMethodTypeArguments = new global::System.Type[] { typeof(string)},
                    TimeoutMs = null,
                    RetryCount = 0,
                    RepeatCount = 0,
                    CanRunInParallel = true,
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int)),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(string)),
                        new global::TUnit.Core.TestAttribute()
                    ],
                    DataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                    },
                    ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
                    {
                    },
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    ParameterTypes = new global::System.Type[]
                    {
                    },
                    FilePath = @"",
                    LineNumber = 7,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "GenericTestMethod",
GenericTypeCount = 1,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.TestClass", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.TestClass),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.TestClass, GenericTypeResolverTests"),
Name = "TestClass",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.TestClass();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.TestClass)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.GenericTestMethod<string>());
                    }
                }
                ,
            }
        };
        genericMetadata.TestSessionId = testSessionId;
        tests.Add(genericMetadata);
        return tests;
    }
}
internal static class TestClass_GenericTestMethod_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.TestClass), new TestClass_GenericTestMethod_TestSource_GUID());
    }
}
