[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
				TestFilePath = @"",
				TestLineNumber = 12,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.DisplayNameAttribute("A super important test!")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test:0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Test",
				TestFilePath = @"",
				TestLineNumber = 12,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test2", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test2:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2()),
				TestFilePath = @"",
				TestLineNumber = 19,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.DisplayNameAttribute("Another super important test!")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test2:0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test2", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Test2",
				TestFilePath = @"",
				TestLineNumber = 19,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test3", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "foo";
			global::System.Int32 methodArg1 = 1;
			global::System.Boolean methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.CustomDisplayNameTests.Test3(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 26,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute("foo")
{
    
}, new global::TUnit.Core.ArgumentsAttribute("bar")
{
    
}, new global::TUnit.Core.DisplayNameAttribute("Test with: $value1 $value2 $value3!")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.CustomDisplayNameTests.Test3(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test3", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "Test3",
				TestFilePath = @"",
				TestLineNumber = 26,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test3", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "bar";
			global::System.Int32 methodArg1 = 2;
			global::System.Boolean methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.CustomDisplayNameTests.Test3(System.String,System.Int32,System.Boolean):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg, methodArg1, methodArg2],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg, methodArg1, methodArg2)),
				TestFilePath = @"",
				TestLineNumber = 26,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute("foo")
{
    
}, new global::TUnit.Core.ArgumentsAttribute("bar")
{
    
}, new global::TUnit.Core.DisplayNameAttribute("Test with: $value1 $value2 $value3!")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.CustomDisplayNameTests.Test3(System.String,System.Int32,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "Test3", 0, [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String), typeof(global::System.Int32), typeof(global::System.Boolean)],
				TestName = "Test3",
				TestFilePath = @"",
				TestLineNumber = 26,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "MethodDataSourceTest", 0, [typeof(global::System.String)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = global::TUnit.TestProject.CustomDisplayNameTests.Method();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.CustomDisplayNameTests.MethodDataSourceTest(System.String):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MethodDataSourceTest(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 36,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.MethodDataSourceAttribute("Method")
{
    
}, new global::TUnit.Core.DisplayNameAttribute("Test using MethodDataSource")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.CustomDisplayNameTests.MethodDataSourceTest(System.String):0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "MethodDataSourceTest", 0, [typeof(global::System.String)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String)],
				TestName = "MethodDataSourceTest",
				TestFilePath = @"",
				TestLineNumber = 36,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "PasswordTest", 0, [typeof(global::System.String)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var methodDataAttribute = new global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator()
{
    
};

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
				new global::TUnit.TestProject.CustomDisplayNameTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
				{
					TestId = $"global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.CustomDisplayNameTests.PasswordTest(System.String):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArgGeneratedData],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.PasswordTest(methodArgGeneratedData)),
					TestFilePath = @"",
					TestLineNumber = 44,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator()
{
    
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.CustomDisplayNameTests.PasswordTest(System.String):0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "PasswordTest", 0, [typeof(global::System.String)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String)],
				TestName = "PasswordTest",
				TestFilePath = @"",
				TestLineNumber = 44,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "SameClassConstantTest", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.SameClassConstantTest:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.SameClassConstantTest()),
				TestFilePath = @"",
				TestLineNumber = 51,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.SameClassConstantTest:0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "SameClassConstantTest", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "SameClassConstantTest",
				TestFilePath = @"",
				TestLineNumber = 51,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "DifferentClassConstantTest", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.DifferentClassConstantTest:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DifferentClassConstantTest()),
				TestFilePath = @"",
				TestLineNumber = 58,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.DifferentClassConstantTest:0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "DifferentClassConstantTest", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "DifferentClassConstantTest",
				TestFilePath = @"",
				TestLineNumber = 58,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "NestedClassConstantTest", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => 
			new global::TUnit.TestProject.CustomDisplayNameTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.NestedClassConstantTest:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NestedClassConstantTest()),
				TestFilePath = @"",
				TestLineNumber = 65,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.NestedClassConstantTest:0",
				TestClass = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.CustomDisplayNameTests), "NestedClassConstantTest", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "NestedClassConstantTest",
				TestFilePath = @"",
				TestLineNumber = 65,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]