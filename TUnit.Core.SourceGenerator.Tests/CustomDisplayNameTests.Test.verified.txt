// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "Test",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							14,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute("A super important test!"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"A super important test!",
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test:0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 14,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.Test failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 14,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "Test"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "Test2",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test2",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							21,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute("Another super important test!"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test2",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"Another super important test!",
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test2:0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 21,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2()),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.Test2:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.Test2 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 21,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "Test2"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "Test3",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							28,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("foo", 1, true),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "foo", 1, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("bar", 2, false),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "bar", 2, false },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute("Test with: $value1 $value2 $value3!"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"Test with: $value1 $value2 $value3!",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value1",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "foo";
			int methodArg1 = 1;
			bool methodArg2 = true;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.CustomDisplayNameTests.Test3(string,int,bool):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg, methodArg1, methodArg2)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.CustomDisplayNameTests.Test3(string,int,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.Test3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "Test3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "Test3",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							28,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("foo", 1, true),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "foo", 1, true },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute("bar", 2, false),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							new object[] { "bar", 2, false },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute("Test with: $value1 $value2 $value3!"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "Test3",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"Test with: $value1 $value2 $value3!",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value1",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = "bar";
			int methodArg1 = 2;
			bool methodArg2 = false;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.CustomDisplayNameTests.Test3(string,int,bool):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg, methodArg1, methodArg2)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "Test3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.CustomDisplayNameTests.Test3(string,int,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.Test3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 28,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "Test3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "MethodDataSourceTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MethodDataSourceTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							38,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("Method"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MethodDataSourceTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"Method",
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute("Test using MethodDataSource"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MethodDataSourceTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"Test using MethodDataSource",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "foo",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MethodDataSourceTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			string methodArg = global::TUnit.TestProject.CustomDisplayNameTests.Method();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.CustomDisplayNameTests.MethodDataSourceTest(string):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 38,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MethodDataSourceTest(methodArg)),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MethodDataSourceTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.CustomDisplayNameTests.MethodDataSourceTest(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.MethodDataSourceTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 38,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "MethodDataSourceTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "PasswordTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "PasswordTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							46,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "password",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "PasswordTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "password",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				string methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
				{
					TestId = $"global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.CustomDisplayNameTests.PasswordTest(string):0",
					MethodMetadata = testInformation,
					RepeatCount = 0,
					TestFilePath = @"",
					TestLineNumber = 46,
					TestClassFactory = () => resettableClassFactory.Value,
					TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.PasswordTest(methodArg)),
					ClassArgumentsProvider = () => new object?[] {  },
					MethodArgumentsProvider = () => new object?[] { methodArg },
					PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
					{
					}
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "PasswordTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation
				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.CustomDisplayNameTests.PasswordTest(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.PasswordTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 46,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "PasswordTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "SameClassConstantTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "SameClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							53,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "SameClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"My test My constant",
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "SameClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.SameClassConstantTest:0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 53,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.SameClassConstantTest()),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "SameClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.SameClassConstantTest:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.SameClassConstantTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 53,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "SameClassConstantTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "DifferentClassConstantTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DifferentClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							60,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DifferentClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"My test My constant",
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DifferentClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.DifferentClassConstantTest:0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 60,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DifferentClassConstantTest()),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DifferentClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.DifferentClassConstantTest:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.DifferentClassConstantTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 60,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "DifferentClassConstantTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class CustomDisplayNameTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new CustomDisplayNameTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
				Name = "NestedClassConstantTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NestedClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"",
							67,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "NestedClassConstantTest",
						TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
						ConstructorArguments = new object?[]
						{
							"My test My constant",
						}
						,
					}

				],
				Parameters = [],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.CustomDisplayNameTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("CustomDisplayNameTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "CustomDisplayNameTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "CustomDisplayNameTests",
							}

						],
					}),
					Name = "CustomDisplayNameTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "CustomDisplayNameTests",
							TargetType = typeof(TUnit.TestProject.CustomDisplayNameTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = [],
					Properties = 
					[
						new global::TUnit.Core.PropertyMetadata
						{
							ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
							Type = typeof(int),
							Name = "Order",
							IsStatic = false,
							Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
							Attributes = [],
							ClassMetadata = null,
						}
						,
					],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = [],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NestedClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.CustomDisplayNameTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.CustomDisplayNameTests>(() => new global::TUnit.TestProject.CustomDisplayNameTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.CustomDisplayNameTests>
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.NestedClassConstantTest:0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 67,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.NestedClassConstantTest()),
				ClassArgumentsProvider = () => new object?[] {  },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "NestedClassConstantTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"TUnit.TestProject.CustomDisplayNameTests.NestedClassConstantTest:0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("CustomDisplayNameTests.NestedClassConstantTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 67,
				TestClassName = "CustomDisplayNameTests",
				TestMethodName = "NestedClassConstantTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}