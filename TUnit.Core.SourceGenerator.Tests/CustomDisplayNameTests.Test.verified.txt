// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_Test_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "Test",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "Test",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute("A super important test!"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 11,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "Test",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                await typedInstance.Test();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.Test();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_Test_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_Test_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_Test2_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "Test2",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "Test2",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute("Another super important test!"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 18,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "Test2",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                await typedInstance.Test2();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.Test2();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_Test2_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_Test2_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_Test3_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "Test3",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "Test3",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute("foo", 1, true),
                new global::TUnit.Core.ArgumentsAttribute("bar", 2, false),
                new global::TUnit.Core.DisplayNameAttribute("Test with: $value1 $value2 $value3!"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute("foo", 1, true),
                new global::TUnit.Core.ArgumentsAttribute("bar", 2, false),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 25,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "Test3",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "value1",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("Test3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(int))
                    {
                        Name = "value2",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("Test3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[1]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(bool))
                    {
                        Name = "value3",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("bool, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("Test3", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string), typeof(int), typeof(bool) }, null)!.GetParameters()[2]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                switch (args.Length)
                {
                    case 3:
                        await typedInstance.Test3(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 3:
                        await instance.Test3(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<int>(args[1]), TUnit.Core.Helpers.CastHelper.Cast<bool>(args[2]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 3 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_Test3_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_Test3_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_MethodDataSourceTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "MethodDataSourceTest",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "MethodDataSourceTest",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("Method"),
                new global::TUnit.Core.DisplayNameAttribute("Test using MethodDataSource"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("Method")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async global::System.Collections.Generic.IAsyncEnumerable<global::System.Func<global::System.Threading.Tasks.Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.CustomDisplayNameTests.Method();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 37,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "MethodDataSourceTest",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "foo",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("MethodDataSourceTest", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.MethodDataSourceTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.MethodDataSourceTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_MethodDataSourceTest_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_MethodDataSourceTest_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_TestParameterNamePrefixBug_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "TestParameterNamePrefixBug",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "TestParameterNamePrefixBug",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute("Test this($someValue, $someValueType)"),
                new global::TUnit.Core.ArgumentsAttribute(100, "Type1"),
                new global::TUnit.Core.ArgumentsAttribute(200, "Type2"),
                new global::TUnit.Core.ArgumentsAttribute(300, "Type1"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(100, "Type1"),
                new global::TUnit.Core.ArgumentsAttribute(200, "Type2"),
                new global::TUnit.Core.ArgumentsAttribute(300, "Type1"),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 45,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "TestParameterNamePrefixBug",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(int))
                    {
                        Name = "someValue",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("TestParameterNamePrefixBug", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string) }, null)!.GetParameters()[0]
                    },
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "someValueType",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("TestParameterNamePrefixBug", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(string) }, null)!.GetParameters()[1]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                switch (args.Length)
                {
                    case 2:
                        await typedInstance.TestParameterNamePrefixBug(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 2:
                        await instance.TestParameterNamePrefixBug(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), TUnit.Core.Helpers.CastHelper.Cast<string>(args[1]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 2 arguments, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_TestParameterNamePrefixBug_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_TestParameterNamePrefixBug_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_PasswordTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "PasswordTest",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "PasswordTest",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.TestProject.CustomDisplayNameTests.MyGenerator(),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 65,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "PasswordTest",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "password",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetMethod("PasswordTest", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.PasswordTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.PasswordTest(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_PasswordTest_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_PasswordTest_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_SameClassConstantTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "SameClassConstantTest",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "SameClassConstantTest",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 72,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "SameClassConstantTest",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                await typedInstance.SameClassConstantTest();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.SameClassConstantTest();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_SameClassConstantTest_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_SameClassConstantTest_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_DifferentClassConstantTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "DifferentClassConstantTest",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "DifferentClassConstantTest",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 79,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "DifferentClassConstantTest",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                await typedInstance.DifferentClassConstantTest();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.DifferentClassConstantTest();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_DifferentClassConstantTest_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_DifferentClassConstantTest_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class CustomDisplayNameTests_NestedClassConstantTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.CustomDisplayNameTests>
        {
            TestName = "NestedClassConstantTest",
            TestClassType = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
            TestMethodName = "NestedClassConstantTest",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.DisplayNameAttribute($"My test {"My constant"}"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 86,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                Name = "NestedClassConstantTest",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.CustomDisplayNameTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.CustomDisplayNameTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.CustomDisplayNameTests, TestsBase`1"),
                        Name = "CustomDisplayNameTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = new global::TUnit.Core.PropertyMetadata[]
                        {
                            new global::TUnit.Core.PropertyMetadata
                            {
                                ReflectionInfo = typeof(global::TUnit.TestProject.CustomDisplayNameTests).GetProperty("Order"),
                                Type = typeof(int),
                                Name = "Order",
                                IsStatic = false,
                                IsNullable = false,
                                Getter = o => ((global::TUnit.TestProject.CustomDisplayNameTests)o).Order,
                                ClassMetadata = null!,
                                ContainingTypeMetadata = null!
                            }
                        },
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.CustomDisplayNameTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.CustomDisplayNameTests)instance;
                await typedInstance.NestedClassConstantTest();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.NestedClassConstantTest();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class CustomDisplayNameTests_NestedClassConstantTest_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.CustomDisplayNameTests), new CustomDisplayNameTests_NestedClassConstantTest_TestSource_GUID());
    }
}
