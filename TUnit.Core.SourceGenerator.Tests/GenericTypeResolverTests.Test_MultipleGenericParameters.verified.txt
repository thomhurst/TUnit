// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class MultiGenericTestClass_TestMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        // Create generic metadata with concrete type registrations
        var genericMetadata = new global::TUnit.Core.GenericTestMetadata
        {
            TestName = "TestMethod",
            TestClassType = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
            TestMethodName = "TestMethod",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int), typeof(string)),
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(bool), typeof(double))
            ],
            DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 9,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                Name = "TestMethod",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.MultiGenericTestClass<,>", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                        Name = "MultiGenericTestClass",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) =>
            {
                var genericType = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>);
                if (typeArgs.Length > 0)
                {
                    var closedType = genericType.MakeGenericType(typeArgs);
                    return global::System.Activator.CreateInstance(closedType, args)!;
                }
                throw new global::System.InvalidOperationException("No type arguments provided for generic class");
            },
            ConcreteInstantiations = new global::System.Collections.Generic.Dictionary<string, global::TUnit.Core.TestMetadata>
            {
                [(typeof(int).FullName ?? typeof(int).Name) + "," + (typeof(string).FullName ?? typeof(string).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MultiGenericTestClass<int, string>>
                {
                    TestName = "TestMethod",
                    TestClassType = typeof(global::TUnit.TestProject.MultiGenericTestClass<int, string>),
                    TestMethodName = "TestMethod",
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.TestAttribute(),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int), typeof(string)),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(bool), typeof(double))
                    ],
                    DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    FilePath = @"",
                    LineNumber = 9,
                    InheritanceDepth = 0,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                        Name = "TestMethod",
                        GenericTypeCount = 0,
                        ReturnType = typeof(void),
                        ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.MultiGenericTestClass<,>", () => 
                        {
                            var classMetadata = new global::TUnit.Core.ClassMetadata
                            {
                                Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                                Name = "MultiGenericTestClass",
                                Namespace = "TUnit.TestProject",
                                Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
                                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                                Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                                Parent = null
                            };
                            foreach (var prop in classMetadata.Properties)
                            {
                                prop.ClassMetadata = classMetadata;
                                prop.ContainingTypeMetadata = classMetadata;
                            }
                            return classMetadata;
                        })
                    },
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.MultiGenericTestClass<int, string>();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.MultiGenericTestClass<int, string>)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.TestMethod());
                    }
                }
                ,
                [(typeof(bool).FullName ?? typeof(bool).Name) + "," + (typeof(double).FullName ?? typeof(double).Name)] = 
                new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MultiGenericTestClass<bool, double>>
                {
                    TestName = "TestMethod",
                    TestClassType = typeof(global::TUnit.TestProject.MultiGenericTestClass<bool, double>),
                    TestMethodName = "TestMethod",
                    Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
                    AttributeFactory = () =>
                    [
                        new global::TUnit.Core.TestAttribute(),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(int), typeof(string)),
                        new global::TUnit.Core.GenerateGenericTestAttribute(typeof(bool), typeof(double))
                    ],
                    DataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
                    PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
                    PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
                    FilePath = @"",
                    LineNumber = 9,
                    InheritanceDepth = 0,
                    TestSessionId = testSessionId,
                    MethodMetadata = new global::TUnit.Core.MethodMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                        TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                        Name = "TestMethod",
                        GenericTypeCount = 0,
                        ReturnType = typeof(void),
                        ReturnTypeInfo = new global::TUnit.Core.ConcreteType(typeof(void)),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.MultiGenericTestClass<,>", () => 
                        {
                            var classMetadata = new global::TUnit.Core.ClassMetadata
                            {
                                Type = typeof(global::TUnit.TestProject.MultiGenericTestClass<,>),
                                TypeInfo = new global::TUnit.Core.ConstructedGeneric(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), [new global::TUnit.Core.GenericParameter(0, false, "T1"), new global::TUnit.Core.GenericParameter(1, false, "T2")]),
                                Name = "MultiGenericTestClass",
                                Namespace = "TUnit.TestProject",
                                Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
                                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                                Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                                Parent = null
                            };
                            foreach (var prop in classMetadata.Properties)
                            {
                                prop.ClassMetadata = classMetadata;
                                prop.ContainingTypeMetadata = classMetadata;
                            }
                            return classMetadata;
                        })
                    },
                    InstanceFactory = (typeArgs, args) =>
                    {
                        return new global::TUnit.TestProject.MultiGenericTestClass<bool, double>();
                    },
                    InvokeTypedTest = async (instance, args, cancellationToken) =>
                    {
                        var typedInstance = (global::TUnit.TestProject.MultiGenericTestClass<bool, double>)instance;
                        await global::TUnit.Core.AsyncConvert.Convert(() => typedInstance.TestMethod());
                    }
                }
                ,
            }
        };
        genericMetadata.TestSessionId = testSessionId;
        yield return genericMetadata;
        yield break;
    }
}
internal static class MultiGenericTestClass_TestMethod_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MultiGenericTestClass<,>), new MultiGenericTestClass_TestMethod_TestSource_GUID());
    }
}
