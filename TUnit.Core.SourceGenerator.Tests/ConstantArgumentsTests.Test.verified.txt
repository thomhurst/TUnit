[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("String1", 0, [typeof(global::System.String)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.String methodArg = "123";

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.String1(System.String):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.String1(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 16,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute("123")
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.String1(System.String):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("String1", 0, [typeof(global::System.String)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.String)],
				TestName = "String1",
				TestFilePath = @"",
				TestLineNumber = 16,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Int", 0, [typeof(global::System.Int32)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int32 methodArg = 123;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Int(System.Int32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Int(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 23,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(123)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Int(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Int", 0, [typeof(global::System.Int32)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "Int",
				TestFilePath = @"",
				TestLineNumber = 23,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Double", 0, [typeof(global::System.Double)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Double methodArg = 1.23;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Double(System.Double):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Double(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 30,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(1.23)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Double(System.Double):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Double", 0, [typeof(global::System.Double)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Double)],
				TestName = "Double",
				TestFilePath = @"",
				TestLineNumber = 30,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Float", 0, [typeof(global::System.Single)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Single methodArg = 1.23F;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Float(System.Single):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Float(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 37,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(1.23F)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Float(System.Single):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Float", 0, [typeof(global::System.Single)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Single)],
				TestName = "Float",
				TestFilePath = @"",
				TestLineNumber = 37,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Long", 0, [typeof(global::System.Int64)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.Int64 methodArg = 123L;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Long(System.Int64):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Long(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 44,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(123L)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Long(System.Int64):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Long", 0, [typeof(global::System.Int64)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int64)],
				TestName = "Long",
				TestFilePath = @"",
				TestLineNumber = 44,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("UInt", 0, [typeof(global::System.UInt32)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.UInt32 methodArg = 123U;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.UInt(System.UInt32):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.UInt(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 51,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(123U)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.UInt(System.UInt32):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("UInt", 0, [typeof(global::System.UInt32)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.UInt32)],
				TestName = "UInt",
				TestFilePath = @"",
				TestLineNumber = 51,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests);
			var methodInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("ULong", 0, [typeof(global::System.UInt64)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

			global::System.UInt64 methodArg = 123UL;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
			new global::TUnit.TestProject.ConstantArgumentsTests()
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.ULong(System.UInt64):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.ULong(methodArg)),
				TestFilePath = @"",
				TestLineNumber = 58,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(123UL)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.ULong(System.UInt64):0",
				TestClass = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				ReturnType = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("ULong", 0, [typeof(global::System.UInt64)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.UInt64)],
				TestName = "ULong",
				TestFilePath = @"",
				TestLineNumber = 58,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]