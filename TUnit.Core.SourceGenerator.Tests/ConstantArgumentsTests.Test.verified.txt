// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_String1_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "String1",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "String1",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute("123"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute("123"),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 16,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "String1",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(string))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("string, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("String1", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(string) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.String1(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.String1(TUnit.Core.Helpers.CastHelper.Cast<string>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_String1_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_String1_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_Int_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "Int",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "Int",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(123),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 23,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "Int",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(int))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Int", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Int(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Int(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_Int_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_Int_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_Double_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "Double",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "Double",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(1.23d),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(1.23d),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 30,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "Double",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(double))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("double, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Double", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(double) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Double(TUnit.Core.Helpers.CastHelper.Cast<double>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Double(TUnit.Core.Helpers.CastHelper.Cast<double>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_Double_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_Double_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_Float_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "Float",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "Float",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(1.23000002f),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(1.23000002f),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 37,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "Float",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(float))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("float, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Float", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(float) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Float(TUnit.Core.Helpers.CastHelper.Cast<float>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Float(TUnit.Core.Helpers.CastHelper.Cast<float>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_Float_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_Float_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_Long_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "Long",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "Long",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(123L),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123L),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 44,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "Long",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(long))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("long, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("Long", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(long) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.Long(TUnit.Core.Helpers.CastHelper.Cast<long>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.Long(TUnit.Core.Helpers.CastHelper.Cast<long>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_Long_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_Long_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_UInt_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "UInt",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "UInt",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(123U),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123U),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 51,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "UInt",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(uint))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("uint, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("UInt", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(uint) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.UInt(TUnit.Core.Helpers.CastHelper.Cast<uint>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.UInt(TUnit.Core.Helpers.CastHelper.Cast<uint>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_UInt_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_UInt_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ConstantArgumentsTests_ULong_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
        {
            TestName = "ULong",
            TestClassType = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
            TestMethodName = "ULong",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ArgumentsAttribute(123UL),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ArgumentsAttribute(123UL),
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 58,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                Name = "ULong",
                GenericTypeCount = 0,
                ReturnType = typeof(global::System.Threading.Tasks.Task),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(ulong))
                    {
                        Name = "dummy",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("ulong, System.Private.CoreLib"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ConstantArgumentsTests).GetMethod("ULong", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(ulong) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ConstantArgumentsTests", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ConstantArgumentsTests, TestsBase`1"),
                        Name = "ConstantArgumentsTests",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ConstantArgumentsTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ConstantArgumentsTests)instance;
                switch (args.Length)
                {
                    case 1:
                        await typedInstance.ULong(TUnit.Core.Helpers.CastHelper.Cast<ulong>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        await instance.ULong(TUnit.Core.Helpers.CastHelper.Cast<ulong>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ConstantArgumentsTests_ULong_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ConstantArgumentsTests), new ConstantArgumentsTests_ULong_TestSource_GUID());
    }
}
