[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "String1",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute("123")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				string methodArg = "123";

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.String1(string):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.String1(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 16,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.String1(string):0",
					MethodName = $"String1",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.String1 failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 16,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "Int",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(123)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				int methodArg = 123;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Int(int):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Int(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 23,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Int(int):0",
					MethodName = $"Int",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.Int failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 23,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "Double",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(1.23)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<double>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				double methodArg = 1.23;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Double(double):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Double(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 30,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Double(double):0",
					MethodName = $"Double",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.Double failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 30,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "Float",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(1.23F)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<float>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				float methodArg = 1.23F;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Float(float):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Float(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 37,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Float(float):0",
					MethodName = $"Float",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.Float failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 37,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "Long",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(123L)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<long>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				long methodArg = 123L;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Long(long):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Long(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 44,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.Long(long):0",
					MethodName = $"Long",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.Long failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 44,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "UInt",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(123U)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<uint>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				uint methodArg = 123U;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.UInt(uint):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.UInt(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 51,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.UInt(uint):0",
					MethodName = $"UInt",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.UInt failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 51,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ConstantArgumentsTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ConstantArgumentsTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
				Name = "ULong",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute(123UL)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<ulong>
					{
						Name = "dummy",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.ConstantArgumentsTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("ConstantArgumentsTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "ConstantArgumentsTests",
						Attributes = [],
					}),
					Name = "ConstantArgumentsTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				ulong methodArg = 123UL;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ConstantArgumentsTests>(() => 
				new global::TUnit.TestProject.ConstantArgumentsTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.ULong(ulong):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.ULong(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 58,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.ConstantArgumentsTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.ConstantArgumentsTests.ULong(ulong):0",
					MethodName = $"ULong",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("ConstantArgumentsTests.ULong failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 58,
				});
			}
			return nodes;
		}
	}

]