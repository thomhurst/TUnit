// <auto-generated/>
#pragma warning disable

#nullable enable
using System;
using TUnit.Core.Converters;
namespace TUnit.Generated;
internal sealed class AotConverter_0 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource1);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource1 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_1 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource2);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource2 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_2 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource3);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTests.DataSource3 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_3 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource1);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource1 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_4 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource2);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource2 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_5 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource3);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.AllDataSourcesCombinedTestsVerification.DataSource3 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_6 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ArgumentsWithClassDataSourceTests.IntDataSource1);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ArgumentsWithClassDataSourceTests.IntDataSource1 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_7 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ArgumentsWithClassDataSourceTests.IntDataSource2);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ArgumentsWithClassDataSourceTests.IntDataSource2 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_8 : IAotConverter
{
    public Type SourceType => typeof(int);
    public Type TargetType => typeof(global::TUnit.TestProject.ExplicitInteger);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.ExplicitInteger targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is int sourceTypedValue)
        {
            return (global::TUnit.TestProject.ExplicitInteger)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_9 : IAotConverter
{
    public Type SourceType => typeof(int);
    public Type TargetType => typeof(global::TUnit.TestProject.ImplicitInteger);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.ImplicitInteger targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is int sourceTypedValue)
        {
            return (global::TUnit.TestProject.ImplicitInteger)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_10 : IAotConverter
{
    public Type SourceType => typeof(byte);
    public Type TargetType => typeof(byte?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is byte targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is byte sourceTypedValue)
        {
            return (byte?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_11 : IAotConverter
{
    public Type SourceType => typeof(byte?);
    public Type TargetType => typeof(byte);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is byte targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is byte sourceTypedValue)
        {
            return (byte)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_12 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ClassDataSourceEnumerableTest.EnumerableDataSource);
    public Type TargetType => typeof(string);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is string targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ClassDataSourceEnumerableTest.EnumerableDataSource sourceTypedValue)
        {
            return (string)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_13 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource1);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource1 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_14 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource2);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource2 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_15 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource3);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ClassDataSourceWithMethodDataSourceTests.DataSource3 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_16 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.ComprehensiveCountTest.ClassData);
    public Type TargetType => typeof(string);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is string targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.ComprehensiveCountTest.ClassData sourceTypedValue)
        {
            return (string)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_17 : IAotConverter
{
    public Type SourceType => typeof(bool);
    public Type TargetType => typeof(bool?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is bool targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is bool sourceTypedValue)
        {
            return (bool?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_18 : IAotConverter
{
    public Type SourceType => typeof(bool?);
    public Type TargetType => typeof(bool);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is bool targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is bool sourceTypedValue)
        {
            return (bool)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_19 : IAotConverter
{
    public Type SourceType => typeof(byte);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is byte sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_20 : IAotConverter
{
    public Type SourceType => typeof(sbyte);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is sbyte sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_21 : IAotConverter
{
    public Type SourceType => typeof(short);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is short sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_22 : IAotConverter
{
    public Type SourceType => typeof(ushort);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is ushort sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_23 : IAotConverter
{
    public Type SourceType => typeof(char);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is char sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_24 : IAotConverter
{
    public Type SourceType => typeof(int);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is int sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_25 : IAotConverter
{
    public Type SourceType => typeof(uint);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is uint sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_26 : IAotConverter
{
    public Type SourceType => typeof(long);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is long sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_27 : IAotConverter
{
    public Type SourceType => typeof(ulong);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is ulong sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_28 : IAotConverter
{
    public Type SourceType => typeof(float);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is float sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_29 : IAotConverter
{
    public Type SourceType => typeof(double);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is double sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_30 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(byte);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is byte targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (byte)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_31 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(sbyte);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is sbyte targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (sbyte)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_32 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(char);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is char targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (char)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_33 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(short);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is short targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (short)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_34 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(ushort);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is ushort targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (ushort)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_35 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_36 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(uint);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is uint targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (uint)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_37 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(long);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is long targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (long)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_38 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(ulong);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is ulong targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (ulong)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_39 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(float);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is float targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (float)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_40 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(double);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is double targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (double)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_41 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.TestEnum);
    public Type TargetType => typeof(global::TUnit.TestProject.TestEnum?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.TestEnum targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.TestEnum sourceTypedValue)
        {
            return (global::TUnit.TestProject.TestEnum?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_42 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.TestEnum?);
    public Type TargetType => typeof(global::TUnit.TestProject.TestEnum);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.TestEnum targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.TestEnum sourceTypedValue)
        {
            return (global::TUnit.TestProject.TestEnum)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_43 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedDataSourceBugTest.ClassData1);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedDataSourceBugTest.ClassData1 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_44 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedDataSourceBugTest.ClassData2);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedDataSourceBugTest.ClassData2 sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_45 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum4);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum4 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion1)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_46 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum4);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum4 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTests.Enum4)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_47 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum5);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum5 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion1)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_48 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum5);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum5 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTests.Enum5)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_49 : IAotConverter
{
    public Type SourceType => typeof(string);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is string sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion1)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_50 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion1);
    public Type TargetType => typeof(string);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is string targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion1 sourceTypedValue)
        {
            return (string)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_51 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum4);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum4 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion2)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_52 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum4);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum4 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTests.Enum4)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_53 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum5);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum5 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion2)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_54 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTests.Enum5);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTests.Enum5 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTests.Enum5)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_55 : IAotConverter
{
    public Type SourceType => typeof(string);
    public Type TargetType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is string sourceTypedValue)
        {
            return (global::TUnit.TestProject.MixedMatrixTestsUnion2)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_56 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.MixedMatrixTestsUnion2);
    public Type TargetType => typeof(string);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is string targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.MixedMatrixTestsUnion2 sourceTypedValue)
        {
            return (string)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_57 : IAotConverter
{
    public Type SourceType => typeof(decimal);
    public Type TargetType => typeof(decimal?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (decimal?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_58 : IAotConverter
{
    public Type SourceType => typeof(decimal?);
    public Type TargetType => typeof(decimal);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is decimal targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is decimal sourceTypedValue)
        {
            return (decimal)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_59 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.TestCountVerificationTests.TestDataSource);
    public Type TargetType => typeof(int);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is int targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.TestCountVerificationTests.TestDataSource sourceTypedValue)
        {
            return (int)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_60 : IAotConverter
{
    public Type SourceType => typeof(int);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._2757.Foo<int>);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._2757.Foo<int> targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is int sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._2757.Foo<int>)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_61 : IAotConverter
{
    public Type SourceType => typeof(global::System.ValueTuple<int, int>);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._2798.Foo);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._2798.Foo targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::System.ValueTuple<int, int> sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._2798.Foo)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_62 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.Bugs._3185.FlagMock);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._3185.FlagMock?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._3185.FlagMock targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.Bugs._3185.FlagMock sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._3185.FlagMock?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_63 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.Bugs._3185.FlagMock?);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._3185.FlagMock);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._3185.FlagMock targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.Bugs._3185.FlagMock sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._3185.FlagMock)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_64 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.Bugs._3185.RegularEnum);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._3185.RegularEnum?);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._3185.RegularEnum targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.Bugs._3185.RegularEnum sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._3185.RegularEnum?)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal sealed class AotConverter_65 : IAotConverter
{
    public Type SourceType => typeof(global::TUnit.TestProject.Bugs._3185.RegularEnum?);
    public Type TargetType => typeof(global::TUnit.TestProject.Bugs._3185.RegularEnum);
    public object? Convert(object? value)
    {
        if (value == null) return null;
        if (value is global::TUnit.TestProject.Bugs._3185.RegularEnum targetTypedValue)
        {
            return targetTypedValue;
        }
        if (value is global::TUnit.TestProject.Bugs._3185.RegularEnum sourceTypedValue)
        {
            return (global::TUnit.TestProject.Bugs._3185.RegularEnum)sourceTypedValue;
        }
        return value; // Return original value if type doesn't match
    }
}
internal static class AotConverterRegistration
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA2255:The 'ModuleInitializer' attribute should not be used in libraries",
        Justification = "Test framework needs to register AOT converters for conversion operators")]
    public static void Initialize()
    {
        AotConverterRegistry.Register(new AotConverter_0());
        AotConverterRegistry.Register(new AotConverter_1());
        AotConverterRegistry.Register(new AotConverter_2());
        AotConverterRegistry.Register(new AotConverter_3());
        AotConverterRegistry.Register(new AotConverter_4());
        AotConverterRegistry.Register(new AotConverter_5());
        AotConverterRegistry.Register(new AotConverter_6());
        AotConverterRegistry.Register(new AotConverter_7());
        AotConverterRegistry.Register(new AotConverter_8());
        AotConverterRegistry.Register(new AotConverter_9());
        AotConverterRegistry.Register(new AotConverter_10());
        AotConverterRegistry.Register(new AotConverter_11());
        AotConverterRegistry.Register(new AotConverter_12());
        AotConverterRegistry.Register(new AotConverter_13());
        AotConverterRegistry.Register(new AotConverter_14());
        AotConverterRegistry.Register(new AotConverter_15());
        AotConverterRegistry.Register(new AotConverter_16());
        AotConverterRegistry.Register(new AotConverter_17());
        AotConverterRegistry.Register(new AotConverter_18());
        AotConverterRegistry.Register(new AotConverter_19());
        AotConverterRegistry.Register(new AotConverter_20());
        AotConverterRegistry.Register(new AotConverter_21());
        AotConverterRegistry.Register(new AotConverter_22());
        AotConverterRegistry.Register(new AotConverter_23());
        AotConverterRegistry.Register(new AotConverter_24());
        AotConverterRegistry.Register(new AotConverter_25());
        AotConverterRegistry.Register(new AotConverter_26());
        AotConverterRegistry.Register(new AotConverter_27());
        AotConverterRegistry.Register(new AotConverter_28());
        AotConverterRegistry.Register(new AotConverter_29());
        AotConverterRegistry.Register(new AotConverter_30());
        AotConverterRegistry.Register(new AotConverter_31());
        AotConverterRegistry.Register(new AotConverter_32());
        AotConverterRegistry.Register(new AotConverter_33());
        AotConverterRegistry.Register(new AotConverter_34());
        AotConverterRegistry.Register(new AotConverter_35());
        AotConverterRegistry.Register(new AotConverter_36());
        AotConverterRegistry.Register(new AotConverter_37());
        AotConverterRegistry.Register(new AotConverter_38());
        AotConverterRegistry.Register(new AotConverter_39());
        AotConverterRegistry.Register(new AotConverter_40());
        AotConverterRegistry.Register(new AotConverter_41());
        AotConverterRegistry.Register(new AotConverter_42());
        AotConverterRegistry.Register(new AotConverter_43());
        AotConverterRegistry.Register(new AotConverter_44());
        AotConverterRegistry.Register(new AotConverter_45());
        AotConverterRegistry.Register(new AotConverter_46());
        AotConverterRegistry.Register(new AotConverter_47());
        AotConverterRegistry.Register(new AotConverter_48());
        AotConverterRegistry.Register(new AotConverter_49());
        AotConverterRegistry.Register(new AotConverter_50());
        AotConverterRegistry.Register(new AotConverter_51());
        AotConverterRegistry.Register(new AotConverter_52());
        AotConverterRegistry.Register(new AotConverter_53());
        AotConverterRegistry.Register(new AotConverter_54());
        AotConverterRegistry.Register(new AotConverter_55());
        AotConverterRegistry.Register(new AotConverter_56());
        AotConverterRegistry.Register(new AotConverter_57());
        AotConverterRegistry.Register(new AotConverter_58());
        AotConverterRegistry.Register(new AotConverter_59());
        AotConverterRegistry.Register(new AotConverter_60());
        AotConverterRegistry.Register(new AotConverter_61());
        AotConverterRegistry.Register(new AotConverter_62());
        AotConverterRegistry.Register(new AotConverter_63());
        AotConverterRegistry.Register(new AotConverter_64());
        AotConverterRegistry.Register(new AotConverter_65());
    }
}
