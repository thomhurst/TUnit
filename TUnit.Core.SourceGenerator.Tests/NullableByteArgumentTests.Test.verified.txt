[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class NullableByteArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new NullableByteArgumentTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
				Name = "Test",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute((byte)1),
					new global::TUnit.Core.ArgumentsAttribute(null)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<byte?>
					{
						Name = "someByte",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "NullableByteArgumentTests",
						Attributes = [],
					}),
					Name = "NullableByteArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				byte? methodArg = (byte)1;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.NullableByteArgumentTests>(() => 
				new global::TUnit.TestProject.NullableByteArgumentTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.NullableByteArgumentTests.Test(byte?):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test(methodArg)),
					TestFilePath = @"",
					TestLineNumber = 5,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.NullableByteArgumentTests.Test(byte?):0",
					MethodName = $"Test",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("NullableByteArgumentTests.Test failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 5,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
					Name = "Test",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute((byte)1),
						new global::TUnit.Core.ArgumentsAttribute(null)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<byte?>
						{
							Name = "someByte",
							Attributes = [],
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "NullableByteArgumentTests",
							Attributes = [],
						}),
						Name = "NullableByteArgumentTests",
						Namespace = "TUnit.TestProject",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

					byte? methodArg = null;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.NullableByteArgumentTests>(() => 
					new global::TUnit.TestProject.NullableByteArgumentTests()
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.NullableByteArgumentTests.Test(byte?):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test(methodArg)),
						TestFilePath = @"",
						TestLineNumber = 5,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.NullableByteArgumentTests.Test(byte?):0",
						MethodName = $"Test",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("NullableByteArgumentTests.Test failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 5,
					});
				}
				return nodes;
			}
		}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class NullableByteArgumentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new NullableByteArgumentTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
				Name = "Test2",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.ArgumentsAttribute((byte)1, (byte)1),
					new global::TUnit.Core.ArgumentsAttribute((byte)1, null)
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<byte>
					{
						Name = "byte1",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<byte?>
					{
						Name = "byte2",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "NullableByteArgumentTests",
						Attributes = [],
					}),
					Name = "NullableByteArgumentTests",
					Namespace = "TUnit.TestProject",
					Attributes = [],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				byte methodArg = (byte)1;
				byte? methodArg1 = (byte)1;

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.NullableByteArgumentTests>(() => 
				new global::TUnit.TestProject.NullableByteArgumentTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.NullableByteArgumentTests.Test2(byte,byte?):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg, methodArg1],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2(methodArg, methodArg1)),
					TestFilePath = @"",
					TestLineNumber = 12,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
				{
					TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.NullableByteArgumentTests.Test2(byte,byte?):0",
					MethodName = $"Test2",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("NullableByteArgumentTests.Test2 failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 12,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
					Name = "Test2",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.ArgumentsAttribute((byte)1, (byte)1),
						new global::TUnit.Core.ArgumentsAttribute((byte)1, null)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<byte>
						{
							Name = "byte1",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<byte?>
						{
							Name = "byte2",
							Attributes = [],
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Type = typeof(global::TUnit.TestProject.NullableByteArgumentTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("NullableByteArgumentTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "NullableByteArgumentTests",
							Attributes = [],
						}),
						Name = "NullableByteArgumentTests",
						Namespace = "TUnit.TestProject",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

					byte methodArg = (byte)1;
					byte? methodArg1 = (byte?)(null);

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.NullableByteArgumentTests>(() => 
					new global::TUnit.TestProject.NullableByteArgumentTests()
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.NullableByteArgumentTests.Test2(byte,byte?):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg, methodArg1],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2(methodArg, methodArg1)),
						TestFilePath = @"",
						TestLineNumber = 12,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.NullableByteArgumentTests>
					{
						TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.NullableByteArgumentTests.Test2(byte,byte?):0",
						MethodName = $"Test2",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("NullableByteArgumentTests.Test2 failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 12,
					});
				}
				return nodes;
			}
		}

]