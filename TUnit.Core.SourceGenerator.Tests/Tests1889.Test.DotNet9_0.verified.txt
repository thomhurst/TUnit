[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Inherited_DerivedTest : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Inherited_DerivedTest());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
				Name = "Test1",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
									],
				Parameters = [],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1889.DerivedTest", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1889", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "Tests1889",
						Attributes = [],
					}),
					Name = "DerivedTest",
					Namespace = "TUnit.TestProject.Bugs._1889",
					Attributes = 
					[
						new EngineTest(Pass),
						new global::TUnit.Core.InheritsTestsAttribute()
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.Bugs._1889.DerivedTest? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1889.DerivedTest>(() => 
				new global::TUnit.TestProject.Bugs._1889.DerivedTest()
				, sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
				{
					TestId = $"TUnit.TestProject.Bugs._1889.DerivedTest.Test1:0",
					TestClassArguments = [],
					TestMethodArguments = [],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test1()),
					TestLineNumber = 5,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
				{
					TestId = $"TUnit.TestProject.Bugs._1889.DerivedTest.Test1:0",
					MethodName = $"Test1",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DerivedTest.Test1 failed to initialize", exception),
					TestLineNumber = 5,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
					Name = "Test2",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
											],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
						{
							Name = "condition",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1889.DerivedTest", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1889", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "Tests1889",
							Attributes = [],
						}),
						Name = "DerivedTest",
						Namespace = "TUnit.TestProject.Bugs._1889",
						Attributes = 
						[
							new EngineTest(Pass),
							new global::TUnit.Core.InheritsTestsAttribute()
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
					global::TUnit.TestProject.Bugs._1889.DerivedTest? classInstance = null;
					object?[]? classInstanceArguments = null;
					var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
					{
						Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
						TestBuilderContext = testBuilderContextAccessor,
						TestInformation = testInformation,
						MembersToGenerate = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
							{
								Name = "condition",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						TestSessionId = sessionId,
						TestClassInstance = classInstance,
						ClassInstanceArguments = classInstanceArguments,
					};
					var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();

					testBuilderContext.DataAttributes.Add(methodDataAttribute);

					var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

					foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
					{
						testMethodDataIndex++;
						classInstanceArguments = [];

						var methodArgGeneratedData = methodArgGeneratedDataAccessor();
						bool methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[0]);
						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1889.DerivedTest>(() => 
						new global::TUnit.TestProject.Bugs._1889.DerivedTest()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
						{
							TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1889.DerivedTest.Test2(bool):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test2(methodArg)),
							TestLineNumber = 10,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
					{
						TestId = $"global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1889.DerivedTest.Test2(bool):0",
						MethodName = $"Test2",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DerivedTest.Test2 failed to initialize", exception),
						TestLineNumber = 10,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
						Name = "Test3",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
																											],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
							{
								Name = "condition",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1889.DerivedTest", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1889", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "Tests1889",
								Attributes = [],
							}),
							Name = "DerivedTest",
							Namespace = "TUnit.TestProject.Bugs._1889",
							Attributes = 
							[
								new EngineTest(Pass),
								new global::TUnit.Core.InheritsTestsAttribute()
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						global::TUnit.TestProject.Bugs._1889.DerivedTest? classInstance = null;
						object?[]? classInstanceArguments = null;
						classInstanceArguments = [];

						bool methodArg = false;

						var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1889.DerivedTest>(() => 
						new global::TUnit.TestProject.Bugs._1889.DerivedTest()
						, sessionId, testBuilderContext);
						var resettableClassFactory = resettableClassFactoryDelegate();


						nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.Bugs._1889.DerivedTest.Test3(bool):0",
							TestClassArguments = [],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg)),
							TestLineNumber = 16,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
						{
							TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.Bugs._1889.DerivedTest.Test3(bool):0",
							MethodName = $"Test3",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DerivedTest.Test3 failed to initialize", exception),
							TestLineNumber = 16,
						});
					}
					return nodes;
				}
				private global::System.Collections.Generic.List<TestMetadata> Tests3(string sessionId)
				{
					global::System.Collections.Generic.List<TestMetadata> nodes = [];
					var classDataIndex = 0;
					var testMethodDataIndex = 0;
					try
					{
						var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
						{
							Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
							Name = "Test3",
							GenericTypeCount = 0,
							ReturnType = typeof(void),
							Attributes = 
							[
																															],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<bool>
								{
									Name = "condition",
									Attributes = [],
									ReflectionInfo = null!,
								},
							],
							Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1889.DerivedTest", () => new global::TUnit.Core.SourceGeneratedClassInformation
							{
								Parent = null,
								Type = typeof(global::TUnit.TestProject.Bugs._1889.DerivedTest),
								Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1889", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
								{
									Name = "Tests1889",
									Attributes = [],
								}),
								Name = "DerivedTest",
								Namespace = "TUnit.TestProject.Bugs._1889",
								Attributes = 
								[
									new EngineTest(Pass),
									new global::TUnit.Core.InheritsTestsAttribute()
								],
								Parameters = [],
								Properties = [],
							}),
};

							var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
							var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
							global::TUnit.TestProject.Bugs._1889.DerivedTest? classInstance = null;
							object?[]? classInstanceArguments = null;
							classInstanceArguments = [];

							bool methodArg = true;

							var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1889.DerivedTest>(() => 
							new global::TUnit.TestProject.Bugs._1889.DerivedTest()
							, sessionId, testBuilderContext);
							var resettableClassFactory = resettableClassFactoryDelegate();


							nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
							{
								TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.Bugs._1889.DerivedTest.Test3(bool):0",
								TestClassArguments = [],
								TestMethodArguments = [methodArg],
								TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
								{
								},
								CurrentRepeatAttempt = 0,
								RepeatLimit = 0,
								ResettableClassFactory = resettableClassFactory,
								TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test3(methodArg)),
								TestLineNumber = 16,
								TestMethod = testInformation,
								TestBuilderContext = testBuilderContext,
							});
							resettableClassFactory = resettableClassFactoryDelegate();
							testBuilderContext = new();
							testBuilderContextAccessor.Current = testBuilderContext;
						}
						catch (global::System.Exception exception)
						{
							nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1889.DerivedTest>
							{
								TestId = $"global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS1:TUnit.TestProject.Bugs._1889.DerivedTest.Test3(bool):0",
								MethodName = $"Test3",
								Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DerivedTest.Test3 failed to initialize", exception),
								TestLineNumber = 16,
							});
						}
						return nodes;
					}
				}

]