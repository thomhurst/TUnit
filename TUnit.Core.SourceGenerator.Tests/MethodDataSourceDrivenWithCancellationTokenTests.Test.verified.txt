// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class MethodDataSourceDrivenWithCancellationTokenTests_MyTest_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
        {
            TestName = "MyTest",
            TestClassType = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
            TestMethodName = "MyTest",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.MethodDataSourceAttribute("T"),
                new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
                new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
                new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
                new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
                new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT"),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
                new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.MethodDataSourceAttribute("T")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.T();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("FuncT")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.FuncT();
                            yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableT();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableFuncT();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("ArrayT")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayT();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
                new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
                {
                    Factory = (dataGeneratorMetadata) =>
                    {
                        async IAsyncEnumerable<Func<Task<object?[]?>>> Factory()
                        {
                            var result = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayFuncT();
                            if (result is System.Collections.IEnumerable enumerable && !(result is string))
                            {
                                foreach (var item in enumerable)
                                {
                                    yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(item));
                                }
                            }
                            else
                            {
                                yield return () => global::System.Threading.Tasks.Task.FromResult(global::TUnit.Core.Helpers.DataSourceHelpers.ToObjectArray(result));
                            }
                        }
                        return Factory();
                    }
                },
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
                typeof(int),
                typeof(global::System.Threading.CancellationToken),
            },
            TestMethodParameterTypes = new string[]
            {
                "int",
                "global::System.Threading.CancellationToken",
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests, TestsBase`1"),
Name = "MyTest",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = new global::TUnit.Core.ParameterMetadata[]
{
new global::TUnit.Core.ParameterMetadata(typeof(int))
{
    Name = "value",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("int, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests).GetMethod("MyTest", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[0]
},
new global::TUnit.Core.ParameterMetadata(typeof(global::System.Threading.CancellationToken))
{
    Name = "cancellationToken",
    TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.CancellationToken, System.Private.CoreLib"),
    IsNullable = false,
    ReflectionInfo = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests).GetMethod("MyTest", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(int), typeof(global::System.Threading.CancellationToken) }, null)!.GetParameters()[1]
},
},
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests, TestsBase`1"),
Name = "MethodDataSourceDrivenWithCancellationTokenTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        typedInstance.MyTest(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), context?.CancellationToken ?? System.Threading.CancellationToken.None);
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                // Invoke with only the arguments that were provided
                switch (args.Length)
                {
                    case 1:
                        instance.MyTest(TUnit.Core.Helpers.CastHelper.Cast<int>(args[0]), cancellationToken);
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class MethodDataSourceDrivenWithCancellationTokenTests_MyTest_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests), new MethodDataSourceDrivenWithCancellationTokenTests_MyTest_TestSource_GUID());
    }
}
