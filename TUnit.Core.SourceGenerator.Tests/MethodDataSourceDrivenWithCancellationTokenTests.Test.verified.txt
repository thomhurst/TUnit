[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class MethodDataSourceDrivenWithCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenWithCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
			..Tests2(sessionId),
			..Tests3(sessionId),
			..Tests4(sessionId),
			..Tests5(sessionId),
		];
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.MethodDataSourceAttribute("T"),
					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<int>
					{
						Name = "value",
						Attributes = [],
					},
					new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = [],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

				int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.T();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
				new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodArg, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 10,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					MethodName = $"MyTest",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 10,
				});
			}
			return nodes;
		}
		private global::System.Collections.Generic.List<TestMetadata> Tests1(string sessionId)
		{
			global::System.Collections.Generic.List<TestMetadata> nodes = [];
			var classDataIndex = 0;
			var testMethodDataIndex = 0;
			try
			{
				var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Name = "MyTest",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.TestAttribute(),
						new global::TUnit.Core.MethodDataSourceAttribute("T"),
						new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
						new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
						new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
						new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
						new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<int>
						{
							Name = "value",
							Attributes = [],
						},
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
						{
							Name = "cancellationToken",
							Attributes = [],
						},
					],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "MethodDataSourceDrivenWithCancellationTokenTests",
							Attributes = [],
						}),
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Namespace = "TUnit.TestProject",
						Attributes = 
						[
							new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
						],
						Parameters = [],
						Properties = [],
					}),
};

					var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
					var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);

					int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.FuncT()();
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
					new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
						TestClassArguments = [],
						TestMethodArguments = [methodArg],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodArg, cancellationToken)),
						TestFilePath = @"",
						TestLineNumber = 10,
						TestMethod = testInformation,
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
				catch (global::System.Exception exception)
				{
					nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
					{
						TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
						MethodName = $"MyTest",
						Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
						TestFilePath = @"",
						TestLineNumber = 10,
					});
				}
				return nodes;
			}
			private global::System.Collections.Generic.List<TestMetadata> Tests2(string sessionId)
			{
				global::System.Collections.Generic.List<TestMetadata> nodes = [];
				var classDataIndex = 0;
				var testMethodDataIndex = 0;
				try
				{
					var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
						Name = "MyTest",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.TestAttribute(),
							new global::TUnit.Core.MethodDataSourceAttribute("T"),
							new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
							new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
							new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
							new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
							new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<int>
							{
								Name = "value",
								Attributes = [],
							},
							new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
							{
								Name = "cancellationToken",
								Attributes = [],
							},
						],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "MethodDataSourceDrivenWithCancellationTokenTests",
								Attributes = [],
							}),
							Name = "MethodDataSourceDrivenWithCancellationTokenTests",
							Namespace = "TUnit.TestProject",
							Attributes = 
							[
								new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
							],
							Parameters = [],
							Properties = [],
						}),
};

						var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
						var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
						foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableT())
						{
							testMethodDataIndex++;

							var methodData = methodDataAccessor;
							var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
							new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
							, sessionId, testBuilderContext);

							var resettableClassFactory = resettableClassFactoryDelegate();

							nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS2:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
								TestClassArguments = [],
								TestMethodArguments = [methodData],
								TestClassProperties = [],
								CurrentRepeatAttempt = 0,
								RepeatLimit = 0,
								ResettableClassFactory = resettableClassFactory,
								TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
								TestFilePath = @"",
								TestLineNumber = 10,
								TestMethod = testInformation,
								TestBuilderContext = testBuilderContext,
							});
							resettableClassFactory = resettableClassFactoryDelegate();
							testBuilderContext = new();
							testBuilderContextAccessor.Current = testBuilderContext;
						}
					}
					catch (global::System.Exception exception)
					{
						nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
						{
							TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS2:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
							MethodName = $"MyTest",
							Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
							TestFilePath = @"",
							TestLineNumber = 10,
						});
					}
					return nodes;
				}
				private global::System.Collections.Generic.List<TestMetadata> Tests3(string sessionId)
				{
					global::System.Collections.Generic.List<TestMetadata> nodes = [];
					var classDataIndex = 0;
					var testMethodDataIndex = 0;
					try
					{
						var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
						{
							Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
							Name = "MyTest",
							GenericTypeCount = 0,
							ReturnType = typeof(void),
							Attributes = 
							[
								new global::TUnit.Core.TestAttribute(),
								new global::TUnit.Core.MethodDataSourceAttribute("T"),
								new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
								new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
								new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
								new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
								new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
							],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<int>
								{
									Name = "value",
									Attributes = [],
								},
								new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
								{
									Name = "cancellationToken",
									Attributes = [],
								},
							],
							Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
							{
								Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
								Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
								{
									Name = "MethodDataSourceDrivenWithCancellationTokenTests",
									Attributes = [],
								}),
								Name = "MethodDataSourceDrivenWithCancellationTokenTests",
								Namespace = "TUnit.TestProject",
								Attributes = 
								[
									new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
								],
								Parameters = [],
								Properties = [],
							}),
};

							var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
							var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
							foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableFuncT())
							{
								testMethodDataIndex++;

								var methodData = methodDataAccessor();
								var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
								new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
								, sessionId, testBuilderContext);

								var resettableClassFactory = resettableClassFactoryDelegate();

								nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
								{
									TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS3:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
									TestClassArguments = [],
									TestMethodArguments = [methodData],
									TestClassProperties = [],
									CurrentRepeatAttempt = 0,
									RepeatLimit = 0,
									ResettableClassFactory = resettableClassFactory,
									TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
									TestFilePath = @"",
									TestLineNumber = 10,
									TestMethod = testInformation,
									TestBuilderContext = testBuilderContext,
								});
								resettableClassFactory = resettableClassFactoryDelegate();
								testBuilderContext = new();
								testBuilderContextAccessor.Current = testBuilderContext;
							}
						}
						catch (global::System.Exception exception)
						{
							nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
							{
								TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS3:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
								MethodName = $"MyTest",
								Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
								TestFilePath = @"",
								TestLineNumber = 10,
							});
						}
						return nodes;
					}
					private global::System.Collections.Generic.List<TestMetadata> Tests4(string sessionId)
					{
						global::System.Collections.Generic.List<TestMetadata> nodes = [];
						var classDataIndex = 0;
						var testMethodDataIndex = 0;
						try
						{
							var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
							{
								Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
								Name = "MyTest",
								GenericTypeCount = 0,
								ReturnType = typeof(void),
								Attributes = 
								[
									new global::TUnit.Core.TestAttribute(),
									new global::TUnit.Core.MethodDataSourceAttribute("T"),
									new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
									new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
									new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
									new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
									new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
								],
								Parameters = 
								[
									new global::TUnit.Core.SourceGeneratedParameterInformation<int>
									{
										Name = "value",
										Attributes = [],
									},
									new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
									{
										Name = "cancellationToken",
										Attributes = [],
									},
								],
								Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
								{
									Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
									Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
									{
										Name = "MethodDataSourceDrivenWithCancellationTokenTests",
										Attributes = [],
									}),
									Name = "MethodDataSourceDrivenWithCancellationTokenTests",
									Namespace = "TUnit.TestProject",
									Attributes = 
									[
										new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
									],
									Parameters = [],
									Properties = [],
								}),
};

								var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
								var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
								foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayT())
								{
									testMethodDataIndex++;

									var methodData = methodDataAccessor;
									var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
									new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
									, sessionId, testBuilderContext);

									var resettableClassFactory = resettableClassFactoryDelegate();

									nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
									{
										TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS4:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
										TestClassArguments = [],
										TestMethodArguments = [methodData],
										TestClassProperties = [],
										CurrentRepeatAttempt = 0,
										RepeatLimit = 0,
										ResettableClassFactory = resettableClassFactory,
										TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
										TestFilePath = @"",
										TestLineNumber = 10,
										TestMethod = testInformation,
										TestBuilderContext = testBuilderContext,
									});
									resettableClassFactory = resettableClassFactoryDelegate();
									testBuilderContext = new();
									testBuilderContextAccessor.Current = testBuilderContext;
								}
							}
							catch (global::System.Exception exception)
							{
								nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
								{
									TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS4:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
									MethodName = $"MyTest",
									Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
									TestFilePath = @"",
									TestLineNumber = 10,
								});
							}
							return nodes;
						}
						private global::System.Collections.Generic.List<TestMetadata> Tests5(string sessionId)
						{
							global::System.Collections.Generic.List<TestMetadata> nodes = [];
							var classDataIndex = 0;
							var testMethodDataIndex = 0;
							try
							{
								var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
								{
									Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
									Name = "MyTest",
									GenericTypeCount = 0,
									ReturnType = typeof(void),
									Attributes = 
									[
										new global::TUnit.Core.TestAttribute(),
										new global::TUnit.Core.MethodDataSourceAttribute("T"),
										new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),
										new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),
										new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),
										new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),
										new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
									],
									Parameters = 
									[
										new global::TUnit.Core.SourceGeneratedParameterInformation<int>
										{
											Name = "value",
											Attributes = [],
										},
										new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
										{
											Name = "cancellationToken",
											Attributes = [],
										},
									],
									Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
									{
										Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
										Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
										{
											Name = "MethodDataSourceDrivenWithCancellationTokenTests",
											Attributes = [],
										}),
										Name = "MethodDataSourceDrivenWithCancellationTokenTests",
										Namespace = "TUnit.TestProject",
										Attributes = 
										[
											new global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
										],
										Parameters = [],
										Properties = [],
									}),
};

									var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
									var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
									foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayFuncT())
									{
										testMethodDataIndex++;

										var methodData = methodDataAccessor();
										var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => 
										new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests()
										, sessionId, testBuilderContext);

										var resettableClassFactory = resettableClassFactoryDelegate();

										nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
										{
											TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS5:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
											TestClassArguments = [],
											TestMethodArguments = [methodData],
											TestClassProperties = [],
											CurrentRepeatAttempt = 0,
											RepeatLimit = 0,
											ResettableClassFactory = resettableClassFactory,
											TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
											TestFilePath = @"",
											TestLineNumber = 10,
											TestMethod = testInformation,
											TestBuilderContext = testBuilderContext,
										});
										resettableClassFactory = resettableClassFactoryDelegate();
										testBuilderContext = new();
										testBuilderContextAccessor.Current = testBuilderContext;
									}
								}
								catch (global::System.Exception exception)
								{
									nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
									{
										TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS5:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
										MethodName = $"MyTest",
										Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
										TestFilePath = @"",
										TestLineNumber = 10,
									});
								}
								return nodes;
							}
						}

]