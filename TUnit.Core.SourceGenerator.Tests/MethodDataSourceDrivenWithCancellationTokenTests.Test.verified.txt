// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class MethodDataSourceDrivenWithCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new MethodDataSourceDrivenWithCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IReadOnlyList<TestMetadata>> CollectTestsAsync(string sessionId)
	{
		var results = new global::System.Collections.Generic.List<TestMetadata>();
		results.AddRange(await Tests0(sessionId));
		results.AddRange(await Tests1(sessionId));
		results.AddRange(await Tests2(sessionId));
		results.AddRange(await Tests3(sessionId));
		results.AddRange(await Tests4(sessionId));
		results.AddRange(await Tests5(sessionId));
		return results;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.T();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 12,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			classInstanceArguments = [];

			int methodArg = global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.FuncT()();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				TestClassArguments = [],
				TestMethodArguments = [methodArg],
				TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
				{
				},
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 12,
				TestMethod = testInformation,
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS1:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests2(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableT())
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodData = methodDataAccessor;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS2:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [],
					TestMethodArguments = [methodData],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 12,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "MyTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS2:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests3(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.EnumerableFuncT())
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodData = methodDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS3:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [],
					TestMethodArguments = [methodData],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 12,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "MyTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS3:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests4(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayT())
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodData = methodDataAccessor;
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS4:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [],
					TestMethodArguments = [methodData],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 12,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "MyTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS4:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

	private async global::System.Threading.Tasks.Task<global::System.Collections.Generic.List<TestMetadata>> Tests5(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.TestMethod
			{
				Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
				Name = "MyTest",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),

					new global::TUnit.Core.MethodDataSourceAttribute("T"),

					new global::TUnit.Core.MethodDataSourceAttribute("FuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableT"),

					new global::TUnit.Core.MethodDataSourceAttribute("EnumerableFuncT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayT"),

					new global::TUnit.Core.MethodDataSourceAttribute("ArrayFuncT")
				],
				Parameters = 
				[
					new global::TUnit.Core.TestParameter<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
					new global::TUnit.Core.TestParameter<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.TestClass.GetOrAdd("global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestClass
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests),
					Assembly = global::TUnit.Core.TestAssembly.GetOrAdd("MethodDataSourceDrivenWithCancellationTokenTests", () => new global::TUnit.Core.TestAssembly
					{
						Name = "MethodDataSourceDrivenWithCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute()
						],
					}),
					Name = "MethodDataSourceDrivenWithCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),

						new global::System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Usage", "TUnit0046:Return a `Func<T>` rather than a `<T>`")
					],
					Parameters = [],
					Properties = [],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MyTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			foreach (var methodDataAccessor in global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.ArrayFuncT())
			{
				testMethodDataIndex++;
				classInstanceArguments = [];

				var methodData = methodDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>(() => new global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests(), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				nodes.Add(new TestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS5:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [],
					TestMethodArguments = [methodData],
					TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
					{
					},
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MyTest(methodData, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 12,
					TestMethod = testInformation,
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "MyTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS5:{testMethodDataIndex}:TUnit.TestProject.MethodDataSourceDrivenWithCancellationTokenTests.MyTest(int,System.Threading.CancellationToken):0",
				MethodName = $"MyTest",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("MethodDataSourceDrivenWithCancellationTokenTests.MyTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
			});
		}
		return nodes;
	}

}