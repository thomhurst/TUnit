// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							12,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method(int):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 12,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method(methodArg)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							12,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method(int):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 12,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method(methodArg)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method(int):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 12,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method2",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method2",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							20,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					string methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[1]);
					bool methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[2]);

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method2(int,string,bool):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 20,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method2(methodArg, methodArg1, methodArg2)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method2",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method2(int,string,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method2 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 20,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method2"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method2",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method2",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							20,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method2",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					string methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[1]);
					bool methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[2]);

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method2(int,string,bool):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 20,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method2(methodArg, methodArg1, methodArg2)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method2",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method2(int,string,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method2 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 20,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method2"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		var result1 = await Tests1(sessionId);
		testDefinitions.AddRange(result1.TestDefinitions);
		discoveryFailures.AddRange(result1.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method3",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method3",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							27,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					string methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[1]);
					bool methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[2]);

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method3(int,string,bool):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 27,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method3(methodArg, methodArg1, methodArg2)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method3",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute<int, string, bool>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method3(int,string,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests1(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				Name = "GeneratedData_Method3",
				GenericTypeCount = 0,
				ReturnType = typeof(void),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "GeneratedData_Method3",
						TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
						ConstructorArguments = new object?[]
						{
							"",
							27,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.DataSourceGeneratorTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("DataSourceGeneratorTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "DataSourceGeneratorTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "DataSourceGeneratorTests",
							}

						],
					}),
					Name = "DataSourceGeneratorTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "DataSourceGeneratorTests",
							TargetType = typeof(TUnit.TestProject.DataSourceGeneratorTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<string>
								{
									Name = "value2",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
								new global::TUnit.Core.ParameterMetadata<bool>
								{
									Name = "value3",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "GeneratedData_Method3",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.DataSourceGeneratorTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value2",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<bool>
					{
						Name = "value3",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value2",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
						new global::TUnit.Core.ParameterMetadata<bool>
						{
							Name = "value3",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = await classArgGeneratedDataAccessor();
					int classArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(classArgGeneratedData[0]);
					string classArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(classArgGeneratedData[1]);
					bool classArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(classArgGeneratedData[2]);

					classInstanceArguments = [classArg, classArg1, classArg2];

					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
					string methodArg1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[1]);
					bool methodArg2 = global::TUnit.Core.Helpers.CastHelper.Cast<bool>(methodArgGeneratedData[2]);

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2), sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method3(int,string,bool):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 27,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method3(methodArg, methodArg1, methodArg2)),
						ClassArgumentsProvider = () => new object?[] { classArg, classArg1, classArg2 },
						MethodArgumentsProvider = () => new object?[] { methodArg, methodArg1, methodArg2 },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "GeneratedData_Method3",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.Attributes.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(int,string,bool).GeneratedData_Method3(int,string,bool):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("DataSourceGeneratorTests.GeneratedData_Method3 failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 27,
				TestClassName = "DataSourceGeneratorTests",
				TestMethodName = "GeneratedData_Method3"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}