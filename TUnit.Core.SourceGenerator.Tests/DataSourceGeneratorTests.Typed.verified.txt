[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method", 0, [typeof(global::System.Int32)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method(System.Int32):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArgGeneratedData],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method(methodArgGeneratedData)),
						TestFilePath = @"",
						TestLineNumber = 9,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method", 0, [typeof(global::System.Int32)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "GeneratedData_Method",
				TestFilePath = @"",
				TestLineNumber = 9,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method", 0, [typeof(global::System.Int32)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method(System.Int32):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArgGeneratedData],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method(methodArgGeneratedData)),
						TestFilePath = @"",
						TestLineNumber = 9,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method(System.Int32):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method", 0, [typeof(global::System.Int32)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32)],
				TestName = "GeneratedData_Method",
				TestFilePath = @"",
				TestLineNumber = 9,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method2", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					global::System.Int32 methodArg = methodArgGeneratedData.Item1;
					global::System.String methodArg1 = methodArgGeneratedData.Item2;
					global::System.Boolean methodArg2 = methodArgGeneratedData.Item3;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method2(System.Int32,System.String,System.Boolean):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArg, methodArg1, methodArg2],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method2(methodArg, methodArg1, methodArg2)),
						TestFilePath = @"",
						TestLineNumber = 17,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method2(System.Int32,System.String,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method2", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)],
				TestName = "GeneratedData_Method2",
				TestFilePath = @"",
				TestLineNumber = 17,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method2", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					global::System.Int32 methodArg = methodArgGeneratedData.Item1;
					global::System.String methodArg1 = methodArgGeneratedData.Item2;
					global::System.Boolean methodArg2 = methodArgGeneratedData.Item3;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method2(System.Int32,System.String,System.Boolean):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArg, methodArg1, methodArg2],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method2(methodArg, methodArg1, methodArg2)),
						TestFilePath = @"",
						TestLineNumber = 17,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method2(System.Int32,System.String,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method2", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)],
				TestName = "GeneratedData_Method2",
				TestFilePath = @"",
				TestLineNumber = 17,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class DataSourceGeneratorTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new DataSourceGeneratorTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return
		[
			..Tests0(sessionId),
			..Tests1(sessionId),
		];
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method3", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					global::System.Int32 methodArg = methodArgGeneratedData.Item1;
					global::System.String methodArg1 = methodArgGeneratedData.Item2;
					global::System.Boolean methodArg2 = methodArgGeneratedData.Item3;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method3(System.Int32,System.String,System.Boolean):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArg, methodArg1, methodArg2],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method3(methodArg, methodArg1, methodArg2)),
						TestFilePath = @"",
						TestLineNumber = 25,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method3(System.Int32,System.String,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method3", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)],
				TestName = "GeneratedData_Method3",
				TestFilePath = @"",
				TestLineNumber = 25,
				Exception = exception,
			});
		}
		return nodes;
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests1(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.DataSourceGeneratorTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method3", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = typeof(global::TUnit.TestProject.DataSourceGeneratorTests).GetConstructors().First().GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var classDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
};

			var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

			foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
				var methodDataAttribute = new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
};

				var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

				foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					global::System.Int32 classArg = classArgGeneratedData.Item1;
					global::System.String classArg1 = classArgGeneratedData.Item2;
					global::System.Boolean classArg2 = classArgGeneratedData.Item3;


					var methodArgGeneratedData = methodArgGeneratedDataAccessor();
					global::System.Int32 methodArg = methodArgGeneratedData.Item1;
					global::System.String methodArg1 = methodArgGeneratedData.Item2;
					global::System.Boolean methodArg2 = methodArgGeneratedData.Item3;

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.DataSourceGeneratorTests>(() => 
					new global::TUnit.TestProject.DataSourceGeneratorTests(classArg, classArg1, classArg2)
					, sessionId, testBuilderContext);

					var resettableClassFactory = resettableClassFactoryDelegate();

					nodes.Add(new TestMetadata<global::TUnit.TestProject.DataSourceGeneratorTests>
					{
						TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method3(System.Int32,System.String,System.Boolean):0",
						TestClassArguments = [classArg, classArg1, classArg2],
						TestMethodArguments = [methodArg, methodArg1, methodArg2],
						TestClassProperties = [],
						CurrentRepeatAttempt = 0,
						RepeatLimit = 0,
						MethodInfo = methodInfo,
						ResettableClassFactory = resettableClassFactory,
						TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.GeneratedData_Method3(methodArg, methodArg1, methodArg2)),
						TestFilePath = @"",
						TestLineNumber = 25,
						TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						ClassAttributes = [ new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute<global::System.Int32, global::System.String, global::System.Boolean>()
{
    
}, new global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute()
{
    
} ],
						AssemblyAttributes = [  ],
						DataAttributes = [ classDataAttribute, methodDataAttribute ],
						TestBuilderContext = testBuilderContext,
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new();
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{classDataIndex}:CL-GAC0:global::TUnit.TestProject.DataSourceGeneratorTests.AutoFixtureGeneratorAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.DataSourceGeneratorTests(System.Int32,System.String,System.Boolean).GeneratedData_Method3(System.Int32,System.String,System.Boolean):0",
				TestClass = typeof(global::TUnit.TestProject.DataSourceGeneratorTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.DataSourceGeneratorTests), "GeneratedData_Method3", 0, [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Int32), typeof(global::System.String), typeof(global::System.Boolean)],
				TestName = "GeneratedData_Method3",
				TestFilePath = @"",
				TestLineNumber = 25,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]