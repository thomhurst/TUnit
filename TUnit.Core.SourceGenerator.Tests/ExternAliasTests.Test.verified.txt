// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class ExternAliasTests_TestWithMockFileSystem_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    #if NET8_0_OR_GREATER
    [global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<FileSystem>k__BackingField")]
    private static extern ref global::TUnit.TestProject.FileSystemMock GetFileSystemBackingField(global::TUnit.TestProject.ExternAliasTests instance);
    #endif
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ExternAliasTests>
        {
            TestName = "TestWithMockFileSystem",
            TestClassType = typeof(global::TUnit.TestProject.ExternAliasTests),
            TestMethodName = "TestWithMockFileSystem",
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
                new global::TUnit.Core.PropertyDataSource
                {
                    PropertyName = "FileSystem",
                    PropertyType = typeof(global::TUnit.TestProject.FileSystemMock),
                    DataSource = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.FileSystemMock>() { Shared = global::TUnit.Core.SharedType.PerTestSession },
                },
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
                new global::TUnit.Core.PropertyInjectionData
                {
                    PropertyName = "FileSystem",
                    PropertyType = typeof(global::TUnit.TestProject.FileSystemMock),
                    #if NET8_0_OR_GREATER
                    Setter = (instance, value) => GetFileSystemBackingField((global::TUnit.TestProject.ExternAliasTests)instance) = (global::TUnit.TestProject.FileSystemMock)value,
                    #else
                    Setter = (instance, value) => throw new global::System.NotSupportedException("Setting init-only properties requires .NET 8 or later"),
                    #endif
                    ValueFactory = () => throw new global::System.InvalidOperationException("ValueFactory should be provided by TestDataCombination"),
                    NestedPropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
                    {
                    },
                    NestedPropertyValueFactory = obj =>
                    {
                        return new global::System.Collections.Generic.Dictionary<string, object?>();
                    }
                },
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.ExternAliasTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExternAliasTests, TestsBase`1"),
Name = "TestWithMockFileSystem",
GenericTypeCount = 0,
ReturnType = typeof(global::System.Threading.Tasks.Task),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("System.Threading.Tasks.Task, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ExternAliasTests", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.ExternAliasTests),
TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ExternAliasTests, TestsBase`1"),
Name = "ExternAliasTests",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = new global::TUnit.Core.PropertyMetadata[]
{
new global::TUnit.Core.PropertyMetadata
{
    ReflectionInfo = typeof(global::TUnit.TestProject.ExternAliasTests).GetProperty("FileSystem"),
    Type = typeof(global::TUnit.TestProject.FileSystemMock),
    Name = "FileSystem",
    IsStatic = false,
    IsNullable = false,
    Getter = o => ((global::TUnit.TestProject.ExternAliasTests)o).FileSystem,
    ClassMetadata = null!,
    ContainingTypeMetadata = null!
},
},
Parent = null
};
// Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
prop.ContainingTypeMetadata = classMetadata;
}
return classMetadata;
})
},
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ExternAliasTests()
            {
                FileSystem = default!,
            },
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ExternAliasTests)instance;
                var context = global::TUnit.Core.TestContext.Current;
                await typedInstance.TestWithMockFileSystem();
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                await instance.TestWithMockFileSystem();
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        tests.Add(metadata);
        return tests;
    }
}
internal static class ExternAliasTests_TestWithMockFileSystem_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ExternAliasTests), new ExternAliasTests_TestWithMockFileSystem_TestSource_GUID());
    }
}
