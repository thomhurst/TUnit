// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
				Name = "MethodDataSource",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MethodDataSource",
						TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
						ConstructorArguments = new object?[]
						{
							"",
							11,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.InstanceMethodDataSourceAttribute("DataSource"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MethodDataSource",
						TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
						ConstructorArguments = new object?[]
						{
							"DataSource",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.Bugs._1821.Tests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("Tests1821", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "Tests1821",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "Tests1821",
							}

						],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._1821",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "Tests",
							TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
								{
									Name = "data",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MethodDataSource",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.Bugs._1821.Tests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
					{
						Name = "data",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = await classArgGeneratedDataAccessor();
				global::TUnit.TestProject.Bugs._1821.MyData classArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Bugs._1821.MyData>(classArgGeneratedData[0]);
				classInstanceArguments = [classArg];

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1821.Tests>(() => new global::TUnit.TestProject.Bugs._1821.Tests(classArg), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();
				classInstance = resettableClassFactory.Value;
				foreach (var methodDataAccessor in classInstance.DataSource())
				{
					testMethodDataIndex++;
					var methodData = methodDataAccessor;


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.Bugs._1821.Tests>
					{
						TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.InstanceMethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MethodDataSource(string):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 11,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MethodDataSource(methodData)),
						ClassArgumentsProvider = () => new object?[] { classArg },
						MethodArgumentsProvider = () => new object?[] { methodData },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "MethodDataSource",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.InstanceMethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MethodDataSource(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.MethodDataSource failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 11,
				TestClassName = "Tests",
				TestMethodName = "MethodDataSource"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
				Name = "MatrixDataSource",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MatrixDataSource",
						TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
						ConstructorArguments = new object?[]
						{
							"",
							18,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<string>
					{
						Name = "value",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.Core.MatrixInstanceMethodAttribute<global::TUnit.TestProject.Bugs._1821.Tests>("DataSource"),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Parameter,
								TargetMemberName = "value",
								TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
								ConstructorArguments = new object?[]
								{
									"DataSource",
								}
								,
							}

						],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.Bugs._1821.Tests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("Tests1821", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "Tests1821",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "Tests1821",
							}

						],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._1821",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "Tests",
							TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
								{
									Name = "data",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MatrixDataSource",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.Bugs._1821.Tests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var classArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<global::TUnit.TestProject.Bugs._1821.MyData>
					{
						Name = "data",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>();


			testBuilderContext.DataAttributes.Add(classDataAttribute);

			var classArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)classDataAttribute).GenerateAsync(classArgDataGeneratorMetadata);

			await foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
			{
				classDataIndex++;
				var classArgGeneratedData = await classArgGeneratedDataAccessor();
				global::TUnit.TestProject.Bugs._1821.MyData classArg = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.Bugs._1821.MyData>(classArgGeneratedData[0]);
				classInstanceArguments = [classArg];

				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1821.Tests>(() => new global::TUnit.TestProject.Bugs._1821.Tests(classArg), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();
				classInstance = resettableClassFactory.Value;
				var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.ParameterMetadata<string>
						{
							Name = "value",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.Core.MatrixInstanceMethodAttribute<global::TUnit.TestProject.Bugs._1821.Tests>("DataSource"),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Parameter,
									TargetMemberName = "value",
									TargetType = typeof(TUnit.TestProject.Bugs._1821.Tests),
									ConstructorArguments = new object?[]
									{
										"DataSource",
									}
									,
								}

							],
							ReflectionInfo = null!,
						}
						,
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();


				testBuilderContext.DataAttributes.Add(methodDataAttribute);

				var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

				await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
				{
					testMethodDataIndex++;
					var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
					string methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[0]);


					testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.Bugs._1821.Tests>
					{
						TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MatrixDataSource(string):0",
						MethodMetadata = testInformation,
						RepeatCount = 0,
						TestFilePath = @"",
						TestLineNumber = 18,
						TestClassFactory = () => resettableClassFactory.Value,
						TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixDataSource(methodArg)),
						ClassArgumentsProvider = () => new object?[] { classArg },
						MethodArgumentsProvider = () => new object?[] { methodArg },
						PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
						{
						}
					});
					resettableClassFactory = resettableClassFactoryDelegate();
					testBuilderContext = new global::TUnit.Core.TestBuilderContext
					{
						TestMethodName = "MatrixDataSource",
						ClassInformation = testInformation.Class,
						MethodInformation = testInformation
					};
					testBuilderContextAccessor.Current = testBuilderContext;
				}
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MatrixDataSource(string):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.MatrixDataSource failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 18,
				TestClassName = "Tests",
				TestMethodName = "MatrixDataSource"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}