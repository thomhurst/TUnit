[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
				Name = "MethodDataSource",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute(),
					new global::TUnit.Core.InstanceMethodDataSourceAttribute("DataSource")
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1821.Tests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1821", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "Tests1821",
						Attributes = [],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._1821",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.Bugs._1821.Tests? classInstance = null;
				object?[]? classInstanceArguments = null;
				var classArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>();

				testBuilderContext.DataAttributes.Add(classDataAttribute);

				var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

				foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
				{
					classDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					classInstanceArguments = [classArgGeneratedData];

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1821.Tests>(() => 
					new global::TUnit.TestProject.Bugs._1821.Tests(classArgGeneratedData)
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();
					classInstance = resettableClassFactory.Value;
					foreach (var methodDataAccessor in classInstance.DataSource())
					{
						testMethodDataIndex++;
						var methodData = methodDataAccessor;


						nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1821.Tests>
						{
							TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.InstanceMethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MethodDataSource(string):0",
							TestClassArguments = [classArgGeneratedData],
							TestMethodArguments = [methodData],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MethodDataSource(methodData)),
							TestFilePath = @"",
							TestLineNumber = 11,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
				}
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1821.Tests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.InstanceMethodDataSourceAttribute:{testMethodDataIndex}:TL-EMDS0:{testMethodDataIndex}:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MethodDataSource(string):0",
					MethodName = $"MethodDataSource",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.MethodDataSource failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 11,
				});
			}
			return nodes;
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Tests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new Tests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
				Name = "MatrixDataSource",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = 
				[
					new global::TUnit.Core.SourceGeneratedParameterInformation<string>
					{
						Name = "value",
						Attributes = 
						[
							new global::TUnit.Core.MatrixInstanceMethodAttribute<global::TUnit.TestProject.Bugs._1821.Tests>("DataSource")
						],
						ReflectionInfo = null!,
					},
				],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1821.Tests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.Bugs._1821.Tests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Tests1821", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "Tests1821",
						Attributes = [],
					}),
					Name = "Tests",
					Namespace = "TUnit.TestProject.Bugs._1821",
					Attributes = 
					[
						new EngineTest(Pass)
					],
					Parameters = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					Properties = [],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.Bugs._1821.Tests? classInstance = null;
				object?[]? classInstanceArguments = null;
				var classArgDataGeneratorMetadata = new DataGeneratorMetadata
				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.ClassParameters,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1821.MyData>
						{
							Name = "data",
							Attributes = [],
							ReflectionInfo = null!,
						},
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				};
				var classDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>();

				testBuilderContext.DataAttributes.Add(classDataAttribute);

				var classArgGeneratedDataArray = classDataAttribute.GenerateDataSources(classArgDataGeneratorMetadata);

				foreach (var classArgGeneratedDataAccessor in classArgGeneratedDataArray)
				{
					classDataIndex++;
					var classArgGeneratedData = classArgGeneratedDataAccessor();
					classInstanceArguments = [classArgGeneratedData];

					var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.Bugs._1821.Tests>(() => 
					new global::TUnit.TestProject.Bugs._1821.Tests(classArgGeneratedData)
					, sessionId, testBuilderContext);
					var resettableClassFactory = resettableClassFactoryDelegate();
					classInstance = resettableClassFactory.Value;
					var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
					{
						Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
						TestBuilderContext = testBuilderContextAccessor,
						TestInformation = testInformation,
						MembersToGenerate = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<string>
							{
								Name = "value",
								Attributes = 
								[
									new global::TUnit.Core.MatrixInstanceMethodAttribute<global::TUnit.TestProject.Bugs._1821.Tests>("DataSource")
								],
								ReflectionInfo = null!,
							},
						],
						TestSessionId = sessionId,
						TestClassInstance = classInstance,
						ClassInstanceArguments = classInstanceArguments,
					};
					var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();

					testBuilderContext.DataAttributes.Add(methodDataAttribute);

					var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

					foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
					{
						testMethodDataIndex++;
						var methodArgGeneratedData = methodArgGeneratedDataAccessor();
						string methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<string>(methodArgGeneratedData[0]);


						nodes.Add(new TestMetadata<global::TUnit.TestProject.Bugs._1821.Tests>
						{
							TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MatrixDataSource(string):0",
							TestClassArguments = [classArgGeneratedData],
							TestMethodArguments = [methodArg],
							TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
							{
							},
							CurrentRepeatAttempt = 0,
							RepeatLimit = 0,
							ResettableClassFactory = resettableClassFactory,
							TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixDataSource(methodArg)),
							TestFilePath = @"",
							TestLineNumber = 18,
							TestMethod = testInformation,
							TestBuilderContext = testBuilderContext,
						});
						resettableClassFactory = resettableClassFactoryDelegate();
						testBuilderContext = new();
						testBuilderContextAccessor.Current = testBuilderContext;
					}
				}
			}
			catch (global::System.Exception exception)
			{
				nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.Bugs._1821.Tests>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1821.MyData>:{classDataIndex}:CL-GAC0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.Bugs._1821.Tests(TUnit.TestProject.Bugs._1821.MyData).MatrixDataSource(string):0",
					MethodName = $"MatrixDataSource",
					Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("Tests.MatrixDataSource failed to initialize", exception),
					TestFilePath = @"",
					TestLineNumber = 18,
				});
			}
			return nodes;
		}
	}

]