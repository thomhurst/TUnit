// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "DefaultTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DefaultTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							16,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DefaultTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(0),
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DefaultTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			classInstanceArguments = [classArg];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DefaultTest(System.Threading.CancellationToken):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 16,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DefaultTest(cancellationToken)),
				ClassArgumentsProvider = () => new object?[] { classArg },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DefaultTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DefaultTest(System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.DefaultTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 16,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "DefaultTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "BasicTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BasicTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							23,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TimeoutAttribute(5_000),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BasicTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							5000,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.CategoryAttribute("Blah"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BasicTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"Blah",
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Failure),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "BasicTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(1),
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BasicTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			classInstanceArguments = [classArg];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).BasicTest(System.Threading.CancellationToken):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 23,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BasicTest(cancellationToken)),
				ClassArgumentsProvider = () => new object?[] { classArg },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "BasicTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).BasicTest(System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.BasicTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 23,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "BasicTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "InheritedTimeoutAttribute",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "InheritedTimeoutAttribute",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							32,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.TimeoutCancellationTokenTests.FiveSecondTimeout(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "InheritedTimeoutAttribute",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Failure),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "InheritedTimeoutAttribute",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(1),
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "InheritedTimeoutAttribute",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			classInstanceArguments = [classArg];

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 32,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.InheritedTimeoutAttribute(cancellationToken)),
				ClassArgumentsProvider = () => new object?[] { classArg },
				MethodArgumentsProvider = () => new object?[] {  },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "InheritedTimeoutAttribute",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.InheritedTimeoutAttribute failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 32,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "InheritedTimeoutAttribute"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "DataTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							40,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.ArgumentsAttribute(1),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							new object[] { 1 },
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TimeoutAttribute(5_000),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							5000,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Failure),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(1),
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			classInstanceArguments = [classArg];

			int methodArg = 1;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataTest(int,System.Threading.CancellationToken):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 40,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataTest(methodArg, cancellationToken)),
				ClassArgumentsProvider = () => new object?[] { classArg },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataTest(int,System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.DataTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 40,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "DataTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "DataSourceTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSourceTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"DataSource",
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TimeoutAttribute(5_000),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSourceTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							5000,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Failure),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSourceTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(1),
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "DataSourceTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							53,
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSourceTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			classInstanceArguments = [classArg];

			int methodArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
			var resettableClassFactory = resettableClassFactoryDelegate();


			testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataSourceTest(int,System.Threading.CancellationToken):0",
				MethodMetadata = testInformation,
				RepeatCount = 0,
				TestFilePath = @"",
				TestLineNumber = 53,
				TestClassFactory = () => resettableClassFactory.Value,
				TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceTest(methodArg, cancellationToken)),
				ClassArgumentsProvider = () => new object?[] { classArg },
				MethodArgumentsProvider = () => new object?[] { methodArg },
				PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
				{
				}
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "DataSourceTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataSourceTest(int,System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.DataSourceTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 53,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "DataSourceTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}

	public async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> DiscoverTestsAsync(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var result0 = await Tests0(sessionId);
		testDefinitions.AddRange(result0.TestDefinitions);
		discoveryFailures.AddRange(result0.DiscoveryFailures);
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

	private async global::System.Threading.Tasks.Task<global::TUnit.Core.DiscoveryResult> Tests0(string sessionId)
	{
		var testDefinitions = new global::System.Collections.Generic.List<global::TUnit.Core.ITestDefinition>();
		var discoveryFailures = new global::System.Collections.Generic.List<global::TUnit.Core.DiscoveryFailure>();
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.MethodMetadata
			{
				Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				Name = "MatrixTest",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TestAttribute(),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MatrixTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"",
							60,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.TimeoutAttribute(5_000),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MatrixTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							5000,
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Failure),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MatrixTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							(global::TUnit.TestProject.Attributes.ExpectedResult)(1),
						}
						,
					}
					,

					new global::TUnit.Core.AttributeMetadata
					{
						Instance = new global::TUnit.Core.CategoryAttribute("Blah"),
						TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
						TargetMemberName = "MatrixTest",
						TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
						ConstructorArguments = new object?[]
						{
							"Blah",
						}
						,
					}

				],
				Parameters = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.Core.MatrixAttribute(1, 2, 3),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Parameter,
								TargetMemberName = "value",
								TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
								ConstructorArguments = new object?[]
								{
									new object[] { 1, 2, 3 },
								}
								,
							}

						],
						ReflectionInfo = null!,
					}
					,
					new global::TUnit.Core.ParameterMetadata<global::System.Threading.CancellationToken>
					{
						Name = "cancellationToken",
						Attributes = [],
						ReflectionInfo = null!,
					}
					,
				],
				Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TimeoutCancellationTokenTests", () => new global::TUnit.Core.ClassMetadata
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
					Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TimeoutCancellationTokenTests", () => new global::TUnit.Core.AssemblyMetadata
					{
						Name = "TimeoutCancellationTokenTests",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
								TargetMemberName = "TimeoutCancellationTokenTests",
							}

						],
					}),
					Name = "TimeoutCancellationTokenTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.MethodDataSourceAttribute("DataSource"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"DataSource",
							}
							,
						}
						,

						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests"),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Class,
							TargetMemberName = "TimeoutCancellationTokenTests",
							TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
							ConstructorArguments = new object?[]
							{
								"Timeout Cancellation Token Tests",
							}
							,
						}

					],
					Parameters = 
					[
						new global::TUnit.Core.ParameterMetadata<int>
						{
							Name = "value",
							Attributes = [],
							ReflectionInfo = null!,
						}
						,
					],
					Properties = [],
					Constructors = 
					[
						new global::TUnit.Core.ConstructorMetadata
						{
							Type = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
							Name = ".ctor",
							IsStatic = false,
							IsPublic = true,
							IsPrivate = false,
							IsProtected = false,
							IsInternal = false,
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.ParameterMetadata<int>
								{
									Name = "value",
									Attributes = [],
									ReflectionInfo = null!,
								}
								,
							],
						}
						,
					],
				}),
			};


			var testBuilderContext = new global::TUnit.Core.TestBuilderContext
			{
				TestMethodName = "MatrixTest",
				ClassInformation = testInformation.Class,
				MethodInformation = testInformation
			};
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::TUnit.TestProject.TimeoutCancellationTokenTests? classInstance = null;
			object?[]? classInstanceArguments = null;
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
			{
				Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
				TestBuilderContext = testBuilderContextAccessor,
				TestInformation = testInformation,
				MembersToGenerate = 
				[
					new global::TUnit.Core.ParameterMetadata<int>
					{
						Name = "value",
						Attributes = 
						[
							new global::TUnit.Core.AttributeMetadata
							{
								Instance = new global::TUnit.Core.MatrixAttribute(1, 2, 3),
								TargetElement = global::TUnit.Core.TestAttributeTarget.Parameter,
								TargetMemberName = "value",
								TargetType = typeof(TUnit.TestProject.TimeoutCancellationTokenTests),
								ConstructorArguments = new object?[]
								{
									new object[] { 1, 2, 3 },
								}
								,
							}

						],
						ReflectionInfo = null!,
					}
					,
				],
				TestSessionId = sessionId,
				TestClassInstance = classInstance,
				ClassInstanceArguments = classInstanceArguments,
			};
			var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute();


			testBuilderContext.DataAttributes.Add(methodDataAttribute);

			var methodArgGeneratedDataArray = ((global::TUnit.Core.IAsyncDataSourceGeneratorAttribute)methodDataAttribute).GenerateAsync(methodArgDataGeneratorMetadata);

			await foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
				classInstanceArguments = [classArg];

				var methodArgGeneratedData = await methodArgGeneratedDataAccessor();
				int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg), sessionId, testBuilderContext);
				var resettableClassFactory = resettableClassFactoryDelegate();


				testDefinitions.Add(new TestDefinition<global::TUnit.TestProject.TimeoutCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.TimeoutCancellationTokenTests(int).MatrixTest(int,System.Threading.CancellationToken):0",
					MethodMetadata = testInformation,
					RepeatCount = 0,
					TestFilePath = @"",
					TestLineNumber = 60,
					TestClassFactory = () => resettableClassFactory.Value,
					TestMethodInvoker = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest(methodArg, cancellationToken)),
					ClassArgumentsProvider = () => new object?[] { classArg },
					MethodArgumentsProvider = () => new object?[] { methodArg },
					PropertiesProvider = () => new global::System.Collections.Generic.Dictionary<string, object?>
					{
					}
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new global::TUnit.Core.TestBuilderContext
				{
					TestMethodName = "MatrixTest",
					ClassInformation = testInformation.Class,
					MethodInformation = testInformation
				};
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			discoveryFailures.Add(new DiscoveryFailure
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.TimeoutCancellationTokenTests(int).MatrixTest(int,System.Threading.CancellationToken):0",
				Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("TimeoutCancellationTokenTests.MatrixTest failed to initialize", exception),
				TestFilePath = @"",
				TestLineNumber = 60,
				TestClassName = "TimeoutCancellationTokenTests",
				TestMethodName = "MatrixTest"
			});
		}
		return new global::TUnit.Core.DiscoveryResult { TestDefinitions = testDefinitions, DiscoveryFailures = discoveryFailures };
	}

}