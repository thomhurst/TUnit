// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class ModuleInitializerTest_TestWithModuleInit_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ModuleInitializerTest>
        {
            TestName = "TestWithModuleInit",
            TestClassType = typeof(global::TUnit.TestProject.ModuleInitializerTest),
            TestMethodName = "TestWithModuleInit",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute()
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 8,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ModuleInitializerTest),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ModuleInitializerTest, UnifiedReflectionFreeTests"),
                Name = "TestWithModuleInit",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
                Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("UnifiedReflectionFreeTests:global::TUnit.TestProject.ModuleInitializerTest", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ModuleInitializerTest),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ModuleInitializerTest, UnifiedReflectionFreeTests"),
                        Name = "ModuleInitializerTest",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("UnifiedReflectionFreeTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "UnifiedReflectionFreeTests" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    // Set ClassMetadata and ContainingTypeMetadata references on properties to avoid circular dependency
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ModuleInitializerTest(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ModuleInitializerTest)instance;
                typedInstance.TestWithModuleInit();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                instance.TestWithModuleInit();
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ModuleInitializerTest_TestWithModuleInit_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ModuleInitializerTest), new ModuleInitializerTest_TestWithModuleInit_TestSource_GUID());
    }
}
