[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_MyTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_MyTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Bugs._1594.MyTests),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1594.MyTests),
					Name = "SetupMyTests",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1594.MyTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1594.MyTests),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Hooks1594", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "Hooks1594",
							Attributes = [],
						}),
						Name = "MyTests",
						Namespace = "TUnit.TestProject.Bugs._1594",
						Attributes = 
						[
							new EngineTest(Pass)
						],
						Parameters = 
						[
							new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
							{
								Name = "myFixture",
								Attributes = [],
								ReflectionInfo = null!,
							},
						],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.Bugs._1594.MyTests)classInstance).SetupMyTests()),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
			];
		}
		public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
		{
			return
			[
			];
		}
	}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_ParentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_ParentTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<>),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<>),
					Name = "SetupParentTests",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1594.ParentTests<>", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<>),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Hooks1594", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "Hooks1594",
							Attributes = [],
						}),
						Name = "ParentTests",
						Namespace = "TUnit.TestProject.Bugs._1594",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.ConvertObject(() => classInstance.GetType().GetMethod("SetupParentTests", []).Invoke(classInstance, [])),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
				new global::TUnit.Core.Hooks.InstanceHookMethod
				{
					ClassType = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
					MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
						Name = "SetupParentTests",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
						],
						Parameters = [],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Hooks1594", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "Hooks1594",
								Attributes = [],
							}),
							Name = "ParentTests",
							Namespace = "TUnit.TestProject.Bugs._1594",
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
								{
									Name = "fixture",
									Attributes = [],
									ReflectionInfo = null!,
								},
							],
							Properties = [],
						}),
},
						Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>)classInstance).SetupParentTests()),
						HookExecutor = DefaultExecutor.Instance,
						Order = 0,
					},
				];
			}
			public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
			{
				return
				[
				];
			}
		}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GrandParentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GrandParentTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod
			{
				ClassType = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<>),
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
				{
					Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<>),
					Name = "SetupBase",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
					],
					Parameters = [],
					Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1594.GrandParentTests<>", () => new global::TUnit.Core.SourceGeneratedClassInformation
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<>),
						Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Hooks1594", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
						{
							Name = "Hooks1594",
							Attributes = [],
						}),
						Name = "GrandParentTests",
						Namespace = "TUnit.TestProject.Bugs._1594",
						Attributes = [],
						Parameters = [],
						Properties = [],
					}),
},
					Body = (classInstance, context, cancellationToken) => AsyncConvert.ConvertObject(() => classInstance.GetType().GetMethod("SetupBase", []).Invoke(classInstance, [])),
					HookExecutor = DefaultExecutor.Instance,
					Order = 0,
				},
				new global::TUnit.Core.Hooks.InstanceHookMethod
				{
					ClassType = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
					MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
					{
						Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
						Name = "SetupBase",
						GenericTypeCount = 0,
						ReturnType = typeof(void),
						Attributes = 
						[
							new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
						],
						Parameters = [],
						Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>", () => new global::TUnit.Core.SourceGeneratedClassInformation
						{
							Parent = null,
							Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
							Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("Hooks1594", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
							{
								Name = "Hooks1594",
								Attributes = [],
							}),
							Name = "GrandParentTests",
							Namespace = "TUnit.TestProject.Bugs._1594",
							Attributes = [],
							Parameters = 
							[
								new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
								{
									Name = "fixture",
									Attributes = [],
									ReflectionInfo = null!,
								},
							],
							Properties = 
							[
new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof(global::TUnit.TestProject.Bugs._1594.MyFixture),
									Name = "Fixture",
									IsStatic = false,
									Attributes = [],
								},
							],
						}),
},
						Body = (classInstance, context, cancellationToken) => AsyncConvert.Convert(() => ((global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>)classInstance).SetupBase()),
						HookExecutor = DefaultExecutor.Instance,
						Order = 0,
					},
				];
			}
			public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
			{
				return
				[
				];
			}
		}

]