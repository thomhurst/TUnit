[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_MyTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_MyTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.Bugs._1594.MyTests>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.Bugs._1594.MyTests),
     Name = "SetupMyTests",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.Bugs._1594.MyTests),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "Hooks1594",
     Attributes = 
     [
         
     ],  
},
     Name = "MyTests",
     Namespace = "TUnit.TestProject.Bugs._1594",
     Attributes = 
     [
         new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1594.MyFixture>()
{
    Shared = global::TUnit.Core.SharedType.None
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
    {
        Name = "myFixture",
        Attributes = 
        [
            
        ]
    }],
     Properties = [],
},
},
				Body = (classInstance, context, cancellationToken) => classInstance.SetupMyTests(),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.Bugs._1594.MyFixture>()
{
    Shared = global::TUnit.Core.SharedType.None
} ],
				AssemblyAttributes = [  ],
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_ParentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_ParentTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
     Name = "SetupParentTests",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.Bugs._1594.ParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "Hooks1594",
     Attributes = 
     [
         
     ],  
},
     Name = "ParentTests",
     Namespace = "TUnit.TestProject.Bugs._1594",
     Attributes = 
     [
         
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
    {
        Name = "fixture",
        Attributes = 
        [
            
        ]
    }],
     Properties = [],
},
},
				Body = (classInstance, context, cancellationToken) => classInstance.SetupParentTests(),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class Hooks_GrandParentTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_GrandParentTests();
		SourceRegistrar.RegisterTestHookSource(instance);
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectBeforeEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestContext>> CollectAfterEveryTestHooks(string sessionId)
	{
		return
		[
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectBeforeTestHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.InstanceHookMethod<global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>>
			{
				MethodInfo = new global::TUnit.Core.SourceGeneratedMethodInformation
{
     Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
     Name = "SetupBase",
     GenericTypeCount = 0,
     ReturnType = typeof(void),
     Attributes = 
     [
         new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
}
     ],  
     Parameters = [],
     Class = new global::TUnit.Core.SourceGeneratedClassInformation
{    
     Type = typeof(global::TUnit.TestProject.Bugs._1594.GrandParentTests<global::TUnit.TestProject.Bugs._1594.MyFixture>),
     Assembly = new global::TUnit.Core.SourceGeneratedAssemblyInformation
{
     Name = "Hooks1594",
     Attributes = 
     [
         
     ],  
},
     Name = "GrandParentTests",
     Namespace = "TUnit.TestProject.Bugs._1594",
     Attributes = 
     [
         
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<global::TUnit.TestProject.Bugs._1594.MyFixture>
    {
        Name = "fixture",
        Attributes = 
        [
            
        ]
    }],
     Properties = [new global::TUnit.Core.SourceGeneratedPropertyInformation
    {
        Type = typeof(global::TUnit.TestProject.Bugs._1594.MyFixture),
        Name = "Fixture",
        IsStatic = false,
        Attributes = 
        [
            
        ]
    }],
},
},
				Body = (classInstance, context, cancellationToken) => classInstance.SetupBase(),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				MethodAttributes = [ new global::TUnit.Core.BeforeAttribute(global::TUnit.Core.HookType.Test)
{
    
} ],
				ClassAttributes = [  ],
				AssemblyAttributes = [  ],
			},
		];
	}
	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.InstanceHookMethod> CollectAfterTestHooks(string sessionId)
	{
		return
		[
		];
	}
}

]