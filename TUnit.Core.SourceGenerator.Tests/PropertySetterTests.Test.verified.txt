[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PropertySetterTests : TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		SourceRegistrar.Register(new PropertySetterTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.PropertySetterTests);
			var methodInfo = typeof(global::TUnit.TestProject.PropertySetterTests).GetMethod("Test", 0, []);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			global::System.String propertyArg = "1";

			global::System.String propertyArg1 = global::TUnit.TestProject.PropertySetterTests.MethodData();
			var propertyInfo2 = testClassType.GetProperty("Property3", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			var propertyDataAttribute2 = propertyInfo2.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>>(true).ElementAt(0);
			var propertyArg2 = propertyDataAttribute2.GenerateDataSources(new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Property,
   TestClassType = testClassType,
   ParameterInfos = null,
   PropertyInfo = propertyInfo2,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
}).ElementAtOrDefault(0)();

			var propertyInfo3 = testClassType.GetProperty("Property4", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			var propertyDataAttribute3 = propertyInfo3.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>>(true).ElementAt(0);
			var propertyArg3 = propertyDataAttribute3.GenerateDataSources(new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Property,
   TestClassType = testClassType,
   ParameterInfos = null,
   PropertyInfo = propertyInfo3,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
}).ElementAtOrDefault(0)();

			var propertyInfo4 = testClassType.GetProperty("Property5", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			var propertyDataAttribute4 = propertyInfo4.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>>(true).ElementAt(0);
			var propertyArg4 = propertyDataAttribute4.GenerateDataSources(new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Property,
   TestClassType = testClassType,
   ParameterInfos = null,
   PropertyInfo = propertyInfo4,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
}).ElementAtOrDefault(0)();

			var propertyInfo5 = testClassType.GetProperty("Property6", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			var propertyDataAttribute5 = propertyInfo5.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>>(true).ElementAt(0);
			var propertyArg5 = propertyDataAttribute5.GenerateDataSources(new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Property,
   TestClassType = testClassType,
   ParameterInfos = null,
   PropertyInfo = propertyInfo5,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
}).ElementAtOrDefault(0)();

			var propertyInfo6 = testClassType.GetProperty("StaticProperty", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
			var propertyDataAttribute6 = propertyInfo6.GetCustomAttributes<global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.StaticInnerModel>>(true).ElementAt(0);
			var propertyArg6 = propertyDataAttribute6.GenerateDataSources(new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Property,
   TestClassType = testClassType,
   ParameterInfos = null,
   PropertyInfo = propertyInfo6,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
}).ElementAtOrDefault(0)();


			global::TUnit.TestProject.PropertySetterTests.StaticProperty = propertyArg6;
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PropertySetterTests>(() => 
			new global::TUnit.TestProject.PropertySetterTests()
			{
				Property1 = propertyArg,
				Property2 = propertyArg1,
				Property3 = propertyArg2,
				Property4 = propertyArg3,
				Property5 = propertyArg4,
				Property6 = propertyArg5,
			}
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.PropertySetterTests>
			{
				TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
				TestClassArguments = [],
				TestMethodArguments = [],
				TestClassProperties = [propertyArg, propertyArg1, propertyArg2, propertyArg3, propertyArg4, propertyArg5],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
				TestFilePath = @"",
				TestLineNumber = 69,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [ propertyDataAttribute2, propertyDataAttribute3, propertyDataAttribute4, propertyDataAttribute5, propertyDataAttribute6 ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new FailedInitializationTest
			{
				TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
				TestClass = typeof(global::TUnit.TestProject.PropertySetterTests),
				ReturnType = typeof(global::TUnit.TestProject.PropertySetterTests).GetMethod("Test", 0, []).ReturnType,
				ParameterTypeFullNames = [],
				TestName = "Test",
				TestFilePath = @"",
				TestLineNumber = 69,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]