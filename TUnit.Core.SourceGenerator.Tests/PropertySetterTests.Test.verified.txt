[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class PropertySetterTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new PropertySetterTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<TestMetadata> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<TestMetadata> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<TestMetadata> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testInformation = new global::TUnit.Core.SourceGeneratedMethodInformation
			{
				Type = typeof(global::TUnit.TestProject.PropertySetterTests),
				Name = "Test",
				GenericTypeCount = 0,
				ReturnType = typeof(global::System.Threading.Tasks.Task),
				Attributes = 
				[
					new global::TUnit.Core.TestAttribute()
				],
				Parameters = [],
				Class = global::TUnit.Core.SourceGeneratedClassInformation.GetOrAdd("global::TUnit.TestProject.PropertySetterTests", () => new global::TUnit.Core.SourceGeneratedClassInformation
				{
					Parent = null,
					Type = typeof(global::TUnit.TestProject.PropertySetterTests),
					Assembly = global::TUnit.Core.SourceGeneratedAssemblyInformation.GetOrAdd("PropertySetterTests", () => new global::TUnit.Core.SourceGeneratedAssemblyInformation
					{
						Name = "PropertySetterTests",
						Attributes = [],
					}),
					Name = "PropertySetterTests",
					Namespace = "TUnit.TestProject",
					Attributes = 
					[
						new EngineTest(Pass),
						new global::TUnit.Core.NotInParallelAttribute("PropertySetterTests")
					],
					Parameters = [],
					Properties = 
					[
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(string),
							Name = "Property1",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.ArgumentsAttribute("1")
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(string),
							Name = "Property2",
							IsStatic = false,
							Attributes = 
							[
								new global::TUnit.Core.MethodDataSourceAttribute("MethodData")
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property3",
							IsStatic = false,
							Attributes = [],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property4",
							IsStatic = false,
							Attributes = [],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property5",
							IsStatic = false,
							Attributes = [],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property6",
							IsStatic = false,
							Attributes = [],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(string),
							Name = "Property7",
							IsStatic = false,
							Attributes = 
							[
								new DataSourceGeneratorTests.AutoFixtureGenerator<string>()
							],
						},
new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
							Name = "StaticProperty",
							IsStatic = true,
							Attributes = [],
						},
					],
				}),
};

				var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
				var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
				global::TUnit.TestProject.PropertySetterTests? classInstance = null;
				object?[]? classInstanceArguments = null;
				classInstanceArguments = [];
				string propertyArg = "1";

				string propertyArg1 = global::TUnit.TestProject.PropertySetterTests.MethodData();
				var propertyDataAttribute2 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>();
				testBuilderContext.DataAttributes.Add(propertyDataAttribute2);

				var propertyArg2 = propertyDataAttribute2.GenerateDataSources(new DataGeneratorMetadata				{
					Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
					TestBuilderContext = testBuilderContextAccessor,
					TestInformation = testInformation,
					MembersToGenerate = 
					[
						new global::TUnit.Core.SourceGeneratedPropertyInformation
						{
							Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
							Name = "Property3",
							IsStatic = false,
							Attributes = [],
						},
					],
					TestSessionId = sessionId,
					TestClassInstance = classInstance,
					ClassInstanceArguments = classInstanceArguments,
				}).ElementAtOrDefault(0)();

				var propertyDataAttribute3 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
				{
					Shared = global::TUnit.Core.SharedType.PerTestSession,
};
					testBuilderContext.DataAttributes.Add(propertyDataAttribute3);

					var propertyArg3 = propertyDataAttribute3.GenerateDataSources(new DataGeneratorMetadata					{
						Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
						TestBuilderContext = testBuilderContextAccessor,
						TestInformation = testInformation,
						MembersToGenerate = 
						[
							new global::TUnit.Core.SourceGeneratedPropertyInformation
							{
								Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
								Name = "Property4",
								IsStatic = false,
								Attributes = [],
							},
						],
						TestSessionId = sessionId,
						TestClassInstance = classInstance,
						ClassInstanceArguments = classInstanceArguments,
					}).ElementAtOrDefault(0)();

					var propertyDataAttribute4 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
					{
						Shared = global::TUnit.Core.SharedType.PerClass,
};
						testBuilderContext.DataAttributes.Add(propertyDataAttribute4);

						var propertyArg4 = propertyDataAttribute4.GenerateDataSources(new DataGeneratorMetadata						{
							Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
							TestBuilderContext = testBuilderContextAccessor,
							TestInformation = testInformation,
							MembersToGenerate = 
							[
								new global::TUnit.Core.SourceGeneratedPropertyInformation
								{
									Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
									Name = "Property5",
									IsStatic = false,
									Attributes = [],
								},
							],
							TestSessionId = sessionId,
							TestClassInstance = classInstance,
							ClassInstanceArguments = classInstanceArguments,
						}).ElementAtOrDefault(0)();

						var propertyDataAttribute5 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.InnerModel>()
						{
							Shared = global::TUnit.Core.SharedType.Keyed,
							Key = "Key",
};
							testBuilderContext.DataAttributes.Add(propertyDataAttribute5);

							var propertyArg5 = propertyDataAttribute5.GenerateDataSources(new DataGeneratorMetadata							{
								Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
								TestBuilderContext = testBuilderContextAccessor,
								TestInformation = testInformation,
								MembersToGenerate = 
								[
									new global::TUnit.Core.SourceGeneratedPropertyInformation
									{
										Type = typeof(global::TUnit.TestProject.PropertySetterTests.InnerModel),
										Name = "Property6",
										IsStatic = false,
										Attributes = [],
									},
								],
								TestSessionId = sessionId,
								TestClassInstance = classInstance,
								ClassInstanceArguments = classInstanceArguments,
							}).ElementAtOrDefault(0)();

							var propertyDataAttribute6 = new global::TUnit.Core.ClassDataSourceAttribute<global::TUnit.TestProject.PropertySetterTests.StaticInnerModel>()
							{
								Shared = global::TUnit.Core.SharedType.PerTestSession,
};
								testBuilderContext.DataAttributes.Add(propertyDataAttribute6);

								var propertyArg6 = propertyDataAttribute6.GenerateDataSources(new DataGeneratorMetadata								{
									Type = global::TUnit.Core.Enums.DataGeneratorType.Property,
									TestBuilderContext = testBuilderContextAccessor,
									TestInformation = testInformation,
									MembersToGenerate = 
									[
										new global::TUnit.Core.SourceGeneratedPropertyInformation
										{
											Type = typeof(global::TUnit.TestProject.PropertySetterTests.StaticInnerModel),
											Name = "StaticProperty",
											IsStatic = true,
											Attributes = [],
										},
									],
									TestSessionId = sessionId,
									TestClassInstance = classInstance,
									ClassInstanceArguments = classInstanceArguments,
								}).ElementAtOrDefault(0)();


								var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.PropertySetterTests>(() => 
								new global::TUnit.TestProject.PropertySetterTests()
								{
									Property1 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg),
									Property2 = global::TUnit.Core.Helpers.CastHelper.Cast<string>(propertyArg1),
									Property3 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg2),
									Property4 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg3),
									Property5 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg4),
									Property6 = global::TUnit.Core.Helpers.CastHelper.Cast<global::TUnit.TestProject.PropertySetterTests.InnerModel>(propertyArg5),
								}
								, sessionId, testBuilderContext);
								var resettableClassFactory = resettableClassFactoryDelegate();
								global::TUnit.TestProject.PropertySetterTests.StaticProperty = propertyArg6;


								nodes.Add(new TestMetadata<global::TUnit.TestProject.PropertySetterTests>
								{
									TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
									TestClassArguments = [],
									TestMethodArguments = [],
									TestClassProperties = new global::System.Collections.Generic.Dictionary<string, object?>
									{
										["Property1"] = propertyArg,
										["Property2"] = propertyArg1,
										["Property3"] = propertyArg2,
										["Property4"] = propertyArg3,
										["Property5"] = propertyArg4,
										["Property6"] = propertyArg5,
									},
									CurrentRepeatAttempt = 0,
									RepeatLimit = 0,
									ResettableClassFactory = resettableClassFactory,
									TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.Test()),
									TestFilePath = @"",
									TestLineNumber = 69,
									TestMethod = testInformation,
									TestBuilderContext = testBuilderContext,
								});
								resettableClassFactory = resettableClassFactoryDelegate();
								testBuilderContext = new();
								testBuilderContextAccessor.Current = testBuilderContext;
							}
							catch (global::System.Exception exception)
							{
								nodes.Add(new FailedTestMetadata<global::TUnit.TestProject.PropertySetterTests>
								{
									TestId = $"TUnit.TestProject.PropertySetterTests.Test:0",
									MethodName = $"Test",
									Exception = new TUnit.Core.Exceptions.TestFailedInitializationException("PropertySetterTests.Test failed to initialize", exception),
									TestFilePath = @"",
									TestLineNumber = 69,
								});
							}
							return nodes;
						}
					}

]