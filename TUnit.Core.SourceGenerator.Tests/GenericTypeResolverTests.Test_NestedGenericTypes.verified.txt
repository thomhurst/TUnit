// <auto-generated/>
#pragma warning disable

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace TUnit.Generated;
internal sealed class NestedGenericTestClass_TestMethod_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Threading.Tasks.ValueTask<global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>> GetTestsAsync(string testSessionId)
    {
        var tests = new global::System.Collections.Generic.List<global::TUnit.Core.TestMetadata>();
        var metadata = new global::TUnit.Core.GenericTestMetadata
        {
            TestName = "TestMethod",
            TestClassType = typeof(global::TUnit.TestProject.NestedGenericTestClass<>),
            TestMethodName = "TestMethod",
            Categories = global::System.Array.Empty<string>(),
            TimeoutMs = null,
            RetryCount = 0,
            RepeatCount = 0,
            CanRunInParallel = true,
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(global::System.Collections.Generic.List<int>)),
                new global::TUnit.Core.GenerateGenericTestAttribute(typeof(global::System.Collections.Generic.Dictionary<string, int>))
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            ClassDataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
            },
            PropertyDataSources = new global::TUnit.Core.PropertyDataSource[]
            {
            },
            PropertyInjections = new global::TUnit.Core.PropertyInjectionData[]
            {
            },
            ParameterTypes = new global::System.Type[]
            {
            },
            TestMethodParameterTypes = new string[]
            {
            },
            MethodMetadata = new global::TUnit.Core.MethodMetadata
{
Type = typeof(global::TUnit.TestProject.NestedGenericTestClass<>),
TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("TUnit.TestProject.NestedGenericTestClass<>, GenericTypeResolverTests", global::TUnit.Core.TypeReference.CreateGenericParameter(0, false, "T")),
Name = "TestMethod",
GenericTypeCount = 0,
ReturnType = typeof(void),
ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Class = global::TUnit.Core.ClassMetadata.GetOrAdd("GenericTypeResolverTests:global::TUnit.TestProject.NestedGenericTestClass<>", () => 
{
var classMetadata = new global::TUnit.Core.ClassMetadata
{
Type = typeof(global::TUnit.TestProject.NestedGenericTestClass<>),
TypeReference = global::TUnit.Core.TypeReference.CreateConstructedGeneric("TUnit.TestProject.NestedGenericTestClass<>, GenericTypeResolverTests", global::TUnit.Core.TypeReference.CreateGenericParameter(0, false, "T")),
Name = "NestedGenericTestClass",
Namespace = "TUnit.TestProject",
Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("GenericTypeResolverTests", () => new global::TUnit.Core.AssemblyMetadata { Name = "GenericTypeResolverTests" }),
Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
Parent = null
};
// Set ClassMetadata reference on properties to avoid circular dependency
foreach (var prop in classMetadata.Properties)
{
prop.ClassMetadata = classMetadata;
}
return classMetadata;
})
},
            GenericTypeInfo = new global::TUnit.Core.GenericTypeInfo
            {
                ParameterNames = new string[]
                {
                    "T",
                },
                Constraints = new global::TUnit.Core.GenericParameterConstraints[]
                {
                    new global::TUnit.Core.GenericParameterConstraints
                    {
                        ParameterName = "T",
                        HasDefaultConstructorConstraint = false,
                        InterfaceConstraints = new global::System.Type[]
                        {
                        }
                    },
                }
            },
            InstanceFactory = (typeArgs, args) =>
            {
                var openGenericType = typeof(global::TUnit.TestProject.NestedGenericTestClass<>);
                var closedGenericType = global::TUnit.Core.Helpers.GenericTypeHelper.MakeGenericTypeSafe(openGenericType, typeArgs);
                // Create instance with parameterless constructor
                var instance = global::System.Activator.CreateInstance(closedGenericType);
                return instance!;
            },
            TestInvoker = async (instance, args) =>
            {
                var instanceType = instance.GetType();
                var method = instanceType.GetMethod("TestMethod", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                if (method == null)
                {
                    throw new System.InvalidOperationException($"Method 'TestMethod' not found on type {instanceType.FullName}");
                }
                // Prepare method arguments
                var methodArgs = new object?[args.Length];
                args.CopyTo(methodArgs, 0);
                // Invoke the method
                var result = method.Invoke(instance, methodArgs);
            },
        };
        metadata.TestSessionId = testSessionId;
        tests.Add(metadata);
        return tests;
    }
}
internal static class NestedGenericTestClass_TestMethod_ModuleInitializer_GUID
{
    [System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.NestedGenericTestClass<>), new NestedGenericTestClass_TestMethod_TestSource_GUID());
    }
}
