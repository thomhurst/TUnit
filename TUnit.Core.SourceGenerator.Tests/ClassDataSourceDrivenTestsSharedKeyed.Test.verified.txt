// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>
        {
            TestName = "DataSource_Class",
            TestClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
            TestMethodName = "DataSource_Class",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{Shared = global::TUnit.Core.SharedType.Keyed,Key = "🔑",},
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{Shared = global::TUnit.Core.SharedType.Keyed,Key = "🔑",},
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 9,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed, TestsBase`1"),
                Name = "DataSource_Class",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(SomeAsyncDisposableClass))
                    {
                        Name = "value",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("SomeAsyncDisposableClass, TestsBase`1"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed).GetMethod("DataSource_Class", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(SomeAsyncDisposableClass) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed, TestsBase`1"),
                        Name = "ClassDataSourceDrivenTestsSharedKeyed",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed)instance;
                switch (args.Length)
                {
                    case 1:
                        typedInstance.DataSource_Class(TUnit.Core.Helpers.CastHelper.Cast<SomeAsyncDisposableClass>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        instance.DataSource_Class(TUnit.Core.Helpers.CastHelper.Cast<SomeAsyncDisposableClass>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), new ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_TestSource_GUID());
    }
}


// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable

#nullable enable
namespace TUnit.Generated;
internal sealed class ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_Generic_TestSource_GUID : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
    public async global::System.Collections.Generic.IAsyncEnumerable<global::TUnit.Core.TestMetadata> GetTestsAsync(string testSessionId, [global::System.Runtime.CompilerServices.EnumeratorCancellation] global::System.Threading.CancellationToken cancellationToken = default)
    {
        var metadata = new global::TUnit.Core.TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>
        {
            TestName = "DataSource_Class_Generic",
            TestClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
            TestMethodName = "DataSource_Class_Generic",
            Dependencies = global::System.Array.Empty<global::TUnit.Core.TestDependency>(),
            AttributeFactory = () =>
            [
                new global::TUnit.Core.TestAttribute(),
                new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{Shared = global::TUnit.Core.SharedType.Keyed,Key = "🔑",},
                new global::TUnit.TestProject.Attributes.EngineTest(global::TUnit.TestProject.Attributes.ExpectedResult.Pass)
            ],
            DataSources = new global::TUnit.Core.IDataSourceAttribute[]
            {
                new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{Shared = global::TUnit.Core.SharedType.Keyed,Key = "🔑",},
            },
            ClassDataSources = global::System.Array.Empty<global::TUnit.Core.IDataSourceAttribute>(),
            PropertyDataSources = global::System.Array.Empty<global::TUnit.Core.PropertyDataSource>(),
            PropertyInjections = global::System.Array.Empty<global::TUnit.Core.PropertyInjectionData>(),
            InheritanceDepth = 0,
            FilePath = @"",
            LineNumber = 16,
            MethodMetadata = new global::TUnit.Core.MethodMetadata
            {
                Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
                TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed, TestsBase`1"),
                Name = "DataSource_Class_Generic",
                GenericTypeCount = 0,
                ReturnType = typeof(void),
                ReturnTypeReference = global::TUnit.Core.TypeReference.CreateConcrete("void, System.Private.CoreLib"),
                Parameters = new global::TUnit.Core.ParameterMetadata[]
                {
                    new global::TUnit.Core.ParameterMetadata(typeof(SomeAsyncDisposableClass))
                    {
                        Name = "value",
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("SomeAsyncDisposableClass, TestsBase`1"),
                        IsNullable = false,
                        ReflectionInfo = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed).GetMethod("DataSource_Class_Generic", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.Instance, null, new global::System.Type[] { typeof(SomeAsyncDisposableClass) }, null)!.GetParameters()[0]
                    }
                },
                Class = global::TUnit.Core.ClassMetadata.GetOrAdd("TestsBase`1:global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed", () => 
                {
                    var classMetadata = new global::TUnit.Core.ClassMetadata
                    {
                        Type = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
                        TypeReference = global::TUnit.Core.TypeReference.CreateConcrete("TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed, TestsBase`1"),
                        Name = "ClassDataSourceDrivenTestsSharedKeyed",
                        Namespace = "TUnit.TestProject",
                        Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestsBase`1", () => new global::TUnit.Core.AssemblyMetadata { Name = "TestsBase`1" }),
                        Parameters = global::System.Array.Empty<global::TUnit.Core.ParameterMetadata>(),
                        Properties = global::System.Array.Empty<global::TUnit.Core.PropertyMetadata>(),
                        Parent = null
                    };
                    foreach (var prop in classMetadata.Properties)
                    {
                        prop.ClassMetadata = classMetadata;
                        prop.ContainingTypeMetadata = classMetadata;
                    }
                    return classMetadata;
                })
            },
            InstanceFactory = (typeArgs, args) => new global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed(),
            TestInvoker = async (instance, args) =>
            {
                var typedInstance = (global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed)instance;
                switch (args.Length)
                {
                    case 1:
                        typedInstance.DataSource_Class_Generic(TUnit.Core.Helpers.CastHelper.Cast<SomeAsyncDisposableClass>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
            InvokeTypedTest = async (instance, args, cancellationToken) =>
            {
                switch (args.Length)
                {
                    case 1:
                        instance.DataSource_Class_Generic(TUnit.Core.Helpers.CastHelper.Cast<SomeAsyncDisposableClass>(args[0]));
                        break;
                    default:
                        throw new global::System.ArgumentException($"Expected exactly 1 argument, but got {args.Length}");
                }
                await global::System.Threading.Tasks.Task.CompletedTask;
            },
        };
        metadata.UseRuntimeDataGeneration(testSessionId);
        yield return metadata;
        yield break;
    }
}
internal static class ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_Generic_ModuleInitializer_GUID
{
    [global::System.Runtime.CompilerServices.ModuleInitializer]
    public static void Initialize()
    {
        global::TUnit.Core.SourceRegistrar.Register(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), new ClassDataSourceDrivenTestsSharedKeyed_DataSource_Class_Generic_TestSource_GUID());
    }
}
