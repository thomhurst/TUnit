[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassDataSourceDrivenTestsSharedKeyed : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTestsSharedKeyed());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), "DataSource_Class", 0, [typeof(SomeAsyncDisposableClass)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{
    Shared = global::TUnit.Core.SharedType.Keyed, Key = "🔑",
};

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed.DataSource_Class(SomeAsyncDisposableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArgGeneratedData],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Class(methodArgGeneratedData)),
					TestFilePath = @"",
					TestLineNumber = 7,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{
    Shared = global::TUnit.Core.SharedType.Keyed, Key = "🔑",
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed.DataSource_Class(SomeAsyncDisposableClass):0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), "DataSource_Class", 0, [typeof(SomeAsyncDisposableClass)]).ReturnType,
				ParameterTypeFullNames = [typeof(SomeAsyncDisposableClass)],
				TestName = "DataSource_Class",
				TestFilePath = @"",
				TestLineNumber = 7,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class ClassDataSourceDrivenTestsSharedKeyed : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new ClassDataSourceDrivenTestsSharedKeyed());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), "DataSource_Class_Generic", 0, [typeof(SomeAsyncDisposableClass)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = TUnit.Core.Enums.DataGeneratorType.Parameters,
   TestClassType = testClassType,
   ParameterInfos = methodInfo.GetParameters(),
   PropertyInfo = null,
   TestBuilderContext = testBuilderContextAccessor,
   TestSessionId = sessionId,
};
			var methodDataAttribute = new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{
    Shared = global::TUnit.Core.SharedType.Keyed, Key = "🔑",
};

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>(() => 
				new global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed()
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed>
				{
					TestId = $"global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed.DataSource_Class_Generic(SomeAsyncDisposableClass):0",
					TestClassArguments = [],
					TestMethodArguments = [methodArgGeneratedData],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSource_Class_Generic(methodArgGeneratedData)),
					TestFilePath = @"",
					TestLineNumber = 14,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>()
{
    Shared = global::TUnit.Core.SharedType.Keyed, Key = "🔑",
} ],
					ClassAttributes = [  ],
					AssemblyAttributes = [  ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.ClassDataSourceAttribute<SomeAsyncDisposableClass>:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed.DataSource_Class_Generic(SomeAsyncDisposableClass):0",
				TestClass = typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.ClassDataSourceDrivenTestsSharedKeyed), "DataSource_Class_Generic", 0, [typeof(SomeAsyncDisposableClass)]).ReturnType,
				ParameterTypeFullNames = [typeof(SomeAsyncDisposableClass)],
				TestName = "DataSource_Class_Generic",
				TestFilePath = @"",
				TestLineNumber = 14,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]