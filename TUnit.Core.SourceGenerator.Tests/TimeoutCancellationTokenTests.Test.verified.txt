[  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DefaultTest", 0, [typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DefaultTest(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DefaultTest(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 15,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DefaultTest(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DefaultTest", 0, [typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "DefaultTest",
				TestFilePath = @"",
				TestLineNumber = 15,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "BasicTest", 0, [typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).BasicTest(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.BasicTest(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 21,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.TimeoutAttribute(5_000)
{
    
}, new global::TUnit.Core.CategoryAttribute("Blah")
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).BasicTest(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "BasicTest", 0, [typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "BasicTest",
				TestFilePath = @"",
				TestLineNumber = 21,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "InheritedTimeoutAttribute", 0, [typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.InheritedTimeoutAttribute(cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 29,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.TestProject.TimeoutCancellationTokenTests.FiveSecondTimeout()
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).InheritedTimeoutAttribute(System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "InheritedTimeoutAttribute", 0, [typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(global::System.Threading.CancellationToken)],
				TestName = "InheritedTimeoutAttribute",
				TestFilePath = @"",
				TestLineNumber = 29,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DataTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			int methodArg = 1;

			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataTest(int,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 36,
				TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.ArgumentsAttribute(1)
{
    
}, new global::TUnit.Core.TimeoutAttribute(5_000)
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.ArgumentsAttribute:{testMethodDataIndex}:TL-ARGS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataTest(int,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DataTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(int), typeof(global::System.Threading.CancellationToken)],
				TestName = "DataTest",
				TestFilePath = @"",
				TestLineNumber = 36,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DataSourceTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

			int methodArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();
			var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
			new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
			, sessionId, testBuilderContext);

			var resettableClassFactory = resettableClassFactoryDelegate();

			nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataSourceTest(int,System.Threading.CancellationToken):0",
				TestClassArguments = [classArg],
				TestMethodArguments = [methodArg],
				TestClassProperties = [],
				CurrentRepeatAttempt = 0,
				RepeatLimit = 0,
				MethodInfo = methodInfo,
				ResettableClassFactory = resettableClassFactory,
				TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.DataSourceTest(methodArg, cancellationToken)),
				TestFilePath = @"",
				TestLineNumber = 47,
				TestAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.TimeoutAttribute(5_000)
{
    
}, new global::TUnit.Core.TestAttribute()
{
    
} ],
				ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
				AssemblyAttributes = [  ],
				DataAttributes = [  ],
				TestBuilderContext = testBuilderContext,
			});
			resettableClassFactory = resettableClassFactoryDelegate();
			testBuilderContext = new();
			testBuilderContextAccessor.Current = testBuilderContext;
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MethodDataSourceAttribute:{testMethodDataIndex}:TL-MDS0:TUnit.TestProject.TimeoutCancellationTokenTests(int).DataSourceTest(int,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "DataSourceTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(int), typeof(global::System.Threading.CancellationToken)],
				TestName = "DataSourceTest",
				TestFilePath = @"",
				TestLineNumber = 47,
				Exception = exception,
			});
		}
		return nodes;
	}
}

  
// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::TUnit.Core;
using global::TUnit.Core.Extensions;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
file partial class TimeoutCancellationTokenTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		global::TUnit.Core.SourceRegistrar.Register(new TimeoutCancellationTokenTests());
	}
	public global::System.Collections.Generic.IReadOnlyList<SourceGeneratedTestNode> CollectTests(string sessionId)
	{
		return Tests0(sessionId);
	}
	private global::System.Collections.Generic.List<SourceGeneratedTestNode> Tests0(string sessionId)
	{
		global::System.Collections.Generic.List<SourceGeneratedTestNode> nodes = [];
		var classDataIndex = 0;
		var testMethodDataIndex = 0;
		try
		{
			var testClassType = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests);
			var methodInfo = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "MatrixTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]);

			var testBuilderContext = new global::TUnit.Core.TestBuilderContext();
			var testBuilderContextAccessor = new global::TUnit.Core.TestBuilderContextAccessor(testBuilderContext);
			var classInformation = new global::TUnit.Core.SourceGeneratedClassInformation<global::TUnit.TestProject.TimeoutCancellationTokenTests>
{
     Name = "TimeoutCancellationTokenTests",
     Attributes = 
     [
         new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, 
new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value",
        Attributes = 
        [
            
        ]
    }],
     Properties = [],
};
			var testInformation = new global::TUnit.Core.SourceGeneratedTestInformation<global::TUnit.TestProject.TimeoutCancellationTokenTests>
{
     Name = "MatrixTest",
     Attributes = 
     [
         new global::TUnit.Core.TestAttribute()
{
    
}, 
new global::TUnit.Core.MatrixDataSourceAttribute()
{
    
}, 
new global::TUnit.Core.TimeoutAttribute(5_000)
{
    
}, 
new global::TUnit.Core.CategoryAttribute("Blah")
{
    
}
     ],  
     Parameters = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value",
        Attributes = 
        [
            new global::TUnit.Core.MatrixAttribute(1, 2, 3)
{
    
}
        ]
    }, 
new global::TUnit.Core.SourceGeneratedParameterInformation<global::System.Threading.CancellationToken>
    {
        Name = "cancellationToken",
        Attributes = 
        [
            
        ]
    }],
     Class = classInformation,
};
			var methodArgDataGeneratorMetadata = new DataGeneratorMetadata
{
   Type = global::TUnit.Core.Enums.DataGeneratorType.TestParameters,
   TestClassType = testClassType,
   TestBuilderContext = testBuilderContextAccessor,
   TestInformation = testInformation,
   MembersToGenerate = [new global::TUnit.Core.SourceGeneratedParameterInformation<int>
    {
        Name = "value",
        Attributes = 
        [
            new global::TUnit.Core.MatrixAttribute(1, 2, 3)
{
    
}
        ]
    }],
   TestSessionId = sessionId,
};
			var methodDataAttribute = new global::TUnit.Core.MatrixDataSourceAttribute()
{
    
};

			var methodArgGeneratedDataArray = methodDataAttribute.GenerateDataSources(methodArgDataGeneratorMetadata);

			foreach (var methodArgGeneratedDataAccessor in methodArgGeneratedDataArray)
			{
				testMethodDataIndex++;
				int classArg = global::TUnit.TestProject.TimeoutCancellationTokenTests.DataSource();

				var methodArgGeneratedData = methodArgGeneratedDataAccessor();
				int methodArg = global::TUnit.Core.Helpers.CastHelper.Cast<int>(methodArgGeneratedData[0]);
				var resettableClassFactoryDelegate = () => new ResettableLazy<global::TUnit.TestProject.TimeoutCancellationTokenTests>(() => 
				new global::TUnit.TestProject.TimeoutCancellationTokenTests(classArg)
				, sessionId, testBuilderContext);

				var resettableClassFactory = resettableClassFactoryDelegate();

				nodes.Add(new TestMetadata<global::TUnit.TestProject.TimeoutCancellationTokenTests>
				{
					TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.TimeoutCancellationTokenTests(int).MatrixTest(int,System.Threading.CancellationToken):0",
					TestClassArguments = [classArg],
					TestMethodArguments = [methodArg],
					TestClassProperties = [],
					CurrentRepeatAttempt = 0,
					RepeatLimit = 0,
					MethodInfo = methodInfo,
					ResettableClassFactory = resettableClassFactory,
					TestMethodFactory = (classInstance, cancellationToken) => AsyncConvert.Convert(() => classInstance.MatrixTest(methodArg, cancellationToken)),
					TestFilePath = @"",
					TestLineNumber = 54,
					TestAttributes = [ new global::TUnit.Core.TestAttribute()
{
    
}, new global::TUnit.Core.MatrixDataSourceAttribute()
{
    
}, new global::TUnit.Core.TimeoutAttribute(5_000)
{
    
}, new global::TUnit.Core.CategoryAttribute("Blah")
{
    
} ],
					ClassAttributes = [ new global::TUnit.Core.MethodDataSourceAttribute("DataSource")
{
    
}, new global::TUnit.Core.CategoryAttribute("Timeout Cancellation Token Tests")
{
    
} ],
					AssemblyAttributes = [  ],
					DataAttributes = [ methodDataAttribute ],
					TestBuilderContext = testBuilderContext,
				});
				resettableClassFactory = resettableClassFactoryDelegate();
				testBuilderContext = new();
				testBuilderContextAccessor.Current = testBuilderContext;
			}
		}
		catch (global::System.Exception exception)
		{
			nodes.Add(new global::TUnit.Core.FailedInitializationTest
			{
				TestId = $"global::TUnit.Core.MethodDataSourceAttribute:{classDataIndex}:CL-MDS0:global::TUnit.Core.MatrixDataSourceAttribute:{testMethodDataIndex}:TL-GAC0:TUnit.TestProject.TimeoutCancellationTokenTests(int).MatrixTest(int,System.Threading.CancellationToken):0",
				TestClass = typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests),
				ReturnType = global::TUnit.Core.Helpers.MethodInfoRetriever.GetMethodInfo(typeof(global::TUnit.TestProject.TimeoutCancellationTokenTests), "MatrixTest", 0, [typeof(int), typeof(global::System.Threading.CancellationToken)]).ReturnType,
				ParameterTypeFullNames = [typeof(int), typeof(global::System.Threading.CancellationToken)],
				TestName = "MatrixTest",
				TestFilePath = @"",
				TestLineNumber = 54,
				Exception = exception,
			});
		}
		return nodes;
	}
}

]