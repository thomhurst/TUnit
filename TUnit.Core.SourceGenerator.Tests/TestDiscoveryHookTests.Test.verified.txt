// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_TestDiscoveryHookTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestDiscoveryHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_TestDiscoveryHookTests();
		SourceRegistrar.RegisterTestDiscoveryHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.BeforeTestDiscoveryContext>> CollectBeforeTestDiscoveryHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.BeforeTestDiscoveryHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
					Name = "BeforeDiscovery",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.BeforeEveryAttribute(global::TUnit.Core.HookType.TestDiscovery)
							{
								Order = 5,
							},
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "BeforeDiscovery",
							TargetType = typeof(TUnit.TestProject.TestDiscoveryHookTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(4),
								"",
								5,
							}
							,
							NamedArguments = new global::System.Collections.Generic.Dictionary<string, object?>()
							{
								["Order"] = 5,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TestDiscoveryHookTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestDiscoveryHookTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "TestDiscoveryHookTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "TestDiscoveryHookTests",
								}

							],
						}),
						Name = "TestDiscoveryHookTests",
						Namespace = "TUnit.TestProject",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.TestDiscoveryHookTests.BeforeDiscovery()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 5,
				FilePath = @"",
				LineNumber = 5,
			},
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestDiscoveryContext>> CollectAfterTestDiscoveryHooks(string sessionId)
	{
		return
		[
		];
	}

}

// ===== FILE SEPARATOR =====

// <auto-generated/>
#pragma warning disable
using global::System.Linq;
using global::System.Reflection;
using global::System.Runtime.CompilerServices;
using global::TUnit.Core;
using global::TUnit.Core.Hooks;
using global::TUnit.Core.Interfaces;

namespace TUnit.SourceGenerated;

[global::System.Diagnostics.StackTraceHidden]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[System.CodeDom.Compiler.GeneratedCode("TUnit", "1.0.0.0")]
file partial class Hooks_TestDiscoveryHookTests : global::TUnit.Core.Interfaces.SourceGenerator.ITestDiscoveryHookSource
{
	[global::System.Runtime.CompilerServices.ModuleInitializer]
	public static void Initialise()
	{
		var instance = new Hooks_TestDiscoveryHookTests();
		SourceRegistrar.RegisterTestDiscoveryHookSource(instance);
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.BeforeTestDiscoveryContext>> CollectBeforeTestDiscoveryHooks(string sessionId)
	{
		return
		[
		];
	}

	public global::System.Collections.Generic.IReadOnlyList<global::TUnit.Core.Hooks.StaticHookMethod<global::TUnit.Core.TestDiscoveryContext>> CollectAfterTestDiscoveryHooks(string sessionId)
	{
		return
		[
			new global::TUnit.Core.Hooks.AfterTestDiscoveryHookMethod
			{
				MethodInfo = new global::TUnit.Core.MethodMetadata
				{
					Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
					Name = "AfterDiscovery",
					GenericTypeCount = 0,
					ReturnType = typeof(void),
					Attributes = 
					[
						new global::TUnit.Core.AttributeMetadata
						{
							Instance = new global::TUnit.Core.AfterEveryAttribute(global::TUnit.Core.HookType.TestDiscovery),
							TargetElement = global::TUnit.Core.TestAttributeTarget.Method,
							TargetMemberName = "AfterDiscovery",
							TargetType = typeof(TUnit.TestProject.TestDiscoveryHookTests),
							ConstructorArguments = new object?[]
							{
								(global::TUnit.Core.HookType)(4),
								"",
								10,
							}
							,
						}

					],
					Parameters = [],
					Class = global::TUnit.Core.ClassMetadata.GetOrAdd("global::TUnit.TestProject.TestDiscoveryHookTests", () => new global::TUnit.Core.ClassMetadata
					{
						Parent = null,
						Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
						Assembly = global::TUnit.Core.AssemblyMetadata.GetOrAdd("TestDiscoveryHookTests", () => new global::TUnit.Core.AssemblyMetadata
						{
							Name = "TestDiscoveryHookTests",
							Attributes = 
							[
								new global::TUnit.Core.AttributeMetadata
								{
									Instance = new global::TUnit.TestProject.Attributes.ClassDisplayNameAttribute(),
									TargetElement = global::TUnit.Core.TestAttributeTarget.Assembly,
									TargetMemberName = "TestDiscoveryHookTests",
								}

							],
						}),
						Name = "TestDiscoveryHookTests",
						Namespace = "TUnit.TestProject",
						Attributes = [],
						Parameters = [],
						Properties = [],
						Constructors = 
						[
							new global::TUnit.Core.ConstructorMetadata
							{
								Type = typeof(global::TUnit.TestProject.TestDiscoveryHookTests),
								Name = ".ctor",
								IsStatic = false,
								IsPublic = true,
								IsPrivate = false,
								IsProtected = false,
								IsInternal = false,
								Attributes = [],
								Parameters = [],
							}
							,
						],
					}),
				}
				,

				Body = (context, cancellationToken) => AsyncConvert.Convert(() => global::TUnit.TestProject.TestDiscoveryHookTests.AfterDiscovery()),
				HookExecutor = DefaultExecutor.Instance,
				Order = 0,
				FilePath = @"",
				LineNumber = 10,
			},
		];
	}

}