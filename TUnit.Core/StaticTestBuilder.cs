namespace TUnit.Core;

/// <summary>
/// Builds TestDefinition instances from StaticTestDefinition at runtime.
/// This class is AOT and trimming compatible as it uses only pre-compiled delegates
/// and direct type references generated by the source generator.
/// </summary>
public class StaticTestBuilder : ITestDefinitionBuilder
{
    /// <summary>
    /// Builds all test definitions from the given test descriptor.
    /// </summary>
    public async Task<IEnumerable<TestDefinition>> BuildTestDefinitionsAsync(ITestDescriptor testDescriptor, CancellationToken cancellationToken = default)
    {
        if (testDescriptor is not StaticTestDefinition staticDef)
        {
            throw new ArgumentException($"StaticTestBuilder can only process StaticTestDefinition, not {testDescriptor.GetType().Name}");
        }
        
        return await BuildTestsFromStaticDefinitionAsync(staticDef, cancellationToken);
    }
    
    /// <summary>
    /// Builds a single test definition from the given static definition.
    /// Data expansion is handled by UnifiedTestBuilder when BuildTests is called.
    /// </summary>
    private async Task<IEnumerable<TestDefinition>> BuildTestsFromStaticDefinitionAsync(
        StaticTestDefinition staticDef, 
        CancellationToken cancellationToken = default)
    {
        // Create metadata for the test method
        var methodMetadata = CreateMethodMetadata(staticDef);
        
        // Get property values provider
        var propertyValuesList = staticDef.PropertyValuesProvider().ToList();
        var firstPropertyValues = propertyValuesList.Any() ? propertyValuesList.First() : new Dictionary<string, object?>();
        
        // Create a single test definition with data providers
        // The UnifiedTestBuilder will expand these into multiple DiscoveredTests
        var testDefinition = new TestDefinition
        {
            TestId = staticDef.TestId,
            MethodMetadata = methodMetadata,
            TestFilePath = staticDef.TestFilePath,
            TestLineNumber = staticDef.TestLineNumber,
            TestClassFactory = () => staticDef.ClassFactory(Array.Empty<object?>()),
            TestMethodInvoker = async (instance, ct) => await staticDef.MethodInvoker(instance, Array.Empty<object?>()),
            PropertiesProvider = () => firstPropertyValues,
            ClassDataProvider = staticDef.ClassDataProvider,
            MethodDataProvider = staticDef.MethodDataProvider,
            OriginalClassFactory = staticDef.ClassFactory,
            OriginalMethodInvoker = staticDef.MethodInvoker
        };
        
        return await Task.FromResult(new[] { testDefinition });
    }
    
    private static MethodMetadata CreateMethodMetadata(StaticTestDefinition staticDef)
    {
        return new MethodMetadata
        {
            Name = staticDef.TestMethodInfo.Name,
            ReflectionInformation = staticDef.TestMethodInfo,
            Parameters = Array.Empty<ParameterMetadata>(),
            GenericTypeCount = 0,
            Class = new ClassMetadata 
            { 
                Type = staticDef.TestClassType,
                Name = staticDef.TestClassType.Name,
                Namespace = staticDef.TestClassType.Namespace ?? string.Empty,
                TypeReference = TypeReference.CreateConcrete(staticDef.TestClassType.AssemblyQualifiedName!),
                Assembly = new AssemblyMetadata
                {
                    Name = staticDef.TestClassType.Assembly.GetName().Name ?? string.Empty,
                    Attributes = Array.Empty<AttributeMetadata>()
                },
                Parameters = Array.Empty<ParameterMetadata>(),
                Properties = Array.Empty<PropertyMetadata>(),
                Parent = null,
                Attributes = Array.Empty<AttributeMetadata>()
            },
            ReturnTypeReference = TypeReference.CreateConcrete(staticDef.TestMethodInfo.ReturnType.AssemblyQualifiedName!),
            ReturnType = staticDef.TestMethodInfo.ReturnType,
            TypeReference = TypeReference.CreateConcrete(staticDef.TestClassType.AssemblyQualifiedName!),
            Type = staticDef.TestClassType,
            Attributes = Array.Empty<AttributeMetadata>()
        };
    }
}