"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3411],{2740:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"assertions/awaiting","title":"Awaiting","description":"In TUnit you await your assertions, and this serves two purposes:","source":"@site/docs/assertions/awaiting.md","sourceDirName":"assertions","slug":"/assertions/awaiting","permalink":"/docs/assertions/awaiting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Ordering Tests","permalink":"/docs/test-authoring/order"},"next":{"title":"And Conditions","permalink":"/docs/assertions/and-conditions"}}');var o=n(4848),i=n(8453);const r={},a="Awaiting",c={},d=[];function l(e){const s={br:"br",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"awaiting",children:"Awaiting"})}),"\n",(0,o.jsxs)(s.p,{children:["In TUnit you ",(0,o.jsx)(s.code,{children:"await"})," your assertions, and this serves two purposes:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:["the ",(0,o.jsx)(s.code,{children:"await"})," keyword is responsible for performing the assertion, before you call await we're building a chain of assertion rules."]}),"\n",(0,o.jsxs)(s.li,{children:["it allows executing and asserting on ",(0,o.jsx)(s.code,{children:"async"})," delegates without performing sync-over-async"]}),"\n"]}),"\n",(0,o.jsxs)(s.p,{children:["Because of this, your tests should be ",(0,o.jsx)(s.code,{children:"async"})," and return a ",(0,o.jsx)(s.code,{children:"Task"}),"."]}),"\n",(0,o.jsxs)(s.p,{children:["Don't worry about forgetting to ",(0,o.jsx)(s.code,{children:"await"})," - There's an analyzer built in that will notify you if you've missed any!",(0,o.jsx)(s.br,{}),"\n","If you forget to ",(0,o.jsx)(s.code,{children:"await"}),", your assertion will not actually be executed, and your test may pass when it should fail."]}),"\n",(0,o.jsx)(s.p,{children:"This will error:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-csharp",children:"    [Test]\n    public void MyTest()\n    {\n        var result = Add(1, 2);\n\n        Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,o.jsx)(s.p,{children:"This won't:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-csharp",children:"    [Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        await Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,o.jsxs)(s.p,{children:["TUnit is able to take in asynchronous delegates. To be able to assert on these, we need to execute the code. We want to avoid sync-over-async, as this can cause problems and block the thread pool, slowing down your test suite.\nAnd with how fast .NET has become, the overhead of ",(0,o.jsx)(s.code,{children:"Task"}),"s and ",(0,o.jsx)(s.code,{children:"async"})," methods shouldn't be noticable."]})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>a});var t=n(6540);const o={},i=t.createContext(o);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);