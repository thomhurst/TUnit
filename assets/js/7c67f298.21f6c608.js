"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6479],{4497:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"examples/aspnet","title":"ASP.NET Core Web App/Api","description":"If you want to test a web app, you can utilise the Microsoft.Mvc.Testing packages to wrap your web app within an in-memory test server.","source":"@site/docs/examples/aspnet.md","sourceDirName":"examples","slug":"/examples/aspnet","permalink":"/docs/examples/aspnet","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Playwright","permalink":"/docs/examples/playwright"},"next":{"title":"Instrumenting: Global Test IDs","permalink":"/docs/examples/instrumenting_global_test_ids"}}');var a=n(4848),i=n(8453);const r={sidebar_position:2},o="ASP.NET Core Web App/Api",c={},l=[];function p(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"aspnet-core-web-appapi",children:"ASP.NET Core Web App/Api"})}),"\n",(0,a.jsx)(t.p,{children:"If you want to test a web app, you can utilise the Microsoft.Mvc.Testing packages to wrap your web app within an in-memory test server."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public class WebAppFactory : WebApplicationFactory<Program>, IAsyncInitializer\n{\n    public Task InitializeAsync()\n    {\n        // You can also override certain services here to mock things out\n\n        // Grab a reference to the server\n        // This forces it to initialize.\n        // By doing it within this method, it's thread safe.\n        // And avoids multiple initialisations from different tests if parallelisation is switched on\n        _ = Server;\n\n        return Task.CompletedTask;\n    }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"This factory can then be injected into your tests, and whether you have one shared instance, or shared per class/assembly, or a new instance each time, is up to you!"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"IAsyncInitializer.InitializeAsync"})," method that you can see above will be called before your tests are invoked, so you know all the initialisation has already been done for you."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'public class MyTests\n{\n    [ClassDataSource<WebAppFactory>(Shared = SharedType.PerTestSession)]\n    public required WebAppFactory WebAppFactory { get; init; }\n    \n    [Test]\n    public async Task Test1()\n    {\n        var client = WebAppFactory.CreateClient();\n\n        var response = await client.GetAsync("/my/endpoint");\n        \n        await Assert.That(response.StatusCode).IsEqualTo(HttpStatusCode.OK);\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Alternatively, you can use the ",(0,a.jsx)(t.code,{children:"[NotInParallel]"})," attribute to avoid parallelism and multi-initialisation. But you'll most likely be sacrificing test speeds if tests can't run in parallel."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);