"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[1632],{1438:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"assertions/getting-started","title":"Getting Started with Assertions","description":"TUnit provides a comprehensive, fluent assertion library that makes your tests readable and expressive. This guide introduces the core concepts and gets you started with writing assertions.","source":"@site/docs/assertions/getting-started.md","sourceDirName":"assertions","slug":"/assertions/getting-started","permalink":"/docs/assertions/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Generic Attributes","permalink":"/docs/test-authoring/generic-attributes"},"next":{"title":"Equality and Comparison Assertions","permalink":"/docs/assertions/equality-and-comparison"}}');var i=n(4848),a=n(8453);const r={sidebar_position:1},l="Getting Started with Assertions",o={},c=[{value:"Basic Syntax",id:"basic-syntax",level:2},{value:"Why Await?",id:"why-await",level:2},{value:"Assertion Categories",id:"assertion-categories",level:2},{value:"Equality &amp; Comparison",id:"equality--comparison",level:3},{value:"Strings",id:"strings",level:3},{value:"Collections",id:"collections",level:3},{value:"Booleans &amp; Null",id:"booleans--null",level:3},{value:"Exceptions",id:"exceptions",level:3},{value:"Type Checking",id:"type-checking",level:3},{value:"Chaining Assertions",id:"chaining-assertions",level:2},{value:"Multiple Assertions with Assert.Multiple()",id:"multiple-assertions-with-assertmultiple",level:2},{value:"Member Assertions",id:"member-assertions",level:2},{value:"Working with Collections",id:"working-with-collections",level:2},{value:"Returning Values from Assertions",id:"returning-values-from-assertions",level:2},{value:"Custom Expectations",id:"custom-expectations",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Testing Numeric Ranges",id:"testing-numeric-ranges",level:3},{value:"Testing with Tolerance",id:"testing-with-tolerance",level:3},{value:"Testing Async Operations",id:"testing-async-operations",level:3},{value:"Testing Multiple Conditions",id:"testing-multiple-conditions",level:3},{value:"Type Safety",id:"type-safety",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Quick Reference",id:"quick-reference",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"getting-started-with-assertions",children:"Getting Started with Assertions"})}),"\n",(0,i.jsx)(s.p,{children:"TUnit provides a comprehensive, fluent assertion library that makes your tests readable and expressive. This guide introduces the core concepts and gets you started with writing assertions."}),"\n",(0,i.jsx)(s.h2,{id:"basic-syntax",children:"Basic Syntax"}),"\n",(0,i.jsxs)(s.p,{children:["All assertions in TUnit follow a consistent pattern using the ",(0,i.jsx)(s.code,{children:"Assert.That()"})," method:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(actualValue).IsEqualTo(expectedValue);\n"})}),"\n",(0,i.jsx)(s.p,{children:"The basic flow is:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["Start with ",(0,i.jsx)(s.code,{children:"Assert.That(value)"})]}),"\n",(0,i.jsxs)(s.li,{children:["Chain assertion methods (e.g., ",(0,i.jsx)(s.code,{children:".IsEqualTo()"}),", ",(0,i.jsx)(s.code,{children:".Contains()"}),", ",(0,i.jsx)(s.code,{children:".IsGreaterThan()"}),")"]}),"\n",(0,i.jsxs)(s.li,{children:["Always ",(0,i.jsx)(s.code,{children:"await"})," the assertion (TUnit's assertions are async)"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"why-await",children:"Why Await?"}),"\n",(0,i.jsx)(s.p,{children:"TUnit assertions must be awaited. This design enables:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Async support"}),": Seamlessly test async operations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Rich error messages"}),": Build detailed failure messages during execution"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Extensibility"}),": Create custom assertions that can perform async operations"]}),"\n"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"// \u2705 Correct - awaited\nawait Assert.That(result).IsEqualTo(42);\n\n// \u274c Wrong - will cause compiler warning\nAssert.That(result).IsEqualTo(42);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["TUnit includes a built-in analyzer that warns you if you forget to ",(0,i.jsx)(s.code,{children:"await"})," an assertion."]}),"\n",(0,i.jsx)(s.h2,{id:"assertion-categories",children:"Assertion Categories"}),"\n",(0,i.jsx)(s.p,{children:"TUnit provides assertions for all common scenarios:"}),"\n",(0,i.jsx)(s.h3,{id:"equality--comparison",children:"Equality & Comparison"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(actual).IsEqualTo(expected);\nawait Assert.That(value).IsNotEqualTo(other);\nawait Assert.That(score).IsGreaterThan(70);\nawait Assert.That(age).IsLessThanOrEqualTo(100);\nawait Assert.That(temperature).IsBetween(20, 30);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"strings",children:"Strings"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(message).Contains("Hello");\nawait Assert.That(filename).StartsWith("test_");\nawait Assert.That(email).Matches(@"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$");\nawait Assert.That(input).IsNotEmpty();\n'})}),"\n",(0,i.jsx)(s.h3,{id:"collections",children:"Collections"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(numbers).Contains(42);\nawait Assert.That(items).HasCount(5);\nawait Assert.That(list).IsNotEmpty();\nawait Assert.That(values).All(x => x > 0);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"booleans--null",children:"Booleans & Null"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(isValid).IsTrue();\nawait Assert.That(result).IsNotNull();\nawait Assert.That(optional).IsDefault();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"exceptions",children:"Exceptions"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(() => DivideByZero())\n    .Throws<DivideByZeroException>()\n    .WithMessage("Attempted to divide by zero.");\n'})}),"\n",(0,i.jsx)(s.h3,{id:"type-checking",children:"Type Checking"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(obj).IsTypeOf<MyClass>();\nawait Assert.That(typeof(Dog)).IsAssignableTo<Animal>();\n"})}),"\n",(0,i.jsx)(s.h2,{id:"chaining-assertions",children:"Chaining Assertions"}),"\n",(0,i.jsxs)(s.p,{children:["Combine multiple assertions on the same value using ",(0,i.jsx)(s.code,{children:".And"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(username)\n    .IsNotNull()\n    .And.IsNotEmpty()\n    .And.HasLength().GreaterThan(3)\n    .And.HasLength().LessThan(20);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Use ",(0,i.jsx)(s.code,{children:".Or"})," when any condition can be true:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(statusCode)\n    .IsEqualTo(200)\n    .Or.IsEqualTo(201)\n    .Or.IsEqualTo(204);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"multiple-assertions-with-assertmultiple",children:"Multiple Assertions with Assert.Multiple()"}),"\n",(0,i.jsx)(s.p,{children:"Group related assertions together so all failures are reported:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await using (Assert.Multiple())\n{\n    await Assert.That(user.FirstName).IsEqualTo("John");\n    await Assert.That(user.LastName).IsEqualTo("Doe");\n    await Assert.That(user.Age).IsGreaterThan(18);\n    await Assert.That(user.Email).IsNotNull();\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Instead of stopping at the first failure, ",(0,i.jsx)(s.code,{children:"Assert.Multiple()"})," runs all assertions and reports every failure together."]}),"\n",(0,i.jsx)(s.h2,{id:"member-assertions",children:"Member Assertions"}),"\n",(0,i.jsxs)(s.p,{children:["Assert on object properties using ",(0,i.jsx)(s.code,{children:".Member()"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(person)\n    .Member(p => p.Name, name => name.IsEqualTo("Alice"))\n    .And.Member(p => p.Age, age => age.IsGreaterThan(18));\n'})}),"\n",(0,i.jsx)(s.p,{children:"This works with nested properties too:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(order)\n    .Member(o => o.Customer.Address.City, city => city.IsEqualTo("Seattle");\n'})}),"\n",(0,i.jsx)(s.h2,{id:"working-with-collections",children:"Working with Collections"}),"\n",(0,i.jsx)(s.p,{children:"Collections have rich assertion support:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"var numbers = new[] { 1, 2, 3, 4, 5 };\n\n// Count and emptiness\nawait Assert.That(numbers).HasCount(5);\nawait Assert.That(numbers).IsNotEmpty();\n\n// Membership\nawait Assert.That(numbers).Contains(3);\nawait Assert.That(numbers).DoesNotContain(10);\n\n// Predicates\nawait Assert.That(numbers).All(n => n > 0);\nawait Assert.That(numbers).Any(n => n == 3);\n\n// Ordering\nawait Assert.That(numbers).IsInOrder();\n\n// Equivalence (same items, any order)\nawait Assert.That(numbers).IsEquivalentTo(new[] { 5, 4, 3, 2, 1 });\n"})}),"\n",(0,i.jsx)(s.h2,{id:"returning-values-from-assertions",children:"Returning Values from Assertions"}),"\n",(0,i.jsx)(s.p,{children:"Some assertions return the value being tested, allowing you to continue working with it:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'// HasSingleItem returns the single item\nvar user = await Assert.That(users).HasSingleItem();\nawait Assert.That(user.Name).IsEqualTo("Alice");\n\n// Contains with predicate returns the found item\nvar admin = await Assert.That(users).Contains(u => u.Role == "Admin");\nawait Assert.That(admin.Permissions).IsNotEmpty();\n'})}),"\n",(0,i.jsx)(s.h2,{id:"custom-expectations",children:"Custom Expectations"}),"\n",(0,i.jsxs)(s.p,{children:["Use ",(0,i.jsx)(s.code,{children:".Satisfies()"})," for custom conditions:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(value).Satisfies(v => v % 2 == 0, "Value must be even");\n'})}),"\n",(0,i.jsx)(s.p,{children:"Or map to a different value before asserting:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(order)\n    .Satisfies(o => o.Total, total => total > 100);\n"})}),"\n",(0,i.jsx)(s.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(s.h3,{id:"testing-numeric-ranges",children:"Testing Numeric Ranges"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(score).IsBetween(0, 100);\nawait Assert.That(temperature).IsGreaterThanOrEqualTo(32);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"testing-with-tolerance",children:"Testing with Tolerance"}),"\n",(0,i.jsx)(s.p,{children:"For floating-point comparisons:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(3.14159).IsEqualTo(Math.PI, tolerance: 0.001);\n"})}),"\n",(0,i.jsx)(s.h3,{id:"testing-async-operations",children:"Testing Async Operations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"await Assert.That(async () => await FetchDataAsync())\n    .Throws<HttpRequestException>();\n\nawait Assert.That(longRunningTask).CompletesWithin(TimeSpan.FromSeconds(5));\n"})}),"\n",(0,i.jsx)(s.h3,{id:"testing-multiple-conditions",children:"Testing Multiple Conditions"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'await Assert.That(username)\n    .IsNotNull()\n    .And.Satisfies(name => name.Length >= 3 && name.Length <= 20,\n                   "Username must be 3-20 characters");\n'})}),"\n",(0,i.jsx)(s.h2,{id:"type-safety",children:"Type Safety"}),"\n",(0,i.jsx)(s.p,{children:"TUnit's assertions are strongly typed and catch type mismatches at compile time:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'int number = 42;\nstring text = "42";\n\n// \u2705 This works - both are ints\nawait Assert.That(number).IsEqualTo(42);\n\n// \u274c This won\'t compile - can\'t compare int to string\n// await Assert.That(number).IsEqualTo("42");\n'})}),"\n",(0,i.jsx)(s.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(s.p,{children:"Now that you understand the basics, explore specific assertion types:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})})," - Detailed equality and comparison assertions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"/docs/assertions/string",children:"Strings"})})," - Comprehensive string testing"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"/docs/assertions/collections",children:"Collections"})})," - Advanced collection assertions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"/docs/assertions/exceptions",children:"Exceptions"})})," - Testing thrown exceptions"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.a,{href:"/docs/assertions/extensibility/custom-assertions",children:"Custom Assertions"})})," - Create your own assertions"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Assertion Category"}),(0,i.jsx)(s.th,{children:"Example"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Equality"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"IsEqualTo()"}),", ",(0,i.jsx)(s.code,{children:"IsNotEqualTo()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Comparison"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"IsGreaterThan()"}),", ",(0,i.jsx)(s.code,{children:"IsLessThan()"}),", ",(0,i.jsx)(s.code,{children:"IsBetween()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Null/Default"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"IsNull()"}),", ",(0,i.jsx)(s.code,{children:"IsNotNull()"}),", ",(0,i.jsx)(s.code,{children:"IsDefault()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Boolean"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"IsTrue()"}),", ",(0,i.jsx)(s.code,{children:"IsFalse()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Strings"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"Contains()"}),", ",(0,i.jsx)(s.code,{children:"StartsWith()"}),", ",(0,i.jsx)(s.code,{children:"Matches()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Collections"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"Contains()"}),", ",(0,i.jsx)(s.code,{children:"HasCount()"}),", ",(0,i.jsx)(s.code,{children:"All()"}),", ",(0,i.jsx)(s.code,{children:"Any()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Exceptions"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"Throws<T>()"}),", ",(0,i.jsx)(s.code,{children:"ThrowsNothing()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Types"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"IsTypeOf<T>()"}),", ",(0,i.jsx)(s.code,{children:"IsAssignableTo<T>()"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Async"}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"CompletesWithin()"}),", async exception testing"]})]})]})]}),"\n",(0,i.jsx)(s.p,{children:"For a complete list of all assertions, see the specific category pages in the sidebar."})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(6540);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);