"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7454],{5396:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"reference/aot-diagnostics","title":"AOT Diagnostics Reference","description":"TUnit\'s AOT-only mode provides comprehensive compile-time diagnostics to help you write compatible test code. These diagnostics catch issues early and provide actionable guidance for fixing them.","source":"@site/docs/reference/aot-diagnostics.md","sourceDirName":"reference","slug":"/reference/aot-diagnostics","permalink":"/docs/reference/aot-diagnostics","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=i(4848),a=i(8453);const r={},l="AOT Diagnostics Reference",o={},c=[{value:"Generic Test Diagnostics",id:"generic-test-diagnostics",level:2},{value:"TUnit0058: Generic Test Missing Explicit Instantiation",id:"tunit0058-generic-test-missing-explicit-instantiation",level:3},{value:"Example Error:",id:"example-error",level:4},{value:"Solution:",id:"solution",level:4},{value:"For Generic Classes:",id:"for-generic-classes",level:4},{value:"Data Source Diagnostics",id:"data-source-diagnostics",level:2},{value:"TUnit0059: Dynamic Data Source Not AOT-Compatible",id:"tunit0059-dynamic-data-source-not-aot-compatible",level:3},{value:"Example Error:",id:"example-error-1",level:4},{value:"Solution - Use Static Data Sources:",id:"solution---use-static-data-sources",level:4},{value:"TUnit0060: Open Generic Type Not AOT-Compatible",id:"tunit0060-open-generic-type-not-aot-compatible",level:3},{value:"Example Error:",id:"example-error-2",level:4},{value:"Solution - Use Explicit Generic Instantiation:",id:"solution---use-explicit-generic-instantiation",level:4},{value:"Configuration Diagnostics",id:"configuration-diagnostics",level:2},{value:"TUnit0061: Invalid Configuration Value",id:"tunit0061-invalid-configuration-value",level:3},{value:"Example Warnings:",id:"example-warnings",level:4},{value:"Solution:",id:"solution-1",level:4},{value:"Performance Diagnostics",id:"performance-diagnostics",level:2},{value:"TUnit0062: Performance Warning",id:"tunit0062-performance-warning",level:3},{value:"Example Scenarios:",id:"example-scenarios",level:4},{value:"Solutions:",id:"solutions",level:4},{value:"Diagnostic Severity Levels",id:"diagnostic-severity-levels",level:2},{value:"Error Level (Build Fails)",id:"error-level-build-fails",level:3},{value:"Warning Level (Build Succeeds)",id:"warning-level-build-succeeds",level:3},{value:"Info Level (Informational)",id:"info-level-informational",level:3},{value:"Enabling Verbose Diagnostics",id:"enabling-verbose-diagnostics",level:2},{value:"EditorConfig:",id:"editorconfig",level:3},{value:"MSBuild:",id:"msbuild",level:3},{value:"Verbose Output Examples:",id:"verbose-output-examples",level:3},{value:"Common Resolution Patterns",id:"common-resolution-patterns",level:2},{value:"Migration from Reflection to AOT",id:"migration-from-reflection-to-aot",level:3},{value:"Before (Reflection-based):",id:"before-reflection-based",level:4},{value:"After (AOT-compatible):",id:"after-aot-compatible",level:4},{value:"Generic Test Migration",id:"generic-test-migration",level:3},{value:"Before:",id:"before",level:4},{value:"After:",id:"after",level:4},{value:"IDE Integration",id:"ide-integration",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"aot-diagnostics-reference",children:"AOT Diagnostics Reference"})}),"\n",(0,s.jsx)(n.p,{children:"TUnit's AOT-only mode provides comprehensive compile-time diagnostics to help you write compatible test code. These diagnostics catch issues early and provide actionable guidance for fixing them."}),"\n",(0,s.jsx)(n.h2,{id:"generic-test-diagnostics",children:"Generic Test Diagnostics"}),"\n",(0,s.jsx)(n.h3,{id:"tunit0058-generic-test-missing-explicit-instantiation",children:"TUnit0058: Generic Test Missing Explicit Instantiation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Generic test classes or methods require explicit type instantiation for AOT compatibility."]}),"\n",(0,s.jsx)(n.h4,{id:"example-error",children:"Example Error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// \u274c This generates TUnit0058\n[Test]\npublic async Task GenericTest<T>()\n{\n    var value = default(T);\n    await Assert.That(value).IsNotNull().Or.IsNull();\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"solution",children:"Solution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// \u2705 Add explicit generic instantiation\n[Test]\n[GenerateGenericTest(typeof(int))]\n[GenerateGenericTest(typeof(string))]\n[GenerateGenericTest(typeof(DateTime))]\npublic async Task GenericTest<T>()\n{\n    var value = default(T);\n    await Assert.That(value).IsNotNull().Or.IsNull();\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"for-generic-classes",children:"For Generic Classes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// \u274c This generates TUnit0058\npublic class GenericTestClass<T>\n{\n    [Test]\n    public async Task TestMethod()\n    {\n        var value = default(T);\n        await Assert.That(value).IsNotNull().Or.IsNull();\n    }\n}\n\n// \u2705 Add explicit instantiation to the class\n[GenerateGenericTest(typeof(int))]\n[GenerateGenericTest(typeof(string))]\n[GenerateGenericTest(typeof(bool))]\npublic class GenericTestClass<T>\n{\n    [Test]\n    public async Task TestMethod()\n    {\n        var value = default(T);\n        await Assert.That(value).IsNotNull().Or.IsNull();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"data-source-diagnostics",children:"Data Source Diagnostics"}),"\n",(0,s.jsx)(n.h3,{id:"tunit0059-dynamic-data-source-not-aot-compatible",children:"TUnit0059: Dynamic Data Source Not AOT-Compatible"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Data sources that use dynamic resolution or reflection aren't compatible with AOT compilation."]}),"\n",(0,s.jsx)(n.h4,{id:"example-error-1",children:"Example Error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class DataSourceDiagnostics\n{\n    // \u274c This generates TUnit0059 error\n    [Test]\n    [MethodDataSource(nameof(GetDynamicData))]\n    public async Task TestWithDynamicDataSource(object value)\n    {\n        await Assert.That(value).IsNotNull();\n    }\n\n    public IEnumerable<object[]> GetDynamicData()\n    {\n        // This method uses reflection internally - not AOT compatible\n        return ReflectionBasedDataGenerator.GetData();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"solution---use-static-data-sources",children:"Solution - Use Static Data Sources:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class AotCompatibleDataSources\n{\n    // \u2705 Static data source - AOT compatible\n    [Test]\n    [MethodDataSource(nameof(GetStaticData))]\n    public async Task TestWithStaticDataSource(string value)\n    {\n        await Assert.That(value).IsNotNull();\n    }\n\n    public static IEnumerable<object[]> GetStaticData()\n    {\n        yield return new object[] { "static1" };\n        yield return new object[] { "static2" };\n        yield return new object[] { "static3" };\n    }\n\n    // \u2705 Async static data source with proper typing\n    [Test]\n    [MethodDataSource(nameof(GetAsyncStaticData))]\n    public async Task TestWithAsyncStaticDataSource(int id, string name)\n    {\n        await Assert.That(id).IsGreaterThan(0);\n        await Assert.That(name).IsNotEmpty();\n    }\n\n    public static async IAsyncEnumerable<object[]> GetAsyncStaticData()\n    {\n        await Task.Delay(1); // Simulate async work\n        yield return new object[] { 1, "first" };\n        yield return new object[] { 2, "second" };\n        yield return new object[] { 3, "third" };\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tunit0060-open-generic-type-not-aot-compatible",children:"TUnit0060: Open Generic Type Not AOT-Compatible"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Using open generic types in data sources that can't be resolved at compile time."]}),"\n",(0,s.jsx)(n.h4,{id:"example-error-2",children:"Example Error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"// \u274c This generates TUnit0060 error\n[Test]\n[MethodDataSource(nameof(GetGenericData))]\npublic async Task TestWithOpenGeneric<T>(T value)\n{\n    await Assert.That(value).IsNotNull();\n}\n\npublic static IEnumerable<object[]> GetGenericData()\n{\n    // Can't determine T at compile time\n    yield return new object[] { default(T) }; // Error: T is not available\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"solution---use-explicit-generic-instantiation",children:"Solution - Use Explicit Generic Instantiation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// \u2705 Explicit generic instantiation\n[Test]\n[GenerateGenericTest(typeof(string))]\n[GenerateGenericTest(typeof(int))]\n[MethodDataSource(nameof(GetTypedData))]\npublic async Task TestWithExplicitGeneric<T>(T value)\n{\n    await Assert.That(value).IsNotNull().Or.IsEqualTo(default(T));\n}\n\npublic static IEnumerable<object[]> GetTypedData()\n{\n    // Static data that works with known types\n    yield return new object[] { "string_value" };\n    yield return new object[] { 42 };\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration-diagnostics",children:"Configuration Diagnostics"}),"\n",(0,s.jsx)(n.h3,{id:"tunit0061-invalid-configuration-value",children:"TUnit0061: Invalid Configuration Value"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Configuration values in EditorConfig or MSBuild properties are outside valid ranges."]}),"\n",(0,s.jsx)(n.h4,{id:"example-warnings",children:"Example Warnings:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"# \u274c These generate configuration warnings\ntunit.generic_depth_limit = 50          # Max is 20\ntunit.max_generic_instantiations = 500  # Max is 100\ntunit.generic_depth_limit = 0           # Min is 1\n"})}),"\n",(0,s.jsx)(n.h4,{id:"solution-1",children:"Solution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"# \u2705 Valid configuration values\ntunit.generic_depth_limit = 10          # Range: 1-20\ntunit.max_generic_instantiations = 25   # Range: 1-100\ntunit.enable_verbose_diagnostics = true # Boolean values\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-diagnostics",children:"Performance Diagnostics"}),"\n",(0,s.jsx)(n.h3,{id:"tunit0062-performance-warning",children:"TUnit0062: Performance Warning"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Configuration or code patterns that may impact performance."]}),"\n",(0,s.jsx)(n.h4,{id:"example-scenarios",children:"Example Scenarios:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Too many generic instantiations"}),"\n",(0,s.jsx)(n.li,{children:"Very deep generic nesting"}),"\n",(0,s.jsx)(n.li,{children:"Excessive async data source complexity"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"solutions",children:"Solutions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"# Optimize for performance\ntunit.generic_depth_limit = 5           # Lower depth for faster builds\ntunit.max_generic_instantiations = 10   # Fewer instantiations\ntunit.enable_auto_generic_discovery = false # Manual control\n"})}),"\n",(0,s.jsx)(n.h2,{id:"diagnostic-severity-levels",children:"Diagnostic Severity Levels"}),"\n",(0,s.jsx)(n.h3,{id:"error-level-build-fails",children:"Error Level (Build Fails)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0057"}),": Reflection usage in AOT mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0058"}),": Generic test missing instantiation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0059"}),": Dynamic data source not AOT-compatible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0060"}),": Open generic type not AOT-compatible"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"warning-level-build-succeeds",children:"Warning Level (Build Succeeds)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0061"}),": Invalid configuration value (uses default)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0062"}),": Performance warning"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0063"}),": Deprecated pattern usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"info-level-informational",children:"Info Level (Informational)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0064"}),": AOT optimization suggestion"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0065"}),": Generic instantiation discovered"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TUnit0066"}),": Performance metric report"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"enabling-verbose-diagnostics",children:"Enabling Verbose Diagnostics"}),"\n",(0,s.jsx)(n.p,{children:"To get more detailed diagnostic information:"}),"\n",(0,s.jsx)(n.h3,{id:"editorconfig",children:"EditorConfig:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"tunit.enable_verbose_diagnostics = true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"msbuild",children:"MSBuild:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n    <TUnitEnableVerboseDiagnostics>true</TUnitEnableVerboseDiagnostics>\n</PropertyGroup>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"verbose-output-examples",children:"Verbose Output Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"TUnit: Analyzing generic test class 'MyTestClass<T>'\nTUnit: Generated instantiation for types: [System.String, System.Int32]\nTUnit: Created strongly-typed delegate for 'MyTestClass<String>.TestMethod'\nTUnit: Registered async data source factory 'GetAsyncTestData'\nTUnit: AOT compilation mode: Enabled (0 reflection fallbacks)\nTUnit: Performance: Generated 15 delegates in 245ms\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-resolution-patterns",children:"Common Resolution Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"migration-from-reflection-to-aot",children:"Migration from Reflection to AOT"}),"\n",(0,s.jsx)(n.h4,{id:"before-reflection-based",children:"Before (Reflection-based):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task TestDynamicType()\n{\n    var type = Type.GetType("MyNamespace.MyClass");\n    var instance = Activator.CreateInstance(type);\n    var method = type.GetMethod("ProcessData");\n    var result = method.Invoke(instance, new[] { "test" });\n    \n    await Assert.That(result).IsNotNull();\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"after-aot-compatible",children:"After (AOT-compatible):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task TestStaticType()\n{\n    var instance = new MyClass();\n    var result = instance.ProcessData("test");\n    \n    await Assert.That(result).IsNotNull();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"generic-test-migration",children:"Generic Test Migration"}),"\n",(0,s.jsx)(n.h4,{id:"before",children:"Before:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task TestGeneric<T>() where T : new()\n{\n    var instance = new T();\n    // Test logic\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"after",children:"After:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"[Test]\n[GenerateGenericTest(typeof(MyClass))]\n[GenerateGenericTest(typeof(AnotherClass))]\npublic async Task TestGeneric<T>() where T : new()\n{\n    var instance = new T();\n    // Same test logic, now AOT-compatible\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ide-integration",children:"IDE Integration"}),"\n",(0,s.jsx)(n.p,{children:"Most IDEs will show TUnit diagnostics inline with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Red squiggly lines"})," for errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Yellow squiggly lines"})," for warnings"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Blue squiggly lines"})," for info"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Quick fixes"})," available via Ctrl+. (Cmd+. on Mac)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The diagnostics include fix suggestions and links to documentation for resolving issues."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);