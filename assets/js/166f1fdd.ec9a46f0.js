"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6927],{6267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"tutorial-advanced/test-filters","title":"Test Filters","description":"Running TUnit via dotnet run supports test filters.","source":"@site/docs/tutorial-advanced/test-filters.md","sourceDirName":"tutorial-advanced","slug":"/tutorial-advanced/test-filters","permalink":"/docs/tutorial-advanced/test-filters","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Test Context","permalink":"/docs/tutorial-advanced/test-context"},"next":{"title":"Explicit","permalink":"/docs/tutorial-advanced/explicit"}}');var r=n(4848),i=n(8453);const o={sidebar_position:8},l="Test Filters",d={},c=[];function a(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"test-filters",children:"Test Filters"})}),"\n",(0,r.jsxs)(t.p,{children:["Running TUnit via ",(0,r.jsx)(t.code,{children:"dotnet run"})," supports test filters."]}),"\n",(0,r.jsx)(t.p,{children:"TUnit can select tests by:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Assembly"}),"\n",(0,r.jsx)(t.li,{children:"Namespace"}),"\n",(0,r.jsx)(t.li,{children:"Class name"}),"\n",(0,r.jsx)(t.li,{children:"Test name"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["You must use the ",(0,r.jsx)(t.code,{children:"--treenode-filter"})," flag on the command line."]}),"\n",(0,r.jsxs)(t.p,{children:["The syntax for the filter value is (without the angled brackets) ",(0,r.jsx)(t.code,{children:"/<Assembly>/<Namespace>/<Class name>/<Test name>"})]}),"\n",(0,r.jsxs)(t.p,{children:["Will cards are also supported with ",(0,r.jsx)(t.code,{children:"*"})]}),"\n",(0,r.jsxs)(t.p,{children:["As well as ",(0,r.jsx)(t.code,{children:"and"}),", ",(0,r.jsx)(t.code,{children:"or"}),", ",(0,r.jsx)(t.code,{children:"starts with"}),", ",(0,r.jsx)(t.code,{children:"ends with"}),", ",(0,r.jsx)(t.code,{children:"equals"})," and other operators. For full information on the treenode filters, see ",(0,r.jsx)(t.a,{href:"https://github.com/microsoft/testfx/blob/main/docs/mstest-runner-graphqueryfiltering/graph-query-filtering.md",children:"here"})]}),"\n",(0,r.jsx)(t.p,{children:"So an example could be:"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"dotnet run --treenode-filter /*/*/LoginTests/*"})," - To run all tests in the class ",(0,r.jsx)(t.code,{children:"LoginTests"})]}),"\n",(0,r.jsx)(t.p,{children:"or"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"dotnet run --treenode-filter /*/*/*/AcceptCookiesTest"})," - To run all tests with the name ",(0,r.jsx)(t.code,{children:"AcceptCookiesTest"})]}),"\n",(0,r.jsxs)(t.p,{children:["TUnit also supports filtering by your own ",(0,r.jsx)(t.a,{href:"properties",children:"properties"}),". So you could do:"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"dotnet run --treenode-filter /*/*/*/*[MyFilterName=*SomeValue*]"})}),"\n",(0,r.jsx)(t.p,{children:'And if your test had a property with the name "MyFilterName" and its value contained "SomeValue", then your test would be executed.'})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);