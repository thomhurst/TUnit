"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6798],{9039:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"assertions/null-and-default","title":"Null and Default Value Assertions","description":"TUnit provides assertions for testing null values and default values. These assertions integrate with C#\'s nullability annotations to provide better compile-time safety.","source":"@site/docs/assertions/null-and-default.md","sourceDirName":"assertions","slug":"/assertions/null-and-default","permalink":"/docs/assertions/null-and-default","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2.5,"frontMatter":{"sidebar_position":2.5},"sidebar":"docs","previous":{"title":"Equality and Comparison Assertions","permalink":"/docs/assertions/equality-and-comparison"},"next":{"title":"Awaiting","permalink":"/docs/assertions/awaiting"}}');var t=a(4848),l=a(8453);const i={sidebar_position:2.5},r="Null and Default Value Assertions",u={},c=[{value:"Null Assertions",id:"null-assertions",level:2},{value:"IsNull",id:"isnull",level:3},{value:"IsNotNull",id:"isnotnull",level:3},{value:"Nullability Flow Analysis",id:"nullability-flow-analysis",level:2},{value:"Default Value Assertions",id:"default-value-assertions",level:2},{value:"IsDefault",id:"isdefault",level:3},{value:"IsNotDefault",id:"isnotdefault",level:3},{value:"Reference Types vs Value Types",id:"reference-types-vs-value-types",level:2},{value:"Reference Type Defaults",id:"reference-type-defaults",level:3},{value:"Value Type Defaults",id:"value-type-defaults",level:3},{value:"Nullable Value Types",id:"nullable-value-types",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Optional Parameters and Returns",id:"optional-parameters-and-returns",level:3},{value:"Initialization Checks",id:"initialization-checks",level:3},{value:"Dependency Injection Validation",id:"dependency-injection-validation",level:3},{value:"Lazy Initialization",id:"lazy-initialization",level:3},{value:"Checking Multiple Properties",id:"checking-multiple-properties",level:2},{value:"Default Values for Custom Types",id:"default-values-for-custom-types",level:2},{value:"Structs",id:"structs",level:3},{value:"Records",id:"records",level:3},{value:"Special Cases",id:"special-cases",level:2},{value:"Empty Collections vs Null",id:"empty-collections-vs-null",level:3},{value:"Empty Strings vs Null",id:"empty-strings-vs-null",level:3},{value:"Default GUID",id:"default-guid",level:3},{value:"Default DateTime",id:"default-datetime",level:3},{value:"Combining with Other Assertions",id:"combining-with-other-assertions",level:2},{value:"Null Coalescing Validation",id:"null-coalescing-validation",level:3},{value:"Null Conditional Operator",id:"null-conditional-operator",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Validate Required Dependencies",id:"validate-required-dependencies",level:3},{value:"Validate Optional Features",id:"validate-optional-features",level:3},{value:"State Machine Validation",id:"state-machine-validation",level:3},{value:"See Also",id:"see-also",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"null-and-default-value-assertions",children:"Null and Default Value Assertions"})}),"\n",(0,t.jsx)(n.p,{children:"TUnit provides assertions for testing null values and default values. These assertions integrate with C#'s nullability annotations to provide better compile-time safety."}),"\n",(0,t.jsx)(n.h2,{id:"null-assertions",children:"Null Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"isnull",children:"IsNull"}),"\n",(0,t.jsxs)(n.p,{children:["Tests that a value is ",(0,t.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Null_Value()\n{\n    string? result = GetOptionalValue();\n    await Assert.That(result).IsNull();\n\n    Person? person = FindPerson("unknown-id");\n    await Assert.That(person).IsNull();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isnotnull",children:"IsNotNull"}),"\n",(0,t.jsxs)(n.p,{children:["Tests that a value is not ",(0,t.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Not_Null_Value()\n{\n    string? result = GetRequiredValue();\n    await Assert.That(result).IsNotNull();\n\n    var user = GetCurrentUser();\n    await Assert.That(user).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"nullability-flow-analysis",children:"Nullability Flow Analysis"}),"\n",(0,t.jsxs)(n.p,{children:["When you use ",(0,t.jsx)(n.code,{children:"IsNotNull()"}),", C#'s nullability analysis understands that the value is non-null afterward:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Nullability_Flow()\n{\n    string? maybeNull = GetValue();\n\n    // After this assertion, compiler knows it's not null\n    await Assert.That(maybeNull).IsNotNull();\n\n    // No warning - compiler knows it's safe\n    int length = maybeNull.Length;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This works with chaining too:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_After_Null_Check()\n{\n    string? input = GetInput();\n\n    await Assert.That(input)\n        .IsNotNull()\n        .And.IsNotEmpty()  // Compiler knows input is not null\n        .And.HasLength().GreaterThan(5);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"default-value-assertions",children:"Default Value Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"isdefault",children:"IsDefault"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a value equals the default value for its type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Default_Values()\n{\n    // Reference types - default is null\n    string? text = default;\n    await Assert.That(text).IsDefault();\n\n    // Value types - default is zero/false/empty struct\n    int number = default;\n    await Assert.That(number).IsDefault(); // 0\n\n    bool flag = default;\n    await Assert.That(flag).IsDefault(); // false\n\n    DateTime date = default;\n    await Assert.That(date).IsDefault(); // DateTime.MinValue\n\n    Guid id = default;\n    await Assert.That(id).IsDefault(); // Guid.Empty\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isnotdefault",children:"IsNotDefault"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a value is not the default value for its type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Not_Default_Values()\n{\n    var name = "Alice";\n    await Assert.That(name).IsNotDefault();\n\n    var count = 42;\n    await Assert.That(count).IsNotDefault();\n\n    var isValid = true;\n    await Assert.That(isValid).IsNotDefault();\n\n    var id = Guid.NewGuid();\n    await Assert.That(id).IsNotDefault();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"reference-types-vs-value-types",children:"Reference Types vs Value Types"}),"\n",(0,t.jsx)(n.h3,{id:"reference-type-defaults",children:"Reference Type Defaults"}),"\n",(0,t.jsxs)(n.p,{children:["For reference types, default equals ",(0,t.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Reference_Type_Defaults()\n{\n    string? text = default;\n    object? obj = default;\n    Person? person = default;\n\n    await Assert.That(text).IsDefault();   // Same as IsNull()\n    await Assert.That(obj).IsDefault();    // Same as IsNull()\n    await Assert.That(person).IsDefault(); // Same as IsNull()\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"value-type-defaults",children:"Value Type Defaults"}),"\n",(0,t.jsx)(n.p,{children:"For value types, default is the zero-initialized value:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Value_Type_Defaults()\n{\n    // Numeric types default to 0\n    int intVal = default;\n    await Assert.That(intVal).IsDefault();\n    await Assert.That(intVal).IsEqualTo(0);\n\n    double doubleVal = default;\n    await Assert.That(doubleVal).IsDefault();\n    await Assert.That(doubleVal).IsEqualTo(0.0);\n\n    // Boolean defaults to false\n    bool boolVal = default;\n    await Assert.That(boolVal).IsDefault();\n    await Assert.That(boolVal).IsFalse();\n\n    // Struct defaults to all fields/properties at their defaults\n    Point point = default;\n    await Assert.That(point).IsDefault();\n    await Assert.That(point).IsEqualTo(new Point(0, 0));\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nullable-value-types",children:"Nullable Value Types"}),"\n",(0,t.jsxs)(n.p,{children:["Nullable value types (",(0,t.jsx)(n.code,{children:"T?"}),") are reference types, so their default is ",(0,t.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Nullable_Value_Type_Defaults()\n{\n    int? nullableInt = default;\n    await Assert.That(nullableInt).IsDefault(); // Same as IsNull()\n    await Assert.That(nullableInt).IsNull();    // Also works\n\n    DateTime? nullableDate = default;\n    await Assert.That(nullableDate).IsDefault();\n    await Assert.That(nullableDate).IsNull();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(n.h3,{id:"optional-parameters-and-returns",children:"Optional Parameters and Returns"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Optional_Return_Value()\n{\n    // API might return null if item not found\n    var item = await _repository.FindByIdAsync("unknown-id");\n    await Assert.That(item).IsNull();\n\n    // API should return value if item exists\n    var existing = await _repository.FindByIdAsync("valid-id");\n    await Assert.That(existing).IsNotNull();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"initialization-checks",children:"Initialization Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Uninitialized_Field()\n{\n    var service = new MyService();\n\n    // Before initialization\n    await Assert.That(service.Connection).IsNull();\n\n    await service.InitializeAsync();\n\n    // After initialization\n    await Assert.That(service.Connection).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dependency-injection-validation",children:"Dependency Injection Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Constructor_Injection()\n{\n    var logger = new Mock<ILogger>();\n    var service = new UserService(logger.Object);\n\n    // Verify dependency was injected\n    await Assert.That(service.Logger).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"lazy-initialization",children:"Lazy Initialization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Lazy_Property()\n{\n    var calculator = new ExpensiveCalculator();\n\n    // Before first access\n    await Assert.That(calculator.CachedResult).IsNull();\n\n    var result = calculator.GetResult();\n\n    // After first access - cached\n    await Assert.That(calculator.CachedResult).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"checking-multiple-properties",children:"Checking Multiple Properties"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"Assert.Multiple()"})," to check multiple null conditions:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_All_Required_Fields()\n{\n    var user = CreateUser();\n\n    await using (Assert.Multiple())\n    {\n        await Assert.That(user).IsNotNull();\n        await Assert.That(user.FirstName).IsNotNull();\n        await Assert.That(user.LastName).IsNotNull();\n        await Assert.That(user.Email).IsNotNull();\n        await Assert.That(user.CreatedDate).IsNotDefault();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or chain them:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Required_Fields_With_Chaining()\n{\n    var config = LoadConfiguration();\n\n    await Assert.That(config.DatabaseConnection)\n        .IsNotNull()\n        .And.Member(c => c.Server).IsNotNull()\n        .And.Member(c => c.Database).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"default-values-for-custom-types",children:"Default Values for Custom Types"}),"\n",(0,t.jsx)(n.h3,{id:"structs",children:"Structs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public struct Rectangle\n{\n    public int Width { get; init; }\n    public int Height { get; init; }\n}\n\n[Test]\npublic async Task Struct_Default()\n{\n    Rectangle rect = default;\n\n    await Assert.That(rect).IsDefault();\n    await Assert.That(rect.Width).IsEqualTo(0);\n    await Assert.That(rect.Height).IsEqualTo(0);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"records",children:"Records"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public record Person(string Name, int Age);\n\n[Test]\npublic async Task Record_Default()\n{\n    Person? person = default;\n    await Assert.That(person).IsDefault(); // null for reference types\n    await Assert.That(person).IsNull();\n}\n\npublic record struct Point(int X, int Y);\n\n[Test]\npublic async Task Record_Struct_Default()\n{\n    Point point = default;\n    await Assert.That(point).IsDefault();\n    await Assert.That(point.X).IsEqualTo(0);\n    await Assert.That(point.Y).IsEqualTo(0);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"special-cases",children:"Special Cases"}),"\n",(0,t.jsx)(n.h3,{id:"empty-collections-vs-null",children:"Empty Collections vs Null"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Empty_vs_Null()\n{\n    List<string>? nullList = null;\n    List<string> emptyList = new();\n\n    await Assert.That(nullList).IsNull();\n    await Assert.That(emptyList).IsNotNull();\n    await Assert.That(emptyList).IsEmpty(); // Not null, but empty\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"empty-strings-vs-null",children:"Empty Strings vs Null"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Empty_String_vs_Null()\n{\n    string? nullString = null;\n    string emptyString = "";\n\n    await Assert.That(nullString).IsNull();\n    await Assert.That(emptyString).IsNotNull();\n    await Assert.That(emptyString).IsEmpty(); // Not null, but empty\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"default-guid",children:"Default GUID"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task GUID_Default()\n{\n    Guid id = default;\n\n    await Assert.That(id).IsDefault();\n    await Assert.That(id).IsEqualTo(Guid.Empty);\n    await Assert.That(id).IsEmptyGuid(); // TUnit specific assertion\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"default-datetime",children:"Default DateTime"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTime_Default()\n{\n    DateTime date = default;\n\n    await Assert.That(date).IsDefault();\n    await Assert.That(date).IsEqualTo(DateTime.MinValue);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"combining-with-other-assertions",children:"Combining with Other Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"null-coalescing-validation",children:"Null Coalescing Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Null_Coalescing_Default()\n{\n    string? input = GetOptionalInput();\n    string result = input ?? "default";\n\n    if (input == null)\n    {\n        await Assert.That(result).IsEqualTo("default");\n    }\n    else\n    {\n        await Assert.That(result).IsEqualTo(input);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"null-conditional-operator",children:"Null Conditional Operator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Null_Conditional()\n{\n    Person? person = FindPerson("id");\n    string? name = person?.Name;\n\n    if (person == null)\n    {\n        await Assert.That(name).IsNull();\n    }\n    else\n    {\n        await Assert.That(name).IsNotNull();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"validate-required-dependencies",children:"Validate Required Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task All_Dependencies_Provided()\n{\n    var service = CreateService();\n\n    await Assert.That(service.Logger).IsNotNull();\n    await Assert.That(service.Repository).IsNotNull();\n    await Assert.That(service.Cache).IsNotNull();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validate-optional-features",children:"Validate Optional Features"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Optional_Feature_Not_Enabled()\n{\n    var config = LoadConfiguration();\n\n    if (!config.EnableAdvancedFeatures)\n    {\n        await Assert.That(config.AdvancedSettings).IsNull();\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"state-machine-validation",children:"State Machine Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task State_Transitions()\n{\n    var workflow = new Workflow();\n\n    // Initial state\n    await Assert.That(workflow.CurrentState).IsDefault();\n\n    await workflow.StartAsync();\n\n    // After start\n    await Assert.That(workflow.CurrentState).IsNotDefault();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - Comparing values including defaults"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/boolean",children:"Boolean Assertions"})," - Testing true/false values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/string",children:"String Assertions"})," - String-specific null and empty checks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/collections",children:"Collections"})," - Collection null and empty checks"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var s=a(6540);const t={},l=s.createContext(t);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);