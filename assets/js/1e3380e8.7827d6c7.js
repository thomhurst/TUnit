"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7684],{1312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"test-lifecycle/test-context","title":"Test Context","description":"All tests have a TestContext object available to them.","source":"@site/docs/test-lifecycle/test-context.md","sourceDirName":"test-lifecycle","slug":"/test-lifecycle/test-context","permalink":"/docs/test-lifecycle/test-context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Event Subscribing","permalink":"/docs/test-lifecycle/event-subscribing"},"next":{"title":"Properties","permalink":"/docs/test-lifecycle/properties"}}');var i=n(4848),r=n(8453);const o={},c="Test Context",l={},a=[{value:"TestBuilderContext",id:"testbuildercontext",level:2},{value:"When to Use TestBuilderContext vs TestContext",id:"when-to-use-testbuildercontext-vs-testcontext",level:3},{value:"Accessing TestBuilderContext",id:"accessing-testbuildercontext",level:3},{value:"Sharing Data Between Discovery and Execution",id:"sharing-data-between-discovery-and-execution",level:3},{value:"Available Properties",id:"available-properties",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-context",children:"Test Context"})}),"\n",(0,i.jsxs)(t.p,{children:["All tests have a ",(0,i.jsx)(t.code,{children:"TestContext"})," object available to them."]}),"\n",(0,i.jsxs)(t.p,{children:["This can be accessed statically via ",(0,i.jsx)(t.code,{children:"TestContext.Current"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Here you can see information about the test, including things like the test name, containing class, custom properties, categories, etc."}),"\n",(0,i.jsxs)(t.p,{children:["This can be useful if you want something like a generic ",(0,i.jsx)(t.code,{children:"AfterEachTest"})," for all tests, but with logic to execute for only certain tests."]}),"\n",(0,i.jsx)(t.p,{children:"e.g."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'if (TestContext.Current.TestInformation.CustomProperties.ContainsKey("SomeProperty"))\n{\n    // Do something\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The context also has a ",(0,i.jsx)(t.code,{children:"Results"})," object. You'll notice this is nullable. This will be null until you're in the context of a ",(0,i.jsx)(t.code,{children:"AfterEachTest"})," method. That's because the ",(0,i.jsx)(t.code,{children:"Results"})," can only be set after a test has finished."]}),"\n",(0,i.jsx)(t.p,{children:"These results can be handy when you're cleaning up, but maybe only want to do something if a test failed."}),"\n",(0,i.jsx)(t.p,{children:"e.g."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"if (TestContext.Current?.Result?.State == TestState.Failed)\n{\n    // Take a screenshot?\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"testbuildercontext",children:"TestBuilderContext"}),"\n",(0,i.jsxs)(t.p,{children:["In addition to ",(0,i.jsx)(t.code,{children:"TestContext"}),", TUnit also provides ",(0,i.jsx)(t.code,{children:"TestBuilderContext"})," which is available during the test discovery and building phase. This is particularly useful when you need context information in data generators or other scenarios that run before test execution."]}),"\n",(0,i.jsx)(t.h3,{id:"when-to-use-testbuildercontext-vs-testcontext",children:"When to Use TestBuilderContext vs TestContext"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.strong,{children:["Use ",(0,i.jsx)(t.code,{children:"TestBuilderContext.Current"})," when:"]})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Writing data generators that need test information"}),"\n",(0,i.jsx)(t.li,{children:"During test discovery phase"}),"\n",(0,i.jsxs)(t.li,{children:["In scenarios that run before ",(0,i.jsx)(t.code,{children:"TestContext"})," is available"]}),"\n",(0,i.jsx)(t.li,{children:"When you need to pass data from discovery time to execution time"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.strong,{children:["Use ",(0,i.jsx)(t.code,{children:"TestContext.Current"})," when:"]})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"During test execution"}),"\n",(0,i.jsx)(t.li,{children:"In test methods, Before/After hooks"}),"\n",(0,i.jsx)(t.li,{children:"When you need test results or execution-specific information"}),"\n",(0,i.jsx)(t.li,{children:"When accessing test output writers"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"accessing-testbuildercontext",children:"Accessing TestBuilderContext"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'public static IEnumerable<object[]> MyDataGenerator()\n{\n    var context = TestBuilderContext.Current;\n    if (context != null)\n    {\n        // Access test information during data generation\n        Console.WriteLine($"Generating data for: {context.TestMethodName}");\n        Console.WriteLine($"Test class: {context.ClassInformation?.Type.Name}");\n        Console.WriteLine($"Assembly: {context.ClassInformation?.Assembly.Name}");\n        \n        // Store data for later use during test execution\n        context.ObjectBag["GenerationTime"] = DateTime.Now;\n    }\n    \n    yield return new object[] { 1, 2, 3 };\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"sharing-data-between-discovery-and-execution",children:"Sharing Data Between Discovery and Execution"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ObjectBag"})," property on ",(0,i.jsx)(t.code,{children:"TestBuilderContext"})," is carried forward to ",(0,i.jsx)(t.code,{children:"TestContext"}),", allowing you to pass data from discovery time to execution time:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// In your data generator\npublic static IEnumerable<object[]> TestData()\n{\n    var builderContext = TestBuilderContext.Current;\n    if (builderContext != null)\n    {\n        builderContext.ObjectBag["DataGeneratedAt"] = DateTime.Now;\n        builderContext.ObjectBag["GeneratorVersion"] = "1.0";\n    }\n    \n    yield return new object[] { "test" };\n}\n\n// In your test\n[Test]\n[MethodDataSource(nameof(TestData))]\npublic void MyTest(string value)\n{\n    // Access the data stored during generation\n    var generatedAt = TestContext.Current.ObjectBag["DataGeneratedAt"];\n    var version = TestContext.Current.ObjectBag["GeneratorVersion"];\n    \n    Console.WriteLine($"Data was generated at: {generatedAt}");\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"available-properties",children:"Available Properties"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"TestBuilderContext"})," provides:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"TestMethodName"})," - The name of the test method being built"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ClassInformation"})," - Full information about the test class including:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"Type"})," - The test class type"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"Assembly"})," - Assembly information"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"Namespace"})," - The namespace"]}),"\n",(0,i.jsx)(t.li,{children:"Properties, parameters, and more"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"MethodInformation"})," - Full information about the test method"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ObjectBag"})," - A dictionary for storing custom data"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"Events"})," - Test events that can be subscribed to"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Note: ",(0,i.jsx)(t.code,{children:"TestBuilderContext.Current"})," will be ",(0,i.jsx)(t.code,{children:"null"})," if accessed outside of test discovery/building phase."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);