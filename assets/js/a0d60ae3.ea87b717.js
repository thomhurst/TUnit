"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5483],{3752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"test-authoring/skip","title":"Skipping Tests","description":"If you want to simply skip a test, just place a [Skip(reason)] attribute on your test with an explanation of why you\'re skipping it.","source":"@site/docs/test-authoring/skip.md","sourceDirName":"test-authoring","slug":"/test-authoring/skip","permalink":"/docs/test-authoring/skip","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Matrix Tests","permalink":"/docs/test-authoring/matrix-tests"},"next":{"title":"Explicit","permalink":"/docs/test-authoring/explicit"}}');var i=n(4848),o=n(8453);const r={},a="Skipping Tests",c={},p=[{value:"Custom Logic",id:"custom-logic",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"skipping-tests",children:"Skipping Tests"})}),"\n",(0,i.jsxs)(t.p,{children:["If you want to simply skip a test, just place a ",(0,i.jsx)(t.code,{children:"[Skip(reason)]"})," attribute on your test with an explanation of why you're skipping it."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test, Skip("There\'s a bug! See issue #1")]\n    public async Task MyTest()\n    {\n        ...\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"custom-logic",children:"Custom Logic"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"SkipAttribute"})," can be inherited and custom logic plugged into it, so it only skips the test if it meets certain criteria."]}),"\n",(0,i.jsx)(t.p,{children:"As an example, this could be used to skip tests on certain operating systems."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'public class WindowsOnlyAttribute() : SkipAttribute("This test is only supported on Windows")\n{\n    public override Task<bool> ShouldSkip(BeforeTestContext context)\n    {\n        return Task.FromResult(!RuntimeInformation.IsOSPlatform(OSPlatform.Windows));\n    }\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test, WindowsOnly]\n    public async Task MyTest()\n    {\n        ...\n    }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);