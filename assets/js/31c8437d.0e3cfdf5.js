"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[4040],{1371:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"assertions/scopes","title":"Assertion Scopes","description":"In TUnit you can create an assertion scope by calling Assert.Multiple(). This returns an IDisposable and so you should use that by encapsulating the returned value in a using block. This will make sure that any assertion exceptionss are aggregated together and thrown only after the scope is exited.","source":"@site/docs/assertions/scopes.md","sourceDirName":"assertions","slug":"/assertions/scopes","permalink":"/docs/assertions/scopes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Or Conditions","permalink":"/docs/assertions/or-conditions"},"next":{"title":"Assertion Groups","permalink":"/docs/assertions/assertion-groups"}}');var r=n(4848),o=n(8453);const i={},a="Assertion Scopes",c={},l=[];function u(e){const s={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"assertion-scopes",children:"Assertion Scopes"})}),"\n",(0,r.jsxs)(s.p,{children:["In TUnit you can create an assertion scope by calling ",(0,r.jsx)(s.code,{children:"Assert.Multiple()"}),". This returns an ",(0,r.jsx)(s.code,{children:"IDisposable"})," and so you should use that by encapsulating the returned value in a ",(0,r.jsx)(s.code,{children:"using"})," block. This will make sure that any assertion exceptionss are aggregated together and thrown only after the scope is exited."]}),"\n",(0,r.jsx)(s.p,{children:"This is useful for asserting multiple properties and showing all errors at once, instead of having to fix > rerun > fix > rerun."}),"\n",(0,r.jsx)(s.p,{children:"Implicit Scope:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        using var _ = Assert.Multiple();\n\n        await Assert.That(result).IsPositive();\n        await Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,r.jsx)(s.p,{children:"Explicit Scope:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        using (Assert.Multiple())\n        {\n            await Assert.That(result).IsPositive();\n            await Assert.That(result).IsEqualTo(3);\n        }\n    }\n"})})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var t=n(6540);const r={},o=t.createContext(r);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);