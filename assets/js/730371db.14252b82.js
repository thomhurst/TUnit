"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[1584],{3131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"reference/command-line-flags","title":"Command Line Flags","description":"Please note that for the coverage and trx report, you need to install additional extensions","source":"@site/docs/reference/command-line-flags.md","sourceDirName":"reference","slug":"/reference/command-line-flags","permalink":"/docs/reference/command-line-flags","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=n(4848),o=n(8453);const r={},a="Command Line Flags",l={},c=[];function d(e){const t={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"command-line-flags",children:"Command Line Flags"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Please note that for the coverage and trx report, you need to install ",(0,s.jsx)(t.a,{href:"/docs/extensions/",children:"additional extensions"})]})}),"\n",(0,s.jsxs)("pre",{children:[(0,s.jsx)(t.p,{children:"--diagnostic\nEnable the diagnostic logging. The default log level is 'Trace'.\nThe file will be written in the output directory with the name log_[MMddHHssfff].diag"}),(0,s.jsx)(t.p,{children:"--diagnostic-filelogger-synchronouswrite\nForce the built-in file logger to write the log synchronously.\nUseful for scenario where you don't want to lose any log (i.e. in case of crash).\nNote that this is slowing down the test execution."}),(0,s.jsx)(t.p,{children:"--diagnostic-output-directory\nOutput directory of the diagnostic logging.\nIf not specified the file will be generated inside the default 'TestResults' directory."}),(0,s.jsx)(t.p,{children:"--diagnostic-output-fileprefix\nPrefix for the log file name that will replace '[log]_.'"}),(0,s.jsx)(t.p,{children:"--diagnostic-verbosity\nDefine the level of the verbosity for the --diagnostic.\nThe available values are 'Trace', 'Debug', 'Information', 'Warning', 'Error', and 'Critical'."}),(0,s.jsx)(t.p,{children:"--exit-on-process-exit\nExit the test process if dependent process exits. PID must be provided."}),(0,s.jsx)(t.p,{children:"--help\nShow the command line help."}),(0,s.jsx)(t.p,{children:"--ignore-exit-code\nDo not report non successful exit value for specific exit codes\n(e.g. '--ignore-exit-code 8;9' ignore exit code 8 and 9 and will return 0 in these case)"}),(0,s.jsx)(t.p,{children:"--info\nDisplay .NET test application information."}),(0,s.jsx)(t.p,{children:"--list-tests\nList available tests."}),(0,s.jsx)(t.p,{children:"--minimum-expected-tests\nSpecifies the minimum number of tests that are expected to run."}),(0,s.jsx)(t.p,{children:"--results-directory\nThe directory where the test results are going to be placed.\nIf the specified directory doesn't exist, it's created.\nThe default is TestResults in the directory that contains the test application."}),(0,s.jsx)(t.p,{children:"--timeout\nA global test execution timeout.\nTakes one argument as string in the format [h|m|s] where 'value' is float."}),(0,s.jsx)(t.p,{children:"--coverage\nCollect the code coverage using dotnet-coverage tool"}),(0,s.jsx)(t.p,{children:"--coverage-output\nOutput file"}),(0,s.jsx)(t.p,{children:"--coverage-output-format\nOutput file format. Supported values: 'coverage', 'xml' and 'cobertura'"}),(0,s.jsx)(t.p,{children:"--coverage-settings\nXML code coverage settings"}),(0,s.jsx)(t.p,{children:"--disable-logo\nDisables the TUnit logo when starting a test session"}),(0,s.jsx)(t.p,{children:"--fail-fast\nCancel the test run after the first test failure"}),(0,s.jsx)(t.p,{children:"--hide-test-output\nHide Test Output"}),(0,s.jsx)(t.p,{children:"--maximum-parallel-tests\nMaximum Parallel Tests"}),(0,s.jsx)(t.p,{children:"--no-ansi\nDisable outputting ANSI escape characters to screen."}),(0,s.jsx)(t.p,{children:"--no-progress\nDisable reporting progress to screen."}),(0,s.jsx)(t.p,{children:"--output\nOutput verbosity when reporting tests.\nValid values are 'Normal', 'Detailed'. Default is 'Normal'."}),(0,s.jsx)(t.p,{children:"--reflection\nEnable reflection mode for test discovery and execution (defaults to AOT-optimized mode)"}),(0,s.jsx)(t.p,{children:"--report-trx\nEnable generating TRX report"}),(0,s.jsx)(t.p,{children:"--report-trx-filename\nThe name of the generated TRX report"}),(0,s.jsx)(t.p,{children:"--test-parameter\nCustom parameters to pass to TUnit"}),(0,s.jsx)(t.p,{children:"--treenode-filter\nUse a tree filter to filter down the tests to execute"})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);