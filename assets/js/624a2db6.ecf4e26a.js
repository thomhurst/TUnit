"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[4692],{4655:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorial-assertions/fsharp","title":"FSharp","description":"As awaiting doesn\'t work quite the same in F#, the syntax instead looks like this:","source":"@site/docs/tutorial-assertions/fsharp.md","sourceDirName":"tutorial-assertions","slug":"/tutorial-assertions/fsharp","permalink":"/docs/tutorial-assertions/fsharp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Assertion Groups","permalink":"/docs/tutorial-assertions/assertion-groups"},"next":{"title":"Congratulations","permalink":"/docs/tutorial-assertions/congratulations"}}');var r=s(4848),o=s(8453);const a={sidebar_position:10},i="FSharp",c={},l=[];function h(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"fsharp",children:"FSharp"})}),"\n",(0,r.jsx)(t.p,{children:"As awaiting doesn't work quite the same in F#, the syntax instead looks like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fsharp",children:"do! check Assert.That(...).IsSomething()\n"})}),"\n",(0,r.jsx)(t.p,{children:"So a test could look like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fsharp",children:"member this.CheckPositive() = async {\n            let result = 1 + 1\n            do! check (Assert.That(result).IsPositive())\n        }\n"})}),"\n",(0,r.jsx)(t.p,{children:"F# is a lot more strict with type resolution when it comes to extension methods and method overloads. Because of that you may need to annotate the type for the assertions."}),"\n",(0,r.jsx)(t.p,{children:"For example,"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-fsharp",children:'    [<Test>]\n    [<Category("Pass")>]\n    member _.Test3() = async {\n        let value = "1"\n        do! check (Assert.That<string>(value).IsEqualTo("1"))\n    }\n\n    [<Test>]\n    [<Category("Fail")>]\n    member _.Throws1() = async {\n        do! check (Assert.That<string>(fun () -> task { return new string([||]) }).ThrowsException())\n    }\n\n    [<Test>]\n    [<Category("Pass")>]\n    member _.Throws4() = async {\n        do! check (Assert.That<bool>(fun () -> Task.FromResult(true)).ThrowsNothing())\n    }\n\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>i});var n=s(6540);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);