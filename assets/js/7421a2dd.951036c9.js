"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7304],{6396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"migration/nunit","title":"Migrating from NUnit","description":"Using TUnit\'s Code Fixers","source":"@site/docs/migration/nunit.md","sourceDirName":"migration","slug":"/migration/nunit","permalink":"/docs/migration/nunit","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Migrating from xUnit.net","permalink":"/docs/migration/xunit"},"next":{"title":"Migrating from MSTest","permalink":"/docs/migration/mstest"}}');var i=n(4848),a=n(8453);const r={},o="Migrating from NUnit",l={},c=[{value:"Using TUnit&#39;s Code Fixers",id:"using-tunits-code-fixers",level:2},{value:"Steps",id:"steps",level:3},{value:"Install the TUnit packages to your test projects",id:"install-the-tunit-packages-to-your-test-projects",level:4},{value:"Remove the automatically added global usings",id:"remove-the-automatically-added-global-usings",level:4},{value:"Rebuild the project",id:"rebuild-the-project",level:4},{value:"Run the code fixer via the dotnet CLI",id:"run-the-code-fixer-via-the-dotnet-cli",level:4},{value:"Revert step <code>Remove the automatically added global usings</code>",id:"revert-step-remove-the-automatically-added-global-usings",level:4},{value:"Perform any manual bits that are still necessary",id:"perform-any-manual-bits-that-are-still-necessary",level:4},{value:"Remove the NUnit packages",id:"remove-the-nunit-packages",level:4},{value:"Done! (Hopefully)",id:"done-hopefully",level:4},{value:"Manual Migration Guide",id:"manual-migration-guide",level:2},{value:"Test Attributes",id:"test-attributes",level:3},{value:"Setup and Teardown",id:"setup-and-teardown",level:3},{value:"Assertions",id:"assertions",level:3},{value:"Classic Assertions",id:"classic-assertions",level:4},{value:"Constraint-Based Assertions",id:"constraint-based-assertions",level:4},{value:"Collection Assertions",id:"collection-assertions",level:3},{value:"String Assertions",id:"string-assertions",level:3},{value:"Exception Testing",id:"exception-testing",level:3},{value:"Test Data Sources",id:"test-data-sources",level:3},{value:"TestCaseSource",id:"testcasesource",level:4},{value:"Parameterized Tests",id:"parameterized-tests",level:3},{value:"Test Output",id:"test-output",level:3},{value:"Key Differences to Note",id:"key-differences-to-note",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"migrating-from-nunit",children:"Migrating from NUnit"})}),"\n",(0,i.jsx)(t.h2,{id:"using-tunits-code-fixers",children:"Using TUnit's Code Fixers"}),"\n",(0,i.jsx)(t.p,{children:"TUnit has code fixers to help automate the migration from NUnit to TUnit."}),"\n",(0,i.jsx)(t.p,{children:"These code fixers will handle most common scenarios, but you'll likely still need to do some manual adjustments. If you encounter issues or have suggestions for improvements, please raise an issue."}),"\n",(0,i.jsx)(t.h3,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(t.h4,{id:"install-the-tunit-packages-to-your-test-projects",children:"Install the TUnit packages to your test projects"}),"\n",(0,i.jsx)(t.p,{children:"Use your IDE or the dotnet CLI to add the TUnit packages to your test projects"}),"\n",(0,i.jsx)(t.h4,{id:"remove-the-automatically-added-global-usings",children:"Remove the automatically added global usings"}),"\n",(0,i.jsx)(t.p,{children:"In your csproj add:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:"    <PropertyGroup>\n        <TUnitImplicitUsings>false</TUnitImplicitUsings>\n        <TUnitAssertionsImplicitUsings>false</TUnitAssertionsImplicitUsings>\n    </PropertyGroup>\n"})}),"\n",(0,i.jsx)(t.p,{children:"This is temporary - Just to make sure no types clash, and so the code fixers can distinguish between NUnit and TUnit types with similar names."}),"\n",(0,i.jsx)(t.h4,{id:"rebuild-the-project",children:"Rebuild the project"}),"\n",(0,i.jsx)(t.p,{children:"This ensures the TUnit packages have been restored and the analyzers should be loaded."}),"\n",(0,i.jsx)(t.h4,{id:"run-the-code-fixer-via-the-dotnet-cli",children:"Run the code fixer via the dotnet CLI"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"dotnet format analyzers --severity info --diagnostics TUNU0001"})}),"\n",(0,i.jsxs)(t.h4,{id:"revert-step-remove-the-automatically-added-global-usings",children:["Revert step ",(0,i.jsx)(t.code,{children:"Remove the automatically added global usings"})]}),"\n",(0,i.jsx)(t.h4,{id:"perform-any-manual-bits-that-are-still-necessary",children:"Perform any manual bits that are still necessary"}),"\n",(0,i.jsx)(t.p,{children:"Review the converted code and make any necessary manual adjustments.\nRaise an issue if you think something could be automated."}),"\n",(0,i.jsx)(t.h4,{id:"remove-the-nunit-packages",children:"Remove the NUnit packages"}),"\n",(0,i.jsx)(t.p,{children:"Simply uninstall them once you've migrated"}),"\n",(0,i.jsx)(t.h4,{id:"done-hopefully",children:"Done! (Hopefully)"}),"\n",(0,i.jsx)(t.h2,{id:"manual-migration-guide",children:"Manual Migration Guide"}),"\n",(0,i.jsx)(t.h3,{id:"test-attributes",children:"Test Attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[TestFixture]"})," - Remove this attribute (not needed in TUnit)"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Test]"})," remains ",(0,i.jsx)(t.code,{children:"[Test]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[TestCase]"})," becomes ",(0,i.jsx)(t.code,{children:"[Arguments]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[TestCaseSource]"})," becomes ",(0,i.jsx)(t.code,{children:"[MethodDataSource]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Category]"})," becomes ",(0,i.jsx)(t.code,{children:'[Property("Category", "value")]'})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Ignore]"})," becomes ",(0,i.jsx)(t.code,{children:"[Skip]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Explicit]"})," becomes ",(0,i.jsx)(t.code,{children:"[Explicit]"})]}),"\n",(0,i.jsx)(t.h3,{id:"setup-and-teardown",children:"Setup and Teardown"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[SetUp]"})," becomes ",(0,i.jsx)(t.code,{children:"[Before(HookType.Test)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[TearDown]"})," becomes ",(0,i.jsx)(t.code,{children:"[After(HookType.Test)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[OneTimeSetUp]"})," becomes ",(0,i.jsx)(t.code,{children:"[Before(HookType.Class)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[OneTimeTearDown]"})," becomes ",(0,i.jsx)(t.code,{children:"[After(HookType.Class)]"})]}),"\n",(0,i.jsx)(t.h3,{id:"assertions",children:"Assertions"}),"\n",(0,i.jsx)(t.h4,{id:"classic-assertions",children:"Classic Assertions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"// NUnit\nAssert.AreEqual(expected, actual);\nAssert.IsTrue(condition);\nAssert.IsNull(value);\nAssert.Greater(value1, value2);\n\n// TUnit\nawait Assert.That(actual).IsEqualTo(expected);\nawait Assert.That(condition).IsTrue();\nawait Assert.That(value).IsNull();\nawait Assert.That(value1).IsGreaterThan(value2);\n"})}),"\n",(0,i.jsx)(t.h4,{id:"constraint-based-assertions",children:"Constraint-Based Assertions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// NUnit\nAssert.That(actual, Is.EqualTo(expected));\nAssert.That(value, Is.True);\nAssert.That(value, Is.Null);\nAssert.That(text, Does.Contain("substring"));\nAssert.That(collection, Has.Count.EqualTo(5));\n\n// TUnit\nawait Assert.That(actual).IsEqualTo(expected);\nawait Assert.That(value).IsTrue();\nawait Assert.That(value).IsNull();\nawait Assert.That(text).Contains("substring");\nawait Assert.That(collection).HasCount().EqualTo(5);\n'})}),"\n",(0,i.jsx)(t.h3,{id:"collection-assertions",children:"Collection Assertions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"// NUnit\nCollectionAssert.AreEqual(expected, actual);\nCollectionAssert.Contains(collection, item);\nCollectionAssert.IsEmpty(collection);\n\n// TUnit\nawait Assert.That(actual).IsEquivalentTo(expected);\nawait Assert.That(collection).Contains(item);\nawait Assert.That(collection).IsEmpty();\n"})}),"\n",(0,i.jsx)(t.h3,{id:"string-assertions",children:"String Assertions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"// NUnit\nStringAssert.Contains(substring, text);\nStringAssert.StartsWith(prefix, text);\nStringAssert.EndsWith(suffix, text);\n\n// TUnit\nawait Assert.That(text).Contains(substring);\nawait Assert.That(text).StartsWith(prefix);\nawait Assert.That(text).EndsWith(suffix);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"exception-testing",children:"Exception Testing"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"// NUnit\nAssert.Throws<InvalidOperationException>(() => DoSomething());\nAssert.ThrowsAsync<InvalidOperationException>(async () => await DoSomethingAsync());\n\n// TUnit\nawait Assert.ThrowsAsync<InvalidOperationException>(() => DoSomething());\nawait Assert.ThrowsAsync<InvalidOperationException>(async () => await DoSomethingAsync());\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-data-sources",children:"Test Data Sources"}),"\n",(0,i.jsx)(t.h4,{id:"testcasesource",children:"TestCaseSource"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// NUnit\n[TestCaseSource(nameof(TestData))]\npublic void TestMethod(int value, string text)\n{\n    // Test implementation\n}\n\nprivate static IEnumerable TestData()\n{\n    yield return new object[] { 1, "one" };\n    yield return new object[] { 2, "two" };\n}\n\n// TUnit\n[MethodDataSource(nameof(TestData))]\npublic async Task TestMethod(int value, string text)\n{\n    // Test implementation\n}\n\nprivate static IEnumerable<(int, string)> TestData()\n{\n    yield return (1, "one");\n    yield return (2, "two");\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"parameterized-tests",children:"Parameterized Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"// NUnit\n[TestCase(1, 2, 3)]\n[TestCase(10, 20, 30)]\npublic void AdditionTest(int a, int b, int expected)\n{\n    Assert.AreEqual(expected, a + b);\n}\n\n// TUnit\n[Test]\n[Arguments(1, 2, 3)]\n[Arguments(10, 20, 30)]\npublic async Task AdditionTest(int a, int b, int expected)\n{\n    await Assert.That(a + b).IsEqualTo(expected);\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"test-output",children:"Test Output"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// NUnit\nTestContext.WriteLine("Test output");\nTestContext.Out.WriteLine("More output");\n\n// TUnit (inject TestContext)\npublic async Task MyTest(TestContext context)\n{\n    context.OutputWriter.WriteLine("Test output");\n    context.OutputWriter.WriteLine("More output");\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"key-differences-to-note",children:"Key Differences to Note"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Async by Default"}),": TUnit tests and assertions are async by default. Add ",(0,i.jsx)(t.code,{children:"async Task"})," to your test methods and ",(0,i.jsx)(t.code,{children:"await"})," assertions."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"No TestFixture Required"}),": TUnit doesn't require a ",(0,i.jsx)(t.code,{children:"[TestFixture]"})," attribute on test classes."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Fluent Assertions"}),": TUnit uses a fluent assertion style with ",(0,i.jsx)(t.code,{children:"Assert.That()"})," as the starting point."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Dependency Injection"}),": TUnit has built-in support for dependency injection in test classes and methods."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Hooks Instead of Setup/Teardown"}),": TUnit uses ",(0,i.jsx)(t.code,{children:"[Before]"})," and ",(0,i.jsx)(t.code,{children:"[After]"})," attributes with ",(0,i.jsx)(t.code,{children:"HookType"})," to specify when they run."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"TestContext Injection"}),": Instead of a static ",(0,i.jsx)(t.code,{children:"TestContext"}),", TUnit injects it as a parameter where needed."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);