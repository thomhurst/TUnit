"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3046],{9441:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"assertions/string","title":"String Assertions","description":"TUnit provides rich assertions for testing strings, including substring matching, pattern matching, length checks, and various string comparison options.","source":"@site/docs/assertions/string.md","sourceDirName":"assertions","slug":"/assertions/string","permalink":"/docs/assertions/string","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5.5,"frontMatter":{"sidebar_position":5.5},"sidebar":"docs","previous":{"title":"Numeric Assertions","permalink":"/docs/assertions/numeric"},"next":{"title":"Collection Assertions","permalink":"/docs/assertions/collections"}}');var t=s(4848),i=s(8453);const r={sidebar_position:5.5},l="String Assertions",c={},o=[{value:"Content Assertions",id:"content-assertions",level:2},{value:"Contains",id:"contains",level:3},{value:"Case-Insensitive Contains",id:"case-insensitive-contains",level:4},{value:"With String Comparison",id:"with-string-comparison",level:4},{value:"With Trimming",id:"with-trimming",level:4},{value:"Ignoring Whitespace",id:"ignoring-whitespace",level:4},{value:"DoesNotContain",id:"doesnotcontain",level:3},{value:"StartsWith",id:"startswith",level:3},{value:"EndsWith",id:"endswith",level:3},{value:"Pattern Matching",id:"pattern-matching",level:2},{value:"Matches (Regex)",id:"matches-regex",level:3},{value:"Case-Insensitive Matching",id:"case-insensitive-matching",level:4},{value:"With Regex Options",id:"with-regex-options",level:4},{value:"DoesNotMatch",id:"doesnotmatch",level:3},{value:"Length Assertions",id:"length-assertions",level:2},{value:"IsEmpty",id:"isempty",level:3},{value:"IsNotEmpty",id:"isnotempty",level:3},{value:"HasLength",id:"haslength",level:3},{value:"Equality with Options",id:"equality-with-options",level:2},{value:"IsEqualTo",id:"isequalto",level:3},{value:"Ignoring Case",id:"ignoring-case",level:4},{value:"With String Comparison",id:"with-string-comparison-1",level:4},{value:"String Parsing",id:"string-parsing",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Email Validation",id:"email-validation",level:3},{value:"URL Validation",id:"url-validation",level:3},{value:"File Extension Check",id:"file-extension-check",level:3},{value:"Username Validation",id:"username-validation",level:3},{value:"Password Requirements",id:"password-requirements",level:3},{value:"JSON String Content",id:"json-string-content",level:3},{value:"SQL Query Validation",id:"sql-query-validation",level:3},{value:"Null and Empty Checks Combined",id:"null-and-empty-checks-combined",level:2},{value:"IsNullOrEmpty Equivalent",id:"isnullorempty-equivalent",level:3},{value:"IsNullOrWhiteSpace Equivalent",id:"isnullorwhitespace-equivalent",level:3},{value:"StringBuilder Assertions",id:"stringbuilder-assertions",level:2},{value:"Chaining String Assertions",id:"chaining-string-assertions",level:2},{value:"Case Sensitivity Patterns",id:"case-sensitivity-patterns",level:2},{value:"String Formatting Validation",id:"string-formatting-validation",level:2},{value:"Multi-line Strings",id:"multi-line-strings",level:2},{value:"Common String Comparison Options",id:"common-string-comparison-options",level:2},{value:"Path Validation",id:"path-validation",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Trim and Assert",id:"trim-and-assert",level:3},{value:"Case Normalization",id:"case-normalization",level:3},{value:"Substring Extraction",id:"substring-extraction",level:3},{value:"See Also",id:"see-also",level:2}];function h(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"string-assertions",children:"String Assertions"})}),"\n",(0,t.jsx)(e.p,{children:"TUnit provides rich assertions for testing strings, including substring matching, pattern matching, length checks, and various string comparison options."}),"\n",(0,t.jsx)(e.h2,{id:"content-assertions",children:"Content Assertions"}),"\n",(0,t.jsx)(e.h3,{id:"contains",children:"Contains"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string contains a substring:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Contains()\n{\n    var message = "Hello, World!";\n\n    await Assert.That(message).Contains("World");\n    await Assert.That(message).Contains("Hello");\n    await Assert.That(message).Contains(", ");\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"case-insensitive-contains",children:"Case-Insensitive Contains"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Contains_Ignoring_Case()\n{\n    var message = "Hello, World!";\n\n    await Assert.That(message)\n        .Contains("world")\n        .IgnoringCase();\n\n    await Assert.That(message)\n        .Contains("HELLO")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"with-string-comparison",children:"With String Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Contains_With_Comparison()\n{\n    var message = "Hello, World!";\n\n    await Assert.That(message)\n        .Contains("world")\n        .WithComparison(StringComparison.OrdinalIgnoreCase);\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"with-trimming",children:"With Trimming"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Contains_With_Trimming()\n{\n    var message = "  Hello, World!  ";\n\n    await Assert.That(message)\n        .Contains("Hello, World!")\n        .WithTrimming();\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"ignoring-whitespace",children:"Ignoring Whitespace"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Contains_Ignoring_Whitespace()\n{\n    var message = "Hello,    World!";\n\n    await Assert.That(message)\n        .Contains("Hello, World!")\n        .IgnoringWhitespace();\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"doesnotcontain",children:"DoesNotContain"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string does not contain a substring:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Does_Not_Contain()\n{\n    var message = "Hello, World!";\n\n    await Assert.That(message).DoesNotContain("Goodbye");\n    await Assert.That(message).DoesNotContain("xyz");\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["All modifiers work with ",(0,t.jsx)(e.code,{children:"DoesNotContain"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Does_Not_Contain_Ignoring_Case()\n{\n    var message = "Hello, World!";\n\n    await Assert.That(message)\n        .DoesNotContain("goodbye")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"startswith",children:"StartsWith"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string starts with a specific prefix:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Starts_With()\n{\n    var filename = "report_2024.pdf";\n\n    await Assert.That(filename).StartsWith("report");\n\n    var url = "https://example.com";\n    await Assert.That(url).StartsWith("https://");\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"With case-insensitive comparison:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Starts_With_Ignoring_Case()\n{\n    var filename = "Report_2024.pdf";\n\n    await Assert.That(filename)\n        .StartsWith("report")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"endswith",children:"EndsWith"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string ends with a specific suffix:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Ends_With()\n{\n    var filename = "document.pdf";\n\n    await Assert.That(filename).EndsWith(".pdf");\n\n    var email = "user@example.com";\n    await Assert.That(email).EndsWith("example.com");\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"With case-insensitive comparison:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Ends_With_Ignoring_Case()\n{\n    var filename = "document.PDF";\n\n    await Assert.That(filename)\n        .EndsWith(".pdf")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"pattern-matching",children:"Pattern Matching"}),"\n",(0,t.jsx)(e.h3,{id:"matches-regex",children:"Matches (Regex)"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string matches a regular expression pattern:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Matches_Pattern()\n{\n    var email = "test@example.com";\n\n    await Assert.That(email).Matches(@"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$");\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["With a compiled ",(0,t.jsx)(e.code,{children:"Regex"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Matches_With_Regex()\n{\n    var phoneNumber = "(123) 456-7890";\n    var pattern = new Regex(@"^\\(\\d{3}\\) \\d{3}-\\d{4}$");\n\n    await Assert.That(phoneNumber).Matches(pattern);\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"case-insensitive-matching",children:"Case-Insensitive Matching"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Matches_Ignoring_Case()\n{\n    var text = "Hello World";\n\n    await Assert.That(text)\n        .Matches("hello.*world")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"with-regex-options",children:"With Regex Options"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Matches_With_Options()\n{\n    var multiline = "Line 1\\nLine 2\\nLine 3";\n\n    await Assert.That(multiline)\n        .Matches("^Line 2$")\n        .WithOptions(RegexOptions.Multiline);\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"doesnotmatch",children:"DoesNotMatch"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string does not match a pattern:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Does_Not_Match()\n{\n    var text = "abc123";\n\n    await Assert.That(text).DoesNotMatch(@"^\\d+$"); // Not all digits\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"length-assertions",children:"Length Assertions"}),"\n",(0,t.jsx)(e.h3,{id:"isempty",children:"IsEmpty"}),"\n",(0,t.jsxs)(e.p,{children:["Tests that a string is empty (",(0,t.jsx)(e.code,{children:'""'}),"):"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Is_Empty()\n{\n    var emptyString = "";\n\n    await Assert.That(emptyString).IsEmpty();\n}\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Note: This checks for an empty string, not ",(0,t.jsx)(e.code,{children:"null"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Empty_vs_Null()\n{\n    string? nullString = null;\n    string emptyString = "";\n\n    await Assert.That(nullString).IsNull();      // null\n    await Assert.That(emptyString).IsEmpty();    // not null, but empty\n    await Assert.That(emptyString).IsNotNull();  // also passes\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"isnotempty",children:"IsNotEmpty"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string is not empty:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Is_Not_Empty()\n{\n    var text = "Hello";\n\n    await Assert.That(text).IsNotEmpty();\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"haslength",children:"HasLength"}),"\n",(0,t.jsx)(e.p,{children:"Tests that a string has a specific length:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Has_Length()\n{\n    var code = "ABC123";\n\n    await Assert.That(code).HasLength(6);\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"With chained comparison:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Length_With_Comparison()\n{\n    var username = "alice";\n\n    await Assert.That(username)\n        .HasLength().GreaterThan(3)\n        .And.HasLength().LessThan(20);\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Or more concisely:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Length_Range()\n{\n    var username = "alice";\n\n    await Assert.That(username.Length).IsBetween(3, 20);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"equality-with-options",children:"Equality with Options"}),"\n",(0,t.jsx)(e.h3,{id:"isequalto",children:"IsEqualTo"}),"\n",(0,t.jsx)(e.p,{children:"String equality with various comparison options:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Equality()\n{\n    var actual = "Hello";\n    var expected = "Hello";\n\n    await Assert.That(actual).IsEqualTo(expected);\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"ignoring-case",children:"Ignoring Case"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Equality_Ignoring_Case()\n{\n    var actual = "Hello";\n    var expected = "HELLO";\n\n    await Assert.That(actual)\n        .IsEqualTo(expected)\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h4,{id:"with-string-comparison-1",children:"With String Comparison"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Equality_With_Comparison()\n{\n    var actual = "caf\xe9";\n    var expected = "CAF\xc9";\n\n    await Assert.That(actual)\n        .IsEqualTo(expected)\n        .WithComparison(StringComparison.CurrentCultureIgnoreCase);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"string-parsing",children:"String Parsing"}),"\n",(0,t.jsx)(e.p,{children:"You can parse strings to other types and assert on the result:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Parse_String_To_Int()\n{\n    var text = "42";\n\n    var number = await Assert.That(text).WhenParsedInto<int>();\n    await Assert.That(number).IsEqualTo(42);\n}\n'})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Parse_String_To_DateTime()\n{\n    var text = "2024-01-15";\n\n    var date = await Assert.That(text).WhenParsedInto<DateTime>();\n    await Assert.That(date.Year).IsEqualTo(2024);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(e.h3,{id:"email-validation",children:"Email Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_Email()\n{\n    var email = "user@example.com";\n\n    await Assert.That(email)\n        .Contains("@")\n        .And.Matches(@"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$")\n        .And.DoesNotContain(" ");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"url-validation",children:"URL Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_URL()\n{\n    var url = "https://www.example.com/path";\n\n    await Assert.That(url)\n        .StartsWith("https://")\n        .And.Contains("example.com")\n        .And.Matches(@"^https?://[\\w\\.-]+");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"file-extension-check",children:"File Extension Check"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Check_File_Extension()\n{\n    var filename = "document.pdf";\n\n    await Assert.That(filename)\n        .EndsWith(".pdf")\n        .IgnoringCase();\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"username-validation",children:"Username Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_Username()\n{\n    var username = "alice_123";\n\n    await Assert.That(username)\n        .HasLength().GreaterThanOrEqualTo(3)\n        .And.HasLength().LessThanOrEqualTo(20)\n        .And.Matches(@"^[a-zA-Z0-9_]+$")\n        .And.DoesNotContain(" ");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"password-requirements",children:"Password Requirements"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_Password()\n{\n    var password = "SecureP@ss123";\n\n    await Assert.That(password)\n        .HasLength().GreaterThanOrEqualTo(8)\n        .And.Matches(@"[A-Z]")  // Has uppercase\n        .And.Matches(@"[a-z]")  // Has lowercase\n        .And.Matches(@"\\d")     // Has digit\n        .And.Matches(@"[@$!%*?&]"); // Has special char\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"json-string-content",children:"JSON String Content"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Check_JSON_Content()\n{\n    var json = """{"name":"Alice","age":30}""";\n\n    await Assert.That(json)\n        .Contains("\\"name\\"")\n        .And.Contains("\\"Alice\\"")\n        .And.StartsWith("{")\n        .And.EndsWith("}");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"sql-query-validation",children:"SQL Query Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_SQL_Query()\n{\n    var query = "SELECT * FROM Users WHERE Age > 18";\n\n    await Assert.That(query)\n        .StartsWith("SELECT")\n        .And.Contains("FROM Users")\n        .And.Matches(@"WHERE\\s+\\w+\\s*[><=]");\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"null-and-empty-checks-combined",children:"Null and Empty Checks Combined"}),"\n",(0,t.jsx)(e.h3,{id:"isnullorempty-equivalent",children:"IsNullOrEmpty Equivalent"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task Check_Null_Or_Empty()\n{\n    string? text = GetOptionalString();\n\n    // Option 1: Check both conditions\n    if (string.IsNullOrEmpty(text))\n    {\n        // Handle null or empty\n    }\n    else\n    {\n        await Assert.That(text).IsNotNull();\n        await Assert.That(text).IsNotEmpty();\n    }\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"isnullorwhitespace-equivalent",children:"IsNullOrWhiteSpace Equivalent"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Check_Null_Or_Whitespace()\n{\n    string? text = "   ";\n\n    await Assert.That(string.IsNullOrWhiteSpace(text)).IsTrue();\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Better with trimming:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task Require_Non_Whitespace()\n{\n    string? text = GetInput();\n\n    await Assert.That(text)\n        .IsNotNull()\n        .And.IsNotEmpty();\n\n    var trimmed = text.Trim();\n    await Assert.That(trimmed).IsNotEmpty();\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"stringbuilder-assertions",children:"StringBuilder Assertions"}),"\n",(0,t.jsxs)(e.p,{children:["TUnit also supports assertions on ",(0,t.jsx)(e.code,{children:"StringBuilder"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task StringBuilder_Tests()\n{\n    var builder = new StringBuilder();\n    builder.Append("Hello");\n    builder.Append(" ");\n    builder.Append("World");\n\n    var result = builder.ToString();\n\n    await Assert.That(result).IsEqualTo("Hello World");\n    await Assert.That(result).Contains("Hello");\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"chaining-string-assertions",children:"Chaining String Assertions"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Chained_String_Assertions()\n{\n    var input = "Hello, World!";\n\n    await Assert.That(input)\n        .IsNotNull()\n        .And.IsNotEmpty()\n        .And.Contains("World")\n        .And.StartsWith("Hello")\n        .And.EndsWith("!")\n        .And.HasLength(13);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"case-sensitivity-patterns",children:"Case Sensitivity Patterns"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Case_Sensitivity()\n{\n    var text = "TUnit Framework";\n\n    // Case-sensitive (default)\n    await Assert.That(text).Contains("TUnit");\n\n    // Case-insensitive\n    await Assert.That(text)\n        .Contains("tunit")\n        .IgnoringCase();\n\n    // Using StringComparison\n    await Assert.That(text)\n        .Contains("framework")\n        .WithComparison(StringComparison.OrdinalIgnoreCase);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"string-formatting-validation",children:"String Formatting Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Formatted_String()\n{\n    var name = "Alice";\n    var age = 30;\n    var message = $"User {name} is {age} years old";\n\n    await Assert.That(message)\n        .IsEqualTo("User Alice is 30 years old")\n        .And.Contains(name)\n        .And.Contains(age.ToString());\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"multi-line-strings",children:"Multi-line Strings"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Multiline_String()\n{\n    var multiline = """\n        Line 1\n        Line 2\n        Line 3\n        """;\n\n    await Assert.That(multiline)\n        .Contains("Line 1")\n        .And.Contains("Line 2")\n        .And.Matches("Line.*Line.*Line");\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"common-string-comparison-options",children:"Common String Comparison Options"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Comparison_Options()\n{\n    var text = "Hello";\n\n    // Ordinal (binary comparison)\n    await Assert.That(text)\n        .IsEqualTo("hello")\n        .WithComparison(StringComparison.OrdinalIgnoreCase);\n\n    // Current culture\n    await Assert.That(text)\n        .IsEqualTo("hello")\n        .WithComparison(StringComparison.CurrentCultureIgnoreCase);\n\n    // Invariant culture\n    await Assert.That(text)\n        .IsEqualTo("hello")\n        .WithComparison(StringComparison.InvariantCultureIgnoreCase);\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"path-validation",children:"Path Validation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task File_Path_Validation()\n{\n    var path = @"C:\\Users\\Alice\\Documents\\file.txt";\n\n    await Assert.That(path)\n        .Contains(@"\\")\n        .And.EndsWith(".txt")\n        .And.Matches(@"[A-Z]:\\\\");\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Unix path:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Unix_Path_Validation()\n{\n    var path = "/home/alice/documents/file.txt";\n\n    await Assert.That(path)\n        .StartsWith("/")\n        .And.Contains("/")\n        .And.EndsWith(".txt");\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(e.h3,{id:"trim-and-assert",children:"Trim and Assert"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Trim_Before_Assert()\n{\n    var input = "  Hello  ";\n    var trimmed = input.Trim();\n\n    await Assert.That(trimmed).IsEqualTo("Hello");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"case-normalization",children:"Case Normalization"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Normalize_Case()\n{\n    var input = "Hello World";\n    var lower = input.ToLowerInvariant();\n\n    await Assert.That(lower).IsEqualTo("hello world");\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"substring-extraction",children:"Substring Extraction"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Extract_Substring()\n{\n    var text = "Hello, World!";\n    var greeting = text.Substring(0, 5);\n\n    await Assert.That(greeting).IsEqualTo("Hello");\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - String equality assertions"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/assertions/collections",children:"Collections"})," - Working with collections of strings"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"/docs/assertions/null-and-default",children:"Null & Default"})," - Null string checks"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var a=s(6540);const t={},i=a.createContext(t);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);