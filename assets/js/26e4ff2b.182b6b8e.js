"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[568],{9478:(s,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorial-assertions/assertion-groups","title":"Assertion Groups","description":"Mixing \'Or\' & \'And\' conditions within Assert.That(...) statements may result in unexpected logic.","source":"@site/docs/tutorial-assertions/assertion-groups.md","sourceDirName":"tutorial-assertions","slug":"/tutorial-assertions/assertion-groups","permalink":"/docs/tutorial-assertions/assertion-groups","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Delegates","permalink":"/docs/tutorial-assertions/delegates"},"next":{"title":"FSharp","permalink":"/docs/tutorial-assertions/fsharp"}}');var r=t(4848),o=t(8453);const i={sidebar_position:7},a="Assertion Groups",c={},l=[];function d(s){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...s.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"assertion-groups",children:"Assertion Groups"})}),"\n",(0,r.jsxs)(e.p,{children:["Mixing 'Or' & 'And' conditions within ",(0,r.jsx)(e.code,{children:"Assert.That(...)"})," statements may result in unexpected logic."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"var value = \"CD\";\n\nawait Assert.That(value)\n    .Contains('C').And.Contains('D')\n    .Or\n    .Contains('A').And.Contains('B');\n"})}),"\n",(0,r.jsxs)(e.p,{children:["It might look like ",(0,r.jsx)(e.code,{children:"(C && D) || (A && B)"})," but it's actually ",(0,r.jsx)(e.code,{children:"C && (D || A) && B"})]}),"\n",(0,r.jsx)(e.p,{children:"Instead, if you want to combine complex assertion logic into a single assertion, assertion groups can be used to more clearly show a group of logic."}),"\n",(0,r.jsx)(e.p,{children:"For example:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"var value = \"CD\";\n\nvar cd = AssertionGroup.For(value)\n    .WithAssertion(assert => assert.Contains('C'))\n    .And(assert => assert.Contains('D'));\n\nvar ab = AssertionGroup.ForSameValueAs(cd)\n    .WithAssertion(assert => assert.Contains('A'))\n    .And(assert => assert.Contains('B'));\n\nawait AssertionGroup.Assert(cd).Or(ab);\n"})}),"\n",(0,r.jsx)(e.p,{children:"While more verbose, it's clearer how the logic will evaluate."})]})}function u(s={}){const{wrapper:e}={...(0,o.R)(),...s.components};return e?(0,r.jsx)(e,{...s,children:(0,r.jsx)(d,{...s})}):d(s)}},8453:(s,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var n=t(6540);const r={},o=n.createContext(r);function i(s){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function a(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(r):s.components||r:i(s.components),n.createElement(o.Provider,{value:e},s.children)}}}]);