"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2473],{3122:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorial-basics/writing-your-first-test","title":"Writing your first test","description":"Start by creating a new class:","source":"@site/docs/tutorial-basics/writing-your-first-test.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/writing-your-first-test","permalink":"/docs/tutorial-basics/writing-your-first-test","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installing TUnit","permalink":"/docs/tutorial-basics/installing"},"next":{"title":"Running your tests","permalink":"/docs/tutorial-basics/running-your-tests"}}');var i=n(4848),r=n(8453);const a={sidebar_position:2},o="Writing your first test",c={},l=[];function u(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"writing-your-first-test",children:"Writing your first test"})}),"\n",(0,i.jsx)(e.p,{children:"Start by creating a new class:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"namespace MyTestProject;\n\npublic class MyTestClass\n{\n    \n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Now add a method, with a ",(0,i.jsx)(e.code,{children:"[Test]"})," attribute on it:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"That's it. That is your runnable test."}),"\n",(0,i.jsx)(e.p,{children:"We haven't actually made it do anything yet, but we should be able to build our project and run that test."}),"\n",(0,i.jsx)(e.p,{children:"Tests will pass if they execute successfully without any exceptions."}),"\n",(0,i.jsx)(e.p,{children:"Let's add some code to show you how a test might look once finished:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-csharp",children:"using TUnit.Assertions;\nusing TUnit.Assertions.Extensions;\nusing TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        await Assert.That(result).IsEqualTo(3);\n    }\n\n    private int Add(int x, int y)\n    {\n        return x + y;\n    }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Here you can see we've executed some code and added an assertion. We'll go more into that later."})]})}function d(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(t){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),s.createElement(r.Provider,{value:e},t.children)}}}]);