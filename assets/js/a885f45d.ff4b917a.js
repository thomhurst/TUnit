"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7104],{856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"execution/repeating","title":"Repeating","description":"If you want to repeat a test, add a [RepeatAttribute] onto your test method or class. This takes an int of how many times you\'d like to repeat. Each repeat will show in the test explorer as a new test.","source":"@site/docs/execution/repeating.md","sourceDirName":"execution","slug":"/execution/repeating","permalink":"/docs/execution/repeating","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Retrying","permalink":"/docs/execution/retrying"},"next":{"title":"Timeouts","permalink":"/docs/execution/timeouts"}}');var a=n(4848),i=n(8453);const o={sidebar_position:4},r="Repeating",l={},c=[{value:"Global Repeat",id:"global-repeat",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"repeating",children:"Repeating"})}),"\n",(0,a.jsxs)(t.p,{children:["If you want to repeat a test, add a ",(0,a.jsx)(t.code,{children:"[RepeatAttribute]"})," onto your test method or class. This takes an ",(0,a.jsx)(t.code,{children:"int"})," of how many times you'd like to repeat. Each repeat will show in the test explorer as a new test."]}),"\n",(0,a.jsx)(t.p,{children:"This can be used on base classes and inherited to affect all tests in sub-classes."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test]\n    [Repeat(3)]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"global-repeat",children:"Global Repeat"}),"\n",(0,a.jsx)(t.p,{children:"In case you want to apply the repeat logic to all tests in a project, you can add the attribute on the assembly level."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"[assembly: Repeat(3)]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Or you can apply the repeat policy on all the tests in a class like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"[Repeat(3)]\npublic class MyTestClass\n{\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The more specific attribute will always override the more general one.\nFor example, the ",(0,a.jsx)(t.code,{children:"[Repeat(3)]"})," on a method will override the ",(0,a.jsx)(t.code,{children:"[Repeat(5)]"})," on the class,\nwhich in turn will override the ",(0,a.jsx)(t.code,{children:"[Repeat(7)]"})," on the assembly."]}),"\n",(0,a.jsx)(t.p,{children:"So the order of precedence is:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Method"}),"\n",(0,a.jsx)(t.li,{children:"Class"}),"\n",(0,a.jsx)(t.li,{children:"Assembly"}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);