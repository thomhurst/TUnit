"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2255],{2052:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"assertions/boolean","title":"Boolean Assertions","description":"TUnit provides simple, expressive assertions for testing boolean values. These assertions work with both bool and bool? (nullable boolean) types.","source":"@site/docs/assertions/boolean.md","sourceDirName":"assertions","slug":"/assertions/boolean","permalink":"/docs/assertions/boolean","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3.5,"frontMatter":{"sidebar_position":3.5},"sidebar":"docs","previous":{"title":"Or Conditions","permalink":"/docs/assertions/or-conditions"},"next":{"title":"Numeric Assertions","permalink":"/docs/assertions/numeric"}}');var l=n(4848),i=n(8453);const t={sidebar_position:3.5},r="Boolean Assertions",o={},c=[{value:"Basic Boolean Assertions",id:"basic-boolean-assertions",level:2},{value:"IsTrue",id:"istrue",level:3},{value:"IsFalse",id:"isfalse",level:3},{value:"Alternative: Using IsEqualTo",id:"alternative-using-isequalto",level:2},{value:"Nullable Booleans",id:"nullable-booleans",level:2},{value:"Null Nullable Booleans",id:"null-nullable-booleans",level:3},{value:"Chaining Boolean Assertions",id:"chaining-boolean-assertions",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Validation Results",id:"validation-results",level:3},{value:"Permission Checks",id:"permission-checks",level:3},{value:"State Flags",id:"state-flags",level:3},{value:"Feature Flags",id:"feature-flags",level:3},{value:"Testing Conditional Logic",id:"testing-conditional-logic",level:2},{value:"Logical AND",id:"logical-and",level:3},{value:"Logical OR",id:"logical-or",level:3},{value:"Logical NOT",id:"logical-not",level:3},{value:"Complex Boolean Expressions",id:"complex-boolean-expressions",level:2},{value:"Comparison with Other Values",id:"comparison-with-other-values",level:2},{value:"Testing LINQ Queries",id:"testing-linq-queries",level:2},{value:"String Boolean Methods",id:"string-boolean-methods",level:2},{value:"Type Checking Booleans",id:"type-checking-booleans",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Toggle Testing",id:"toggle-testing",level:3},{value:"Authentication State",id:"authentication-state",level:3},{value:"Validation Scenarios",id:"validation-scenarios",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"boolean-assertions",children:"Boolean Assertions"})}),"\n",(0,l.jsxs)(s.p,{children:["TUnit provides simple, expressive assertions for testing boolean values. These assertions work with both ",(0,l.jsx)(s.code,{children:"bool"})," and ",(0,l.jsx)(s.code,{children:"bool?"})," (nullable boolean) types."]}),"\n",(0,l.jsx)(s.h2,{id:"basic-boolean-assertions",children:"Basic Boolean Assertions"}),"\n",(0,l.jsx)(s.h3,{id:"istrue",children:"IsTrue"}),"\n",(0,l.jsxs)(s.p,{children:["Tests that a boolean value is ",(0,l.jsx)(s.code,{children:"true"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Value_Is_True()\n{\n    var isValid = ValidateInput("test@example.com");\n    await Assert.That(isValid).IsTrue();\n\n    var hasPermission = user.HasPermission("write");\n    await Assert.That(hasPermission).IsTrue();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"isfalse",children:"IsFalse"}),"\n",(0,l.jsxs)(s.p,{children:["Tests that a boolean value is ",(0,l.jsx)(s.code,{children:"false"}),":"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Value_Is_False()\n{\n    var isExpired = CheckIfExpired(futureDate);\n    await Assert.That(isExpired).IsFalse();\n\n    var isEmpty = list.Count == 0;\n    await Assert.That(isEmpty).IsFalse();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"alternative-using-isequalto",children:"Alternative: Using IsEqualTo"}),"\n",(0,l.jsxs)(s.p,{children:["You can also use ",(0,l.jsx)(s.code,{children:"IsEqualTo()"})," for boolean comparisons:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Using_IsEqualTo()\n{\n    var result = PerformCheck();\n\n    await Assert.That(result).IsEqualTo(true);\n    // Same as: await Assert.That(result).IsTrue();\n\n    await Assert.That(result).IsEqualTo(false);\n    // Same as: await Assert.That(result).IsFalse();\n}\n"})}),"\n",(0,l.jsxs)(s.p,{children:["However, ",(0,l.jsx)(s.code,{children:"IsTrue()"})," and ",(0,l.jsx)(s.code,{children:"IsFalse()"})," are more expressive and recommended for boolean values."]}),"\n",(0,l.jsx)(s.h2,{id:"nullable-booleans",children:"Nullable Booleans"}),"\n",(0,l.jsxs)(s.p,{children:["Both assertions work with nullable booleans (",(0,l.jsx)(s.code,{children:"bool?"}),"):"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Nullable_Boolean_True()\n{\n    bool? result = GetOptionalFlag();\n\n    await Assert.That(result).IsTrue();\n    // This asserts both:\n    // 1. result is not null\n    // 2. result.Value is true\n}\n\n[Test]\npublic async Task Nullable_Boolean_False()\n{\n    bool? result = GetOptionalFlag();\n\n    await Assert.That(result).IsFalse();\n    // This asserts both:\n    // 1. result is not null\n    // 2. result.Value is false\n}\n"})}),"\n",(0,l.jsx)(s.h3,{id:"null-nullable-booleans",children:"Null Nullable Booleans"}),"\n",(0,l.jsxs)(s.p,{children:["If a nullable boolean is ",(0,l.jsx)(s.code,{children:"null"}),", both ",(0,l.jsx)(s.code,{children:"IsTrue()"})," and ",(0,l.jsx)(s.code,{children:"IsFalse()"})," will fail:"]}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Nullable_Boolean_Null()\n{\n    bool? result = null;\n\n    // These will both fail:\n    // await Assert.That(result).IsTrue();  // \u274c Fails - null is not true\n    // await Assert.That(result).IsFalse(); // \u274c Fails - null is not false\n\n    // Check for null first:\n    await Assert.That(result).IsNull();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"chaining-boolean-assertions",children:"Chaining Boolean Assertions"}),"\n",(0,l.jsx)(s.p,{children:"Boolean assertions can be chained with other assertions:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_With_Other_Assertions()\n{\n    bool? flag = GetFlag();\n\n    await Assert.That(flag)\n        .IsNotNull()\n        .And.IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,l.jsx)(s.h3,{id:"validation-results",children:"Validation Results"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Email_Validation()\n{\n    var isValid = EmailValidator.Validate("test@example.com");\n    await Assert.That(isValid).IsTrue();\n\n    var isInvalid = EmailValidator.Validate("not-an-email");\n    await Assert.That(isInvalid).IsFalse();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"permission-checks",children:"Permission Checks"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task User_Permissions()\n{\n    var user = await GetUserAsync("alice");\n\n    await Assert.That(user.CanRead).IsTrue();\n    await Assert.That(user.CanWrite).IsTrue();\n    await Assert.That(user.CanDelete).IsFalse();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"state-flags",children:"State Flags"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Service_State()\n{\n    var service = new BackgroundService();\n\n    await Assert.That(service.IsRunning).IsFalse();\n\n    await service.StartAsync();\n\n    await Assert.That(service.IsRunning).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.h3,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Feature_Toggles()\n{\n    var config = LoadConfiguration();\n\n    await Assert.That(config.EnableNewFeature).IsTrue();\n    await Assert.That(config.EnableBetaFeature).IsFalse();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"testing-conditional-logic",children:"Testing Conditional Logic"}),"\n",(0,l.jsx)(s.h3,{id:"logical-and",children:"Logical AND"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Logical_AND()\n{\n    var isAdult = age >= 18;\n    var hasLicense = CheckLicense(userId);\n    var canDrive = isAdult && hasLicense;\n\n    await Assert.That(canDrive).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.h3,{id:"logical-or",children:"Logical OR"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Logical_OR()\n{\n    var isWeekend = dayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;\n    var isHoliday = CheckIfHoliday(date);\n    var isDayOff = isWeekend || isHoliday;\n\n    await Assert.That(isDayOff).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.h3,{id:"logical-not",children:"Logical NOT"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Logical_NOT()\n{\n    var isExpired = CheckExpiration(token);\n    var isValid = !isExpired;\n\n    await Assert.That(isValid).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"complex-boolean-expressions",children:"Complex Boolean Expressions"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Complex_Expression()\n{\n    var user = GetUser();\n    var canAccess = user.IsActive &&\n                    !user.IsBanned &&\n                    (user.IsPremium || user.HasFreeTrial);\n\n    await Assert.That(canAccess).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.p,{children:"You can also break this down for clarity:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Complex_Expression_Broken_Down()\n{\n    var user = GetUser();\n\n    await using (Assert.Multiple())\n    {\n        await Assert.That(user.IsActive).IsTrue();\n        await Assert.That(user.IsBanned).IsFalse();\n        await Assert.That(user.IsPremium || user.HasFreeTrial).IsTrue();\n    }\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"comparison-with-other-values",children:"Comparison with Other Values"}),"\n",(0,l.jsx)(s.p,{children:"When testing boolean results of comparisons, you can often simplify:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Comparison_Simplified()\n{\n    var count = GetCount();\n\n    // Less clear:\n    await Assert.That(count > 0).IsTrue();\n\n    // More clear and expressive:\n    await Assert.That(count).IsGreaterThan(0);\n}\n"})}),"\n",(0,l.jsx)(s.p,{children:"Similarly for equality:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Equality_Simplified()\n{\n    var name = GetName();\n\n    // Less clear:\n    await Assert.That(name == "Alice").IsTrue();\n\n    // More clear:\n    await Assert.That(name).IsEqualTo("Alice");\n}\n'})}),"\n",(0,l.jsx)(s.p,{children:"Use boolean assertions for actual boolean values and flags, not for comparisons."}),"\n",(0,l.jsx)(s.h2,{id:"testing-linq-queries",children:"Testing LINQ Queries"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task LINQ_Any()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    var hasEven = numbers.Any(n => n % 2 == 0);\n    await Assert.That(hasEven).IsTrue();\n\n    var hasNegative = numbers.Any(n => n < 0);\n    await Assert.That(hasNegative).IsFalse();\n}\n\n[Test]\npublic async Task LINQ_All()\n{\n    var numbers = new[] { 2, 4, 6, 8 };\n\n    var allEven = numbers.All(n => n % 2 == 0);\n    await Assert.That(allEven).IsTrue();\n\n    var allPositive = numbers.All(n => n > 0);\n    await Assert.That(allPositive).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.p,{children:"Note: TUnit provides specialized collection assertions for these patterns:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Using_Collection_Assertions()\n{\n    var numbers = new[] { 2, 4, 6, 8 };\n\n    // Instead of .All(n => n % 2 == 0):\n    await Assert.That(numbers).All(n => n % 2 == 0);\n\n    // Instead of .Any(n => n > 5):\n    await Assert.That(numbers).Any(n => n > 5);\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"string-boolean-methods",children:"String Boolean Methods"}),"\n",(0,l.jsx)(s.p,{children:"Many string methods return booleans:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Boolean_Methods()\n{\n    var text = "Hello World";\n\n    await Assert.That(text.StartsWith("Hello")).IsTrue();\n    await Assert.That(text.EndsWith("World")).IsTrue();\n    await Assert.That(text.Contains("lo Wo")).IsTrue();\n    await Assert.That(string.IsNullOrEmpty(text)).IsFalse();\n}\n'})}),"\n",(0,l.jsx)(s.p,{children:"But TUnit has more expressive string assertions:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Using_String_Assertions()\n{\n    var text = "Hello World";\n\n    // More expressive:\n    await Assert.That(text).StartsWith("Hello");\n    await Assert.That(text).EndsWith("World");\n    await Assert.That(text).Contains("lo Wo");\n    await Assert.That(text).IsNotEmpty();\n}\n'})}),"\n",(0,l.jsx)(s.h2,{id:"type-checking-booleans",children:"Type Checking Booleans"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Type_Checking()\n{\n    var obj = GetObject();\n\n    await Assert.That(obj is string).IsTrue();\n    await Assert.That(obj is not null).IsTrue();\n}\n"})}),"\n",(0,l.jsx)(s.p,{children:"Or use type assertions:"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Using_Type_Assertions()\n{\n    var obj = GetObject();\n\n    await Assert.That(obj).IsTypeOf<string>();\n    await Assert.That(obj).IsNotNull();\n}\n"})}),"\n",(0,l.jsx)(s.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,l.jsx)(s.h3,{id:"toggle-testing",children:"Toggle Testing"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Toggle_State()\n{\n    var toggle = new Toggle();\n\n    await Assert.That(toggle.IsOn).IsFalse();\n\n    toggle.TurnOn();\n    await Assert.That(toggle.IsOn).IsTrue();\n\n    toggle.TurnOff();\n    await Assert.That(toggle.IsOn).IsFalse();\n}\n"})}),"\n",(0,l.jsx)(s.h3,{id:"authentication-state",children:"Authentication State"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Authentication_State()\n{\n    var authService = new AuthenticationService();\n\n    await Assert.That(authService.IsAuthenticated).IsFalse();\n\n    await authService.LoginAsync("user", "password");\n\n    await Assert.That(authService.IsAuthenticated).IsTrue();\n}\n'})}),"\n",(0,l.jsx)(s.h3,{id:"validation-scenarios",children:"Validation Scenarios"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Multiple_Validations()\n{\n    var form = new RegistrationForm\n    {\n        Email = "test@example.com",\n        Password = "SecurePass123!",\n        Age = 25\n    };\n\n    await using (Assert.Multiple())\n    {\n        await Assert.That(form.IsEmailValid()).IsTrue();\n        await Assert.That(form.IsPasswordStrong()).IsTrue();\n        await Assert.That(form.IsAgeValid()).IsTrue();\n        await Assert.That(form.IsComplete()).IsTrue();\n    }\n}\n'})}),"\n",(0,l.jsx)(s.h2,{id:"see-also",children:"See Also"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - General equality testing"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"/docs/assertions/null-and-default",children:"Null & Default"})," - Testing for null values"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"/docs/assertions/collections",children:"Collections"})," - Collection-specific boolean tests (All, Any)"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.a,{href:"/docs/assertions/types",children:"Type Assertions"})," - Type checking instead of ",(0,l.jsx)(s.code,{children:"is"})," checks"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>r});var a=n(6540);const l={},i=a.createContext(l);function t(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);