"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7762],{6026:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"assertions/tasks-and-async","title":"Task and Async Assertions","description":"TUnit provides specialized assertions for testing Task and Task objects, including state checking, completion timeouts, and async exception handling.","source":"@site/docs/assertions/tasks-and-async.md","sourceDirName":"assertions","slug":"/assertions/tasks-and-async","permalink":"/docs/assertions/tasks-and-async","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"docs","previous":{"title":"Type Assertions","permalink":"/docs/assertions/types"},"next":{"title":"Specialized Type Assertions","permalink":"/docs/assertions/specialized-types"}}');var t=n(4848),i=n(8453);const l={sidebar_position:11},c="Task and Async Assertions",r={},o=[{value:"Task State Assertions",id:"task-state-assertions",level:2},{value:"IsCompleted / IsNotCompleted",id:"iscompleted--isnotcompleted",level:3},{value:"IsCanceled / IsNotCanceled",id:"iscanceled--isnotcanceled",level:3},{value:"IsFaulted / IsNotFaulted",id:"isfaulted--isnotfaulted",level:3},{value:"IsCompletedSuccessfully / IsNotCompletedSuccessfully (.NET 6+)",id:"iscompletedsuccessfully--isnotcompletedsuccessfully-net-6",level:3},{value:"Timeout Assertions",id:"timeout-assertions",level:2},{value:"CompletesWithin",id:"completeswithin",level:3},{value:"WaitsFor",id:"waitsfor",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"API Call Timeout",id:"api-call-timeout",level:3},{value:"Background Task Completion",id:"background-task-completion",level:3},{value:"Cancellation Token Handling",id:"cancellation-token-handling",level:3},{value:"Async Exception Handling",id:"async-exception-handling",level:3},{value:"Task Result Assertions",id:"task-result-assertions",level:3},{value:"Parallel Task Execution",id:"parallel-task-execution",level:3},{value:"Task State Transitions",id:"task-state-transitions",level:3},{value:"Failed Task",id:"failed-task",level:3},{value:"Canceled Task",id:"canceled-task",level:3},{value:"WhenAll and WhenAny",id:"whenall-and-whenany",level:2},{value:"WhenAll Completion",id:"whenall-completion",level:3},{value:"WhenAny Completion",id:"whenany-completion",level:3},{value:"ValueTask Assertions",id:"valuetask-assertions",level:2},{value:"Chaining Task Assertions",id:"chaining-task-assertions",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Retry Logic Testing",id:"retry-logic-testing",level:3},{value:"Debounce Testing",id:"debounce-testing",level:3},{value:"Circuit Breaker Testing",id:"circuit-breaker-testing",level:3},{value:"Producer-Consumer Testing",id:"producer-consumer-testing",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Testing Async Disposal",id:"testing-async-disposal",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"task-and-async-assertions",children:"Task and Async Assertions"})}),"\n",(0,t.jsxs)(s.p,{children:["TUnit provides specialized assertions for testing ",(0,t.jsx)(s.code,{children:"Task"})," and ",(0,t.jsx)(s.code,{children:"Task<T>"})," objects, including state checking, completion timeouts, and async exception handling."]}),"\n",(0,t.jsx)(s.h2,{id:"task-state-assertions",children:"Task State Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"iscompleted--isnotcompleted",children:"IsCompleted / IsNotCompleted"}),"\n",(0,t.jsx)(s.p,{children:"Tests whether a task has completed (successfully, faulted, or canceled):"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Is_Completed()\n{\n    var completedTask = Task.CompletedTask;\n    await Assert.That(completedTask).IsCompleted();\n\n    var runningTask = Task.Delay(10000);\n    await Assert.That(runningTask).IsNotCompleted();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iscanceled--isnotcanceled",children:"IsCanceled / IsNotCanceled"}),"\n",(0,t.jsx)(s.p,{children:"Tests whether a task was canceled:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Is_Canceled()\n{\n    var cts = new CancellationTokenSource();\n    cts.Cancel();\n\n    var task = Task.Run(() => { }, cts.Token);\n\n    try\n    {\n        await task;\n    }\n    catch (TaskCanceledException)\n    {\n        // Expected\n    }\n\n    await Assert.That(task).IsCanceled();\n}\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Not_Canceled()\n{\n    var task = Task.CompletedTask;\n\n    await Assert.That(task).IsNotCanceled();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isfaulted--isnotfaulted",children:"IsFaulted / IsNotFaulted"}),"\n",(0,t.jsx)(s.p,{children:"Tests whether a task ended in a faulted state (threw an exception):"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Is_Faulted()\n{\n    var faultedTask = Task.Run(() => throw new InvalidOperationException());\n\n    try\n    {\n        await faultedTask;\n    }\n    catch\n    {\n        // Expected\n    }\n\n    await Assert.That(faultedTask).IsFaulted();\n}\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Not_Faulted()\n{\n    var successfulTask = Task.CompletedTask;\n\n    await Assert.That(successfulTask).IsNotFaulted();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iscompletedsuccessfully--isnotcompletedsuccessfully-net-6",children:"IsCompletedSuccessfully / IsNotCompletedSuccessfully (.NET 6+)"}),"\n",(0,t.jsx)(s.p,{children:"Tests whether a task completed successfully (not faulted or canceled):"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Completed_Successfully()\n{\n    var task = Task.CompletedTask;\n\n    await Assert.That(task).IsCompletedSuccessfully();\n}\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Not_Completed_Successfully()\n{\n    var cts = new CancellationTokenSource();\n    cts.Cancel();\n    var canceledTask = Task.FromCanceled(cts.Token);\n\n    await Assert.That(canceledTask).IsNotCompletedSuccessfully();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"timeout-assertions",children:"Timeout Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"completeswithin",children:"CompletesWithin"}),"\n",(0,t.jsx)(s.p,{children:"Tests that a task completes within a specified time:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Completes_Within_Timeout()\n{\n    var fastTask = Task.Delay(100);\n\n    await Assert.That(fastTask).CompletesWithin(TimeSpan.FromSeconds(1));\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"Fails if timeout exceeded:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Exceeds_Timeout()\n{\n    var slowTask = Task.Delay(5000);\n\n    // This will fail - task takes longer than timeout\n    // await Assert.That(slowTask).CompletesWithin(TimeSpan.FromMilliseconds(100));\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"waitsfor",children:"WaitsFor"}),"\n",(0,t.jsx)(s.p,{children:"Waits for a condition to become true within a timeout:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Wait_For_Condition()\n{\n    bool condition = false;\n\n    _ = Task.Run(async () =>\n    {\n        await Task.Delay(500);\n        condition = true;\n    });\n\n    await Assert.That(() => condition)\n        .WaitsFor(c => c == true, timeout: TimeSpan.FromSeconds(2));\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(s.h3,{id:"api-call-timeout",children:"API Call Timeout"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task API_Call_Completes_In_Time()\n{\n    var apiTask = _httpClient.GetAsync("https://api.example.com/data");\n\n    await Assert.That(apiTask).CompletesWithin(TimeSpan.FromSeconds(5));\n\n    var response = await apiTask;\n    await Assert.That(response.IsSuccessStatusCode).IsTrue();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"background-task-completion",children:"Background Task Completion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Background_Processing_Completes()\n{\n    var processingTask = ProcessDataInBackgroundAsync();\n\n    await Assert.That(processingTask).CompletesWithin(TimeSpan.FromMinutes(1));\n    await Assert.That(processingTask).IsCompletedSuccessfully();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"cancellation-token-handling",children:"Cancellation Token Handling"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Operation_Respects_Cancellation()\n{\n    using var cts = new CancellationTokenSource();\n    cts.CancelAfter(TimeSpan.FromMilliseconds(100));\n\n    var task = LongRunningOperationAsync(cts.Token);\n\n    try\n    {\n        await task;\n    }\n    catch (OperationCanceledException)\n    {\n        // Expected\n    }\n\n    await Assert.That(task).IsCanceled();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"async-exception-handling",children:"Async Exception Handling"}),"\n",(0,t.jsx)(s.p,{children:"For testing exceptions in async code, use exception assertions:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Async_Method_Throws_Exception()\n{\n    await Assert.That(async () => await FailingOperationAsync())\n        .Throws<InvalidOperationException>();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"task-result-assertions",children:"Task Result Assertions"}),"\n",(0,t.jsxs)(s.p,{children:["For ",(0,t.jsx)(s.code,{children:"Task<T>"}),", await the task first, then assert on the result:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Returns_Expected_Result()\n{\n    var task = GetValueAsync();\n\n    // Ensure it completes in time\n    await Assert.That(task).CompletesWithin(TimeSpan.FromSeconds(1));\n\n    // Get the result\n    var result = await task;\n\n    // Assert on the result\n    await Assert.That(result).IsEqualTo(42);\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parallel-task-execution",children:"Parallel Task Execution"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Parallel_Tasks_Complete()\n{\n    var task1 = Task.Delay(100);\n    var task2 = Task.Delay(100);\n    var task3 = Task.Delay(100);\n\n    var allTasks = Task.WhenAll(task1, task2, task3);\n\n    await Assert.That(allTasks).CompletesWithin(TimeSpan.FromSeconds(1));\n    await Assert.That(allTasks).IsCompletedSuccessfully();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"task-state-transitions",children:"Task State Transitions"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_State_Progression()\n{\n    var tcs = new TaskCompletionSource<int>();\n    var task = tcs.Task;\n\n    // Initially not completed\n    await Assert.That(task).IsNotCompleted();\n\n    // Complete the task\n    tcs.SetResult(42);\n\n    // Now completed\n    await Assert.That(task).IsCompleted();\n    await Assert.That(task).IsCompletedSuccessfully();\n\n    var result = await task;\n    await Assert.That(result).IsEqualTo(42);\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"failed-task",children:"Failed Task"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Task_Fails_With_Exception()\n{\n    var tcs = new TaskCompletionSource<int>();\n    var task = tcs.Task;\n\n    tcs.SetException(new InvalidOperationException("Operation failed"));\n\n    await Assert.That(task).IsFaulted();\n    await Assert.That(task).IsNotCompletedSuccessfully();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"canceled-task",children:"Canceled Task"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Task_Can_Be_Canceled()\n{\n    var tcs = new TaskCompletionSource<int>();\n    var task = tcs.Task;\n\n    tcs.SetCanceled();\n\n    await Assert.That(task).IsCanceled();\n    await Assert.That(task).IsNotCompletedSuccessfully();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"whenall-and-whenany",children:"WhenAll and WhenAny"}),"\n",(0,t.jsx)(s.h3,{id:"whenall-completion",children:"WhenAll Completion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task All_Tasks_Complete()\n{\n    var tasks = Enumerable.Range(1, 5)\n        .Select(i => Task.Delay(i * 100))\n        .ToArray();\n\n    var allCompleted = Task.WhenAll(tasks);\n\n    await Assert.That(allCompleted).CompletesWithin(TimeSpan.FromSeconds(1));\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"whenany-completion",children:"WhenAny Completion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Any_Task_Completes()\n{\n    var fastTask = Task.Delay(100);\n    var slowTask = Task.Delay(5000);\n\n    var firstCompleted = Task.WhenAny(fastTask, slowTask);\n\n    await Assert.That(firstCompleted).CompletesWithin(TimeSpan.FromMilliseconds(500));\n\n    var completed = await firstCompleted;\n    await Assert.That(completed).IsSameReferenceAs(fastTask);\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"valuetask-assertions",children:"ValueTask Assertions"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"ValueTask"})," and ",(0,t.jsx)(s.code,{children:"ValueTask<T>"})," work similarly:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task ValueTask_Completion()\n{\n    var valueTask = GetValueTaskAsync();\n\n    var result = await valueTask;\n    await Assert.That(result).IsGreaterThan(0);\n}\n\nasync ValueTask<int> GetValueTaskAsync()\n{\n    await Task.Delay(10);\n    return 42;\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"chaining-task-assertions",children:"Chaining Task Assertions"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_Task_Assertions()\n{\n    var task = GetDataAsync();\n\n    await Assert.That(task)\n        .CompletesWithin(TimeSpan.FromSeconds(5));\n\n    await Assert.That(task)\n        .IsCompleted()\n        .And.IsCompletedSuccessfully()\n        .And.IsNotCanceled()\n        .And.IsNotFaulted();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(s.h3,{id:"retry-logic-testing",children:"Retry Logic Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Retry_Eventually_Succeeds()\n{\n    int attempts = 0;\n\n    var task = RetryAsync(async () =>\n    {\n        attempts++;\n        if (attempts < 3)\n            throw new Exception("Temporary failure");\n        return "Success";\n    }, maxRetries: 5);\n\n    await Assert.That(task).CompletesWithin(TimeSpan.FromSeconds(10));\n    var result = await task;\n    await Assert.That(result).IsEqualTo("Success");\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"debounce-testing",children:"Debounce Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Debounced_Operation()\n{\n    var trigger = new Subject<string>();\n    var debouncedTask = trigger\n        .Throttle(TimeSpan.FromMilliseconds(500))\n        .FirstAsync()\n        .ToTask();\n\n    trigger.OnNext("value");\n\n    await Assert.That(debouncedTask)\n        .CompletesWithin(TimeSpan.FromSeconds(1));\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"circuit-breaker-testing",children:"Circuit Breaker Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Circuit_Breaker_Opens()\n{\n    var circuitBreaker = new CircuitBreaker();\n\n    // Fail enough times to open circuit\n    for (int i = 0; i < 5; i++)\n    {\n        try\n        {\n            await circuitBreaker.ExecuteAsync(() => throw new Exception());\n        }\n        catch { }\n    }\n\n    // Circuit should be open\n    var task = circuitBreaker.ExecuteAsync(() => Task.CompletedTask);\n\n    await Assert.That(async () => await task)\n        .Throws<CircuitBreakerOpenException>();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"producer-consumer-testing",children:"Producer-Consumer Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Producer_Consumer_Processes_Items()\n{\n    var channel = Channel.CreateUnbounded<int>();\n\n    var producer = ProduceItemsAsync(channel.Writer);\n    var consumer = ConsumeItemsAsync(channel.Reader);\n\n    await Assert.That(producer).CompletesWithin(TimeSpan.FromSeconds(1));\n    await Assert.That(consumer).CompletesWithin(TimeSpan.FromSeconds(2));\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Rate_Limiter_Delays_Requests()\n{\n    var rateLimiter = new RateLimiter(maxRequests: 5, perTimeSpan: TimeSpan.FromSeconds(1));\n\n    var stopwatch = Stopwatch.StartNew();\n\n    // Make 10 requests (should take ~2 seconds due to rate limiting)\n    var tasks = Enumerable.Range(0, 10)\n        .Select(_ => rateLimiter.ExecuteAsync(() => Task.CompletedTask));\n\n    await Task.WhenAll(tasks);\n    stopwatch.Stop();\n\n    await Assert.That(stopwatch.Elapsed).IsGreaterThan(TimeSpan.FromSeconds(1.5));\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"testing-async-disposal",children:"Testing Async Disposal"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Async_Disposable_Cleanup()\n{\n    var resource = new AsyncResource();\n\n    await using (resource)\n    {\n        // Use resource\n    }\n\n    // After disposal\n    await Assert.That(resource.IsDisposed).IsTrue();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/exceptions",children:"Exceptions"})," - Testing async exceptions"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/datetime",children:"DateTime"})," - Timeout and duration testing"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/boolean",children:"Boolean"})," - Testing task state booleans"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>c});var a=n(6540);const t={},i=a.createContext(t);function l(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);