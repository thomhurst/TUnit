"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[910],{9365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"execution/engine-modes","title":"AOT-Only Mode","description":"TUnit now operates exclusively in AOT (Ahead-of-Time) compilation mode, using compile-time source generation for maximum performance and full Native AOT compatibility.","source":"@site/docs/execution/engine-modes.md","sourceDirName":"execution","slug":"/execution/engine-modes","permalink":"/docs/execution/engine-modes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Executors","permalink":"/docs/execution/executors"},"next":{"title":"Not in Parallel","permalink":"/docs/parallelism/not-in-parallel"}}');var o=t(4848),r=t(8453);const s={},l="AOT-Only Mode",c={},a=[{value:"What Changed",id:"what-changed",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"EditorConfig (.editorconfig)",id:"editorconfig-editorconfig",level:3},{value:"MSBuild Properties",id:"msbuild-properties",level:3},{value:"Compatibility",id:"compatibility",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"aot-only-mode",children:"AOT-Only Mode"})}),"\n",(0,o.jsx)(n.p,{children:"TUnit now operates exclusively in AOT (Ahead-of-Time) compilation mode, using compile-time source generation for maximum performance and full Native AOT compatibility."}),"\n",(0,o.jsx)(n.h2,{id:"what-changed",children:"What Changed"}),"\n",(0,o.jsxs)(n.p,{children:["Starting with this version, TUnit has ",(0,o.jsx)(n.strong,{children:"completely removed reflection-based execution"})," in favor of a fully source-generated approach that provides:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Zero Runtime Reflection"}),": All test discovery and execution uses compile-time generated code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Native AOT Compatibility"}),": Full support for Native AOT compilation scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Superior Performance"}),": 2-3x performance improvement over reflection-based execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compile-Time Safety"}),": Type errors and configuration issues caught at build time"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsx)(n.p,{children:"TUnit now generates strongly-typed delegates for all test operations at compile time:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test Invocation"}),": Type-specific delegates instead of generic object arrays"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data Sources"}),": Specialized factory methods with exact return types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Property Injection"}),": Generated property setters with dependency resolution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Hook Methods"}),": Strongly-typed hook delegates with proper async support"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"You can configure AOT behavior through EditorConfig or MSBuild properties:"}),"\n",(0,o.jsx)(n.h3,{id:"editorconfig-editorconfig",children:"EditorConfig (.editorconfig)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:"# Enable AOT-only mode (default: true)\ntunit.aot_only_mode = true\n\n# Generic type resolution depth (default: 5)\ntunit.generic_depth_limit = 5\n\n# Property injection support (default: true)\ntunit.enable_property_injection = true\n\n# ValueTask hook support (default: true)\ntunit.enable_valuetask_hooks = true\n\n# Verbose diagnostics (default: false)\ntunit.enable_verbose_diagnostics = true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"msbuild-properties",children:"MSBuild Properties"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n    <TUnitAotOnlyMode>true</TUnitAotOnlyMode>\n    <TUnitGenericDepthLimit>10</TUnitGenericDepthLimit>\n    <TUnitEnablePropertyInjection>true</TUnitEnablePropertyInjection>\n</PropertyGroup>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"C# Projects"}),": Full support with source generation\n",(0,o.jsx)(n.strong,{children:"F# Projects"}),": Limited support - use C# test projects that reference F# libraries\n",(0,o.jsx)(n.strong,{children:"VB.NET Projects"}),": Limited support - use C# test projects that reference VB.NET libraries"]}),"\n",(0,o.jsx)(n.p,{children:"For cross-language scenarios, create a separate C# test project that references your F#/VB.NET libraries and write tests there."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);