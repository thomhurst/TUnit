"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5985],{6422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"reference/test-configuration","title":"Test Configuration","description":"TUnit supports having a testconfig.json file within your test project.","source":"@site/docs/reference/test-configuration.md","sourceDirName":"reference","slug":"/reference/test-configuration","permalink":"/docs/reference/test-configuration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Attributes","permalink":"/docs/comparison/attributes"},"next":{"title":"Migrating from xUnit.net","permalink":"/docs/migration/xunit"}}');var o=t(4848),r=t(8453);const i={},c="Test Configuration",a={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"test-configuration",children:"Test Configuration"})}),"\n",(0,o.jsxs)(n.p,{children:["TUnit supports having a ",(0,o.jsx)(n.code,{children:"testconfig.json"})," file within your test project."]}),"\n",(0,o.jsx)(n.p,{children:"This can be used to store key-value configuration pairs."}),"\n",(0,o.jsxs)(n.p,{children:["To retrieve these within your tests, you can use the static method ",(0,o.jsx)(n.code,{children:"TestContext.Configuration.Get(key)"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"testconfig.json"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "MyKey1": "MyValue1",\n  "Nested": {\n    "MyKey2": "MyValue2"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"Tests.cs"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'    [Test]\n    public async Task Test()\n    {\n        var value1 = TestContext.Configuration.Get("MyKey1"); // MyValue1 - As defined above\n        var value2 = TestContext.Configuration.Get("Nested:MyKey2"); // MyValue2 - As defined above\n        \n        ...\n    }\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);