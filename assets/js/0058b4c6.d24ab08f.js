"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[849],{6164:t=>{t.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Tutorial - Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installing TUnit","href":"/docs/tutorial-basics/installing","docId":"tutorial-basics/installing","unlisted":false},{"type":"link","label":"Writing your first test","href":"/docs/tutorial-basics/writing-your-first-test","docId":"tutorial-basics/writing-your-first-test","unlisted":false},{"type":"link","label":"Running your tests","href":"/docs/tutorial-basics/running-your-tests","docId":"tutorial-basics/running-your-tests","unlisted":false},{"type":"link","label":"Data Driven Tests","href":"/docs/tutorial-basics/data-driven-tests","docId":"tutorial-basics/data-driven-tests","unlisted":false},{"type":"link","label":"Injectable Class Data Source","href":"/docs/tutorial-basics/class-data-source","docId":"tutorial-basics/class-data-source","unlisted":false},{"type":"link","label":"Method Data Sources","href":"/docs/tutorial-basics/method-data-source","docId":"tutorial-basics/method-data-source","unlisted":false},{"type":"link","label":"Matrix Tests","href":"/docs/tutorial-basics/matrix-tests","docId":"tutorial-basics/matrix-tests","unlisted":false},{"type":"link","label":"Things to know","href":"/docs/tutorial-basics/things-to-know","docId":"tutorial-basics/things-to-know","unlisted":false},{"type":"link","label":"Libraries","href":"/docs/tutorial-basics/libraries","docId":"tutorial-basics/libraries","unlisted":false},{"type":"link","label":"Congratulations!","href":"/docs/tutorial-basics/congratulations","docId":"tutorial-basics/congratulations","unlisted":false}],"href":"/docs/category/tutorial---basics"},{"type":"category","label":"Tutorial - Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Test Set Ups","href":"/docs/tutorial-advanced/setup","docId":"tutorial-advanced/setup","unlisted":false},{"type":"link","label":"Test Clean Ups","href":"/docs/tutorial-advanced/cleanup","docId":"tutorial-advanced/cleanup","unlisted":false},{"type":"link","label":"Retrying","href":"/docs/tutorial-advanced/retrying","docId":"tutorial-advanced/retrying","unlisted":false},{"type":"link","label":"Repeating","href":"/docs/tutorial-advanced/repeating","docId":"tutorial-advanced/repeating","unlisted":false},{"type":"link","label":"Timeouts","href":"/docs/tutorial-advanced/timeouts","docId":"tutorial-advanced/timeouts","unlisted":false},{"type":"link","label":"Properties","href":"/docs/tutorial-advanced/properties","docId":"tutorial-advanced/properties","unlisted":false},{"type":"link","label":"Test Configuration","href":"/docs/tutorial-advanced/test-configuration","docId":"tutorial-advanced/test-configuration","unlisted":false},{"type":"link","label":"Test Context","href":"/docs/tutorial-advanced/test-context","docId":"tutorial-advanced/test-context","unlisted":false},{"type":"link","label":"Test Filters","href":"/docs/tutorial-advanced/test-filters","docId":"tutorial-advanced/test-filters","unlisted":false},{"type":"link","label":"Explicit","href":"/docs/tutorial-advanced/explicit","docId":"tutorial-advanced/explicit","unlisted":false},{"type":"link","label":"Skipping Tests","href":"/docs/tutorial-advanced/skip","docId":"tutorial-advanced/skip","unlisted":false},{"type":"link","label":"Not in Parallel","href":"/docs/tutorial-advanced/not-in-parallel","docId":"tutorial-advanced/not-in-parallel","unlisted":false},{"type":"link","label":"Depends On","href":"/docs/tutorial-advanced/depends-on","docId":"tutorial-advanced/depends-on","unlisted":false},{"type":"link","label":"Ordering Tests","href":"/docs/tutorial-advanced/order","docId":"tutorial-advanced/order","unlisted":false},{"type":"link","label":"Parallel Groups","href":"/docs/tutorial-advanced/parallel-groups","docId":"tutorial-advanced/parallel-groups","unlisted":false},{"type":"link","label":"Parallel Limiter","href":"/docs/tutorial-advanced/parallel-limiter","docId":"tutorial-advanced/parallel-limiter","unlisted":false},{"type":"link","label":"Executors","href":"/docs/tutorial-advanced/executors","docId":"tutorial-advanced/executors","unlisted":false},{"type":"link","label":"Class Constructor Helpers","href":"/docs/tutorial-advanced/class-constructors","docId":"tutorial-advanced/class-constructors","unlisted":false},{"type":"link","label":"Command Line Flags","href":"/docs/tutorial-advanced/command-line-flags","docId":"tutorial-advanced/command-line-flags","unlisted":false},{"type":"link","label":"Data Source Generators","href":"/docs/tutorial-advanced/data-source-generators","docId":"tutorial-advanced/data-source-generators","unlisted":false},{"type":"link","label":"Dependency Injection","href":"/docs/tutorial-advanced/dependency-injection","docId":"tutorial-advanced/dependency-injection","unlisted":false},{"type":"link","label":"Property Injection","href":"/docs/tutorial-advanced/property-injection","docId":"tutorial-advanced/property-injection","unlisted":false},{"type":"link","label":"Event Subscribing","href":"/docs/tutorial-advanced/event-subscribing","docId":"tutorial-advanced/event-subscribing","unlisted":false},{"type":"link","label":"Display Names","href":"/docs/tutorial-advanced/display-names","docId":"tutorial-advanced/display-names","unlisted":false},{"type":"link","label":"Argument Formatters","href":"/docs/tutorial-advanced/argument-formatters","docId":"tutorial-advanced/argument-formatters","unlisted":false},{"type":"link","label":"Logging","href":"/docs/tutorial-advanced/logging","docId":"tutorial-advanced/logging","unlisted":false},{"type":"link","label":"Engine Modes","href":"/docs/tutorial-advanced/engine-modes","docId":"tutorial-advanced/engine-modes","unlisted":false},{"type":"link","label":"F# Interactive","href":"/docs/tutorial-advanced/fsharp-interactive","docId":"tutorial-advanced/fsharp-interactive","unlisted":false}],"href":"/docs/category/tutorial---advanced"},{"type":"category","label":"Tutorial - Assertions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Awaiting","href":"/docs/tutorial-assertions/awaiting","docId":"tutorial-assertions/awaiting","unlisted":false},{"type":"link","label":"And Conditions","href":"/docs/tutorial-assertions/and-conditions","docId":"tutorial-assertions/and-conditions","unlisted":false},{"type":"link","label":"Assertion Scopes","href":"/docs/tutorial-assertions/scopes","docId":"tutorial-assertions/scopes","unlisted":false},{"type":"category","label":"Extensibility","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Custom Assertions","href":"/docs/tutorial-assertions/extensibility/custom-assertions","docId":"tutorial-assertions/extensibility/custom-assertions","unlisted":false},{"type":"link","label":"Chaining and Converting","href":"/docs/tutorial-assertions/extensibility/chaining-and-converting","docId":"tutorial-assertions/extensibility/chaining-and-converting","unlisted":false},{"type":"link","label":"Returning Data via await","href":"/docs/tutorial-assertions/extensibility/returning-items-from-await","docId":"tutorial-assertions/extensibility/returning-items-from-await","unlisted":false}],"href":"/docs/category/extensibility"},{"type":"link","label":"Or Conditions","href":"/docs/tutorial-assertions/or-conditions","docId":"tutorial-assertions/or-conditions","unlisted":false},{"type":"link","label":"Type Checking","href":"/docs/tutorial-assertions/type-checking","docId":"tutorial-assertions/type-checking","unlisted":false},{"type":"link","label":"Delegates","href":"/docs/tutorial-assertions/delegates","docId":"tutorial-assertions/delegates","unlisted":false},{"type":"link","label":"Assertion Groups","href":"/docs/tutorial-assertions/assertion-groups","docId":"tutorial-assertions/assertion-groups","unlisted":false},{"type":"link","label":"FSharp","href":"/docs/tutorial-assertions/fsharp","docId":"tutorial-assertions/fsharp","unlisted":false},{"type":"link","label":"Congratulations","href":"/docs/tutorial-assertions/congratulations","docId":"tutorial-assertions/congratulations","unlisted":false}],"href":"/docs/category/tutorial---assertions"},{"type":"category","label":"Test Framework Comparisons","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Attributes","href":"/docs/comparison/attributes","docId":"comparison/attributes","unlisted":false},{"type":"link","label":"Framework Differences","href":"/docs/comparison/framework-differences","docId":"comparison/framework-differences","unlisted":false}],"href":"/docs/category/test-framework-comparisons"},{"type":"category","label":"Extensions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Extensions","href":"/docs/extensions/","docId":"extensions/extensions","unlisted":false}],"href":"/docs/category/extensions"},{"type":"category","label":"Migration","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Migrating from xUnit.net","href":"/docs/migration/xunit","docId":"migration/xunit","unlisted":false}],"href":"/docs/category/migration"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Examples","href":"/docs/examples/intro","docId":"examples/intro","unlisted":false},{"type":"link","label":"Playwright","href":"/docs/examples/playwright","docId":"examples/playwright","unlisted":false},{"type":"link","label":"ASP.NET Core Web App/Api","href":"/docs/examples/aspnet","docId":"examples/aspnet","unlisted":false},{"type":"link","label":"Instrumenting: Global Test IDs","href":"/docs/examples/instrumenting_global_test_ids","docId":"examples/instrumenting_global_test_ids","unlisted":false},{"type":"link","label":"TUnit in CI pipelines","href":"/docs/examples/tunit-ci-pipline","docId":"examples/tunit-ci-pipline","unlisted":false}],"href":"/docs/category/examples"},{"type":"category","label":"Experimental","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Dynamically Created Tests","href":"/docs/experimental/dynamic-tests","docId":"experimental/dynamic-tests","unlisted":false}],"href":"/docs/category/experimental"},{"type":"link","label":"FAQ","href":"/docs/faq","docId":"faq","unlisted":false}]},"docs":{"comparison/attributes":{"id":"comparison/attributes","title":"Attributes","description":"Here are TUnit\'s equivalent attributes to other test frameworks.","sidebar":"tutorialSidebar"},"comparison/framework-differences":{"id":"comparison/framework-differences","title":"Framework Differences","description":"TUnit is inspired by NUnit and xUnit, and first and foremost I want to say that these are amazing frameworks and no hate to them.","sidebar":"tutorialSidebar"},"examples/aspnet":{"id":"examples/aspnet","title":"ASP.NET Core Web App/Api","description":"If you want to test a web app, you can utilise the Microsoft.Mvc.Testing packages to wrap your web app within an in-memory test server.","sidebar":"tutorialSidebar"},"examples/instrumenting_global_test_ids":{"id":"examples/instrumenting_global_test_ids","title":"Instrumenting: Global Test IDs","description":"There are plenty use cases for having a unique identifier for each test in your test suite. If you\'re engineering tests that connect to a data source, you might want to ensure data isolation between the tests. One way to do that is cleaning up the data source after each test, but that prevents you from running tests cleanly in parallel, and it requires you to write either very intelligent or a lot of cleanup code. Additionally, bugs can cause data to leak between tests and make your tests flaky.","sidebar":"tutorialSidebar"},"examples/intro":{"id":"examples/intro","title":"Examples","description":"This can serve as a place to show how to use TUnit to test more complex systems, utilising advanced features like ClassData sources with IAsyncInitializers and IAsyncDisposables, or utilising test events to drive things.","sidebar":"tutorialSidebar"},"examples/playwright":{"id":"examples/playwright","title":"Playwright","description":"There is a NuGet package to help with Playwright: TUnit.Playwright","sidebar":"tutorialSidebar"},"examples/tunit-ci-pipline":{"id":"examples/tunit-ci-pipline","title":"TUnit in CI pipelines","description":"When using TUnit for end-to-end (E2E) tests or TUnit\'s Playwright library for UI testing, you will likely run these tests in a CI/CD pipeline\u2014either on a schedule or as part of a release. In such cases, it is important to publish the test results for visibility and reporting.","sidebar":"tutorialSidebar"},"experimental/dynamic-tests":{"id":"experimental/dynamic-tests","title":"Dynamically Created Tests","description":"TUnit offers the ability to create your tests via dynamic code, as opposed to the standard [Test] attribute and data attributes.","sidebar":"tutorialSidebar"},"extensions/extensions":{"id":"extensions/extensions","title":"Extensions","description":"As TUnit is built on top of Microsoft.Testing.Platform, it can tap into generic testing extension packages.","sidebar":"tutorialSidebar"},"faq":{"id":"faq","title":"FAQ","description":"My test project won\'t execute / I get errors about runtime identifiers?","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"TUnit is another testing framework for C# / .NET.","sidebar":"tutorialSidebar"},"migration/xunit":{"id":"migration/xunit","title":"Migrating from xUnit.net","description":"Using TUnit\'s Code Fixers","sidebar":"tutorialSidebar"},"tutorial-advanced/argument-formatters":{"id":"tutorial-advanced/argument-formatters","title":"Argument Formatters","description":"If you are writing data driven tests, and using custom classes to represent your data, then the test explorer might not show you useful information to distinguish test cases, and instead only show you the class name.","sidebar":"tutorialSidebar"},"tutorial-advanced/class-constructors":{"id":"tutorial-advanced/class-constructors","title":"Class Constructor Helpers","description":"Some test suites might be more complex than others, and a user may want control over \'newing\' up their test classes.","sidebar":"tutorialSidebar"},"tutorial-advanced/cleanup":{"id":"tutorial-advanced/cleanup","title":"Test Clean Ups","description":"TUnit supports having your test class implement IDisposable or IAsyncDisposable. These will be called after your test has finished executing. However, using the attributes below offers better support for running multiple methods, and without having to implement your own try/catch logic. Every [After] method will be run, and any exceptions will be lazily thrown afterwards.","sidebar":"tutorialSidebar"},"tutorial-advanced/command-line-flags":{"id":"tutorial-advanced/command-line-flags","title":"Command Line Flags","description":"Please note that for the coverage and trx report, you need to install additional extensions","sidebar":"tutorialSidebar"},"tutorial-advanced/data-source-generators":{"id":"tutorial-advanced/data-source-generators","title":"Data Source Generators","description":"TUnit exposes an abstract DataSourceGeneratorAttribute class that you can inherit from and implement your own logic for creating values.","sidebar":"tutorialSidebar"},"tutorial-advanced/dependency-injection":{"id":"tutorial-advanced/dependency-injection","title":"Dependency Injection","description":"Dependency Injection can be set up by leveraging the power of the Data Source Generators.","sidebar":"tutorialSidebar"},"tutorial-advanced/depends-on":{"id":"tutorial-advanced/depends-on","title":"Depends On","description":"A test can depend on another test. This means that your test will not start unless the other test has finished.","sidebar":"tutorialSidebar"},"tutorial-advanced/display-names":{"id":"tutorial-advanced/display-names","title":"Display Names","description":"If you want simple control over the name of a test, you can use the [DisplayName(...)] attribute.","sidebar":"tutorialSidebar"},"tutorial-advanced/engine-modes":{"id":"tutorial-advanced/engine-modes","title":"Engine Modes","description":"In some scenarios, source generation may not be available for you.","sidebar":"tutorialSidebar"},"tutorial-advanced/event-subscribing":{"id":"tutorial-advanced/event-subscribing","title":"Event Subscribing","description":"Objects associated with your tests have the ability to subscribe to lifecycle events generated by TUnit.","sidebar":"tutorialSidebar"},"tutorial-advanced/executors":{"id":"tutorial-advanced/executors","title":"Executors","description":"In some advanced cases, you may need to control how a test or hook is executed.","sidebar":"tutorialSidebar"},"tutorial-advanced/explicit":{"id":"tutorial-advanced/explicit","title":"Explicit","description":"If you want a test to only be run explicitly (and not part of all general tests) then you can add the [ExplicitAttribute].","sidebar":"tutorialSidebar"},"tutorial-advanced/fsharp-interactive":{"id":"tutorial-advanced/fsharp-interactive","title":"F# Interactive","description":"Interactive","sidebar":"tutorialSidebar"},"tutorial-advanced/logging":{"id":"tutorial-advanced/logging","title":"Logging","description":"By default, TUnit will intercept any logs to the Console, and attempt to correlate them to the test that triggered that log by the current async context that it is in.","sidebar":"tutorialSidebar"},"tutorial-advanced/not-in-parallel":{"id":"tutorial-advanced/not-in-parallel","title":"Not in Parallel","description":"By default, TUnit tests will run in parallel.","sidebar":"tutorialSidebar"},"tutorial-advanced/order":{"id":"tutorial-advanced/order","title":"Ordering Tests","description":"It is recommended to use [DependsOn(...)] as it provides more flexibility and doesnt sacrifice parallelisation.","sidebar":"tutorialSidebar"},"tutorial-advanced/parallel-groups":{"id":"tutorial-advanced/parallel-groups","title":"Parallel Groups","description":"Parallel Groups are an alternative parallel mechanism to [NotInParallel].","sidebar":"tutorialSidebar"},"tutorial-advanced/parallel-limiter":{"id":"tutorial-advanced/parallel-limiter","title":"Parallel Limiter","description":"TUnit allows the user to control the parallel limit on a test, class or assembly level.","sidebar":"tutorialSidebar"},"tutorial-advanced/properties":{"id":"tutorial-advanced/properties","title":"Properties","description":"Custom properties can be added to a test using the [PropertyAttribute].","sidebar":"tutorialSidebar"},"tutorial-advanced/property-injection":{"id":"tutorial-advanced/property-injection","title":"Property Injection","description":"TUnit makes it easy to initialise some properties on your test class instead of passing them into the constructor.","sidebar":"tutorialSidebar"},"tutorial-advanced/repeating":{"id":"tutorial-advanced/repeating","title":"Repeating","description":"If you want to repeat a test, add a [RepeatAttribute] onto your test method or class. This takes an int of how many times you\'d like to repeat. Each repeat will show in the test explorer as a new test.","sidebar":"tutorialSidebar"},"tutorial-advanced/retrying":{"id":"tutorial-advanced/retrying","title":"Retrying","description":"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating.","sidebar":"tutorialSidebar"},"tutorial-advanced/setup":{"id":"tutorial-advanced/setup","title":"Test Set Ups","description":"Most setup for a test can be performed in the constructor (think setting up mocks, assigning fields.)","sidebar":"tutorialSidebar"},"tutorial-advanced/skip":{"id":"tutorial-advanced/skip","title":"Skipping Tests","description":"If you want to simply skip a test, just place a [Skip(reason)] attribute on your test with an explanation of why you\'re skipping it.","sidebar":"tutorialSidebar"},"tutorial-advanced/test-configuration":{"id":"tutorial-advanced/test-configuration","title":"Test Configuration","description":"TUnit supports having a testconfig.json file within your test project.","sidebar":"tutorialSidebar"},"tutorial-advanced/test-context":{"id":"tutorial-advanced/test-context","title":"Test Context","description":"All tests have a TestContext object available to them.","sidebar":"tutorialSidebar"},"tutorial-advanced/test-filters":{"id":"tutorial-advanced/test-filters","title":"Test Filters","description":"Running TUnit via dotnet run supports test filters.","sidebar":"tutorialSidebar"},"tutorial-advanced/timeouts":{"id":"tutorial-advanced/timeouts","title":"Timeouts","description":"If you want to stop a test after a specified amount of time, add a [Timeout] attribute onto your test method or class. This takes an int of how many milliseconds a test can execute for.","sidebar":"tutorialSidebar"},"tutorial-assertions/and-conditions":{"id":"tutorial-assertions/and-conditions","title":"And Conditions","description":"TUnit can chain assertions together, using the And property. This reads very much like English, and aims to keep the test easy to read and understand, and doesn\'t require you repeat boilerplate code such as Assert.That over and over.","sidebar":"tutorialSidebar"},"tutorial-assertions/assertion-groups":{"id":"tutorial-assertions/assertion-groups","title":"Assertion Groups","description":"Mixing \'Or\' & \'And\' conditions within Assert.That(...) statements may result in unexpected logic.","sidebar":"tutorialSidebar"},"tutorial-assertions/awaiting":{"id":"tutorial-assertions/awaiting","title":"Awaiting","description":"In TUnit you await your assertions, and this serves two purposes:","sidebar":"tutorialSidebar"},"tutorial-assertions/congratulations":{"id":"tutorial-assertions/congratulations","title":"Congratulations","description":"That\'s all you need to know about assertions.","sidebar":"tutorialSidebar"},"tutorial-assertions/delegates":{"id":"tutorial-assertions/delegates","title":"Delegates","description":"TUnit can execute your delegates for you, and this allows you to assert on the data returned (if any was) - Or on any exceptions thrown:","sidebar":"tutorialSidebar"},"tutorial-assertions/extensibility/chaining-and-converting":{"id":"tutorial-assertions/extensibility/chaining-and-converting","title":"Chaining and Converting","description":"We may want to chain assertions together that change the type of object being asserted, to keep the assertions reading clear and concise, and not having to declare more variables and more boiler-plate assert calls.","sidebar":"tutorialSidebar"},"tutorial-assertions/extensibility/custom-assertions":{"id":"tutorial-assertions/extensibility/custom-assertions","title":"Custom Assertions","description":"The TUnit Assertions can be easily extended so that you can create your own assertions.","sidebar":"tutorialSidebar"},"tutorial-assertions/extensibility/returning-items-from-await":{"id":"tutorial-assertions/extensibility/returning-items-from-await","title":"Returning Data via await","description":"It may make sense for our assertions to return data that is different from the input, based on what the assertion is doing. This can allow more cleanly written tests than have to manually do casting or parsing afterwards.","sidebar":"tutorialSidebar"},"tutorial-assertions/fsharp":{"id":"tutorial-assertions/fsharp","title":"FSharp","description":"As awaiting doesn\'t work quite the same in F#, the syntax instead looks like this:","sidebar":"tutorialSidebar"},"tutorial-assertions/or-conditions":{"id":"tutorial-assertions/or-conditions","title":"Or Conditions","description":"Similar to the And property, there is also the Or property.","sidebar":"tutorialSidebar"},"tutorial-assertions/scopes":{"id":"tutorial-assertions/scopes","title":"Assertion Scopes","description":"In TUnit you can create an assertion scope by calling Assert.Multiple(). This returns an IDisposable and so you should use that by encapsulating the returned value in a using block. This will make sure that any assertion exceptionss are aggregated together and thrown only after the scope is exited.","sidebar":"tutorialSidebar"},"tutorial-assertions/type-checking":{"id":"tutorial-assertions/type-checking","title":"Type Checking","description":"TUnit assertions try to check the types at compile time.","sidebar":"tutorialSidebar"},"tutorial-basics/class-data-source":{"id":"tutorial-basics/class-data-source","title":"Injectable Class Data Source","description":"The ClassDataSource attribute is used to instantiate and inject in new classes as parameters to your tests and/or test classes.","sidebar":"tutorialSidebar"},"tutorial-basics/congratulations":{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of writing a test in TUnit.","sidebar":"tutorialSidebar"},"tutorial-basics/data-driven-tests":{"id":"tutorial-basics/data-driven-tests","title":"Data Driven Tests","description":"It\'s common to want to repeat tests but pass in different values on each execution.","sidebar":"tutorialSidebar"},"tutorial-basics/installing":{"id":"tutorial-basics/installing","title":"Installing TUnit","description":"Easily","sidebar":"tutorialSidebar"},"tutorial-basics/libraries":{"id":"tutorial-basics/libraries","title":"Libraries","description":"If you want a library package to define things like re-useable base classes with hooks etc, then you shouldn\'t use the main TUnit package - As this assumes your project is a test project and tries to build it as an executable etc.","sidebar":"tutorialSidebar"},"tutorial-basics/matrix-tests":{"id":"tutorial-basics/matrix-tests","title":"Matrix Tests","description":"The Matrix data source is a way to specify different arguments per parameter, and then generate every possible combination of all of those arguments.","sidebar":"tutorialSidebar"},"tutorial-basics/method-data-source":{"id":"tutorial-basics/method-data-source","title":"Method Data Sources","description":"A limitation of passing data in with [Arguments(...)] is that the data must be constant values. For example, we can\'t new up an object and pass it into this attribute as an argument. This is a constraint of the language and we can\'t change that.","sidebar":"tutorialSidebar"},"tutorial-basics/running-your-tests":{"id":"tutorial-basics/running-your-tests","title":"Running your tests","description":"As TUnit is built on-top of the newer Microsoft.Testing.Platform, and combined with the fact that TUnit tests are source generated, running your tests is available in a variety of ways.","sidebar":"tutorialSidebar"},"tutorial-basics/things-to-know":{"id":"tutorial-basics/things-to-know","title":"Things to know","description":"TUnit has made some decisions by design. You may need to know about them:","sidebar":"tutorialSidebar"},"tutorial-basics/writing-your-first-test":{"id":"tutorial-basics/writing-your-first-test","title":"Writing your first test","description":"Start by creating a new class:","sidebar":"tutorialSidebar"}}}}')}}]);