"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Getting Started","items":[{"type":"link","href":"/docs/intro","label":"Intro","docId":"intro","unlisted":false},{"type":"link","href":"/docs/getting-started/installation","label":"Installing TUnit","docId":"getting-started/installation","unlisted":false},{"type":"link","href":"/docs/getting-started/writing-your-first-test","label":"Writing your first test","docId":"getting-started/writing-your-first-test","unlisted":false},{"type":"link","href":"/docs/getting-started/running-your-tests","label":"Running your tests","docId":"getting-started/running-your-tests","unlisted":false},{"type":"link","href":"/docs/getting-started/congratulations","label":"Congratulations!","docId":"getting-started/congratulations","unlisted":false},{"type":"link","href":"/docs/faq","label":"FAQ","docId":"faq","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Test Authoring","items":[{"type":"link","href":"/docs/test-authoring/things-to-know","label":"Things to know","docId":"test-authoring/things-to-know","unlisted":false},{"type":"category","label":"Data Driven Testing","items":[{"type":"link","href":"/docs/test-authoring/arguments","label":"Data Driven Tests","docId":"test-authoring/arguments","unlisted":false},{"type":"link","href":"/docs/test-authoring/method-data-source","label":"Method Data Sources","docId":"test-authoring/method-data-source","unlisted":false},{"type":"link","href":"/docs/test-authoring/class-data-source","label":"Injectable Class Data Source","docId":"test-authoring/class-data-source","unlisted":false},{"type":"link","href":"/docs/test-authoring/matrix-tests","label":"Matrix Tests","docId":"test-authoring/matrix-tests","unlisted":false},{"type":"link","label":"Data Source Generators","href":"/docs/customization-extensibility/data-source-generators"},{"type":"link","href":"/docs/test-authoring/nested-data-sources","label":"Nested Data Sources with Initialization","docId":"test-authoring/nested-data-sources","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","href":"/docs/test-authoring/skip","label":"Skipping Tests","docId":"test-authoring/skip","unlisted":false},{"type":"link","href":"/docs/test-authoring/explicit","label":"Explicit","docId":"test-authoring/explicit","unlisted":false},{"type":"link","href":"/docs/test-authoring/depends-on","label":"Depends On","docId":"test-authoring/depends-on","unlisted":false},{"type":"link","href":"/docs/test-authoring/order","label":"Ordering Tests","docId":"test-authoring/order","unlisted":false},{"type":"link","href":"/docs/test-authoring/mocking","label":"Mocking","docId":"test-authoring/mocking","unlisted":false},{"type":"link","href":"/docs/test-authoring/culture","label":"Culture","docId":"test-authoring/culture","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Assertions","items":[{"type":"link","href":"/docs/assertions/awaiting","label":"Awaiting","docId":"assertions/awaiting","unlisted":false},{"type":"link","href":"/docs/assertions/and-conditions","label":"And Conditions","docId":"assertions/and-conditions","unlisted":false},{"type":"link","href":"/docs/assertions/or-conditions","label":"Or Conditions","docId":"assertions/or-conditions","unlisted":false},{"type":"link","href":"/docs/assertions/scopes","label":"Assertion Scopes","docId":"assertions/scopes","unlisted":false},{"type":"link","href":"/docs/assertions/assertion-groups","label":"Assertion Groups","docId":"assertions/assertion-groups","unlisted":false},{"type":"link","href":"/docs/assertions/delegates","label":"Delegates","docId":"assertions/delegates","unlisted":false},{"type":"category","label":"Extensibility","items":[{"type":"link","href":"/docs/assertions/extensibility/custom-assertions","label":"Custom Assertions","docId":"assertions/extensibility/custom-assertions","unlisted":false},{"type":"link","href":"/docs/assertions/extensibility/source-generator-assertions","label":"Source Generator Assertions","docId":"assertions/extensibility/source-generator-assertions","unlisted":false},{"type":"link","href":"/docs/assertions/extensibility/extensibility-chaining-and-converting","label":"Chaining and Converting","docId":"assertions/extensibility/extensibility-chaining-and-converting","unlisted":false},{"type":"link","href":"/docs/assertions/extensibility/extensibility-returning-items-from-await","label":"Returning Data via await","docId":"assertions/extensibility/extensibility-returning-items-from-await","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","href":"/docs/assertions/fsharp","label":"FSharp","docId":"assertions/fsharp","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Test Lifecycle","items":[{"type":"link","href":"/docs/test-lifecycle/setup","label":"Test Set Ups","docId":"test-lifecycle/setup","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/cleanup","label":"Test Clean Ups","docId":"test-lifecycle/cleanup","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/property-injection","label":"Property Injection","docId":"test-lifecycle/property-injection","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/event-subscribing","label":"Event Subscribing","docId":"test-lifecycle/event-subscribing","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/test-context","label":"Test Context","docId":"test-lifecycle/test-context","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/properties","label":"Properties","docId":"test-lifecycle/properties","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/class-constructors","label":"Class Constructor Helpers","docId":"test-lifecycle/class-constructors","unlisted":false},{"type":"link","href":"/docs/test-lifecycle/dependency-injection","label":"Dependency Injection","docId":"test-lifecycle/dependency-injection","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Execution Control","items":[{"type":"link","href":"/docs/execution/retrying","label":"Retrying","docId":"execution/retrying","unlisted":false},{"type":"link","href":"/docs/execution/repeating","label":"Repeating","docId":"execution/repeating","unlisted":false},{"type":"link","href":"/docs/execution/timeouts","label":"Timeouts","docId":"execution/timeouts","unlisted":false},{"type":"link","href":"/docs/execution/test-filters","label":"Test Filters","docId":"execution/test-filters","unlisted":false},{"type":"link","href":"/docs/execution/executors","label":"Executors","docId":"execution/executors","unlisted":false},{"type":"link","href":"/docs/execution/engine-modes","label":"Engine Modes","docId":"execution/engine-modes","unlisted":false},{"type":"link","href":"/docs/execution/ci-cd-reporting","label":"CI/CD Reporting","docId":"execution/ci-cd-reporting","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Parallelism Control","items":[{"type":"link","href":"/docs/parallelism/not-in-parallel","label":"Not in Parallel","docId":"parallelism/not-in-parallel","unlisted":false},{"type":"link","href":"/docs/parallelism/parallel-groups","label":"Parallel Groups","docId":"parallelism/parallel-groups","unlisted":false},{"type":"link","href":"/docs/parallelism/parallel-limiter","label":"Parallel Limiter","docId":"parallelism/parallel-limiter","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Customization & Extensibility","items":[{"type":"link","href":"/docs/extensions/","label":"Extensions","docId":"extensions/extensions","unlisted":false},{"type":"link","href":"/docs/customization-extensibility/data-source-generators","label":"Data Source Generators","docId":"customization-extensibility/data-source-generators","unlisted":false},{"type":"link","href":"/docs/customization-extensibility/argument-formatters","label":"Argument Formatters","docId":"customization-extensibility/argument-formatters","unlisted":false},{"type":"link","href":"/docs/customization-extensibility/logging","label":"Logging","docId":"customization-extensibility/logging","unlisted":false},{"type":"link","href":"/docs/customization-extensibility/display-names","label":"Display Names","docId":"customization-extensibility/display-names","unlisted":false},{"type":"link","href":"/docs/customization-extensibility/libraries","label":"Libraries","docId":"customization-extensibility/libraries","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Examples & Use Cases","items":[{"type":"link","href":"/docs/examples/intro","label":"Examples","docId":"examples/intro","unlisted":false},{"type":"link","href":"/docs/examples/aspnet","label":"ASP.NET Core Web App/Api","docId":"examples/aspnet","unlisted":false},{"type":"link","href":"/docs/examples/playwright","label":"Playwright","docId":"examples/playwright","unlisted":false},{"type":"link","href":"/docs/examples/complex-test-infrastructure","label":"Complex Test Infrastructure Orchestration","docId":"examples/complex-test-infrastructure","unlisted":false},{"type":"link","href":"/docs/examples/instrumenting-global-test-ids","label":"Instrumenting: Global Test IDs","docId":"examples/instrumenting-global-test-ids","unlisted":false},{"type":"link","href":"/docs/examples/tunit-ci-pipeline","label":"TUnit in CI pipelines","docId":"examples/tunit-ci-pipeline","unlisted":false},{"type":"link","href":"/docs/examples/fsharp-interactive","label":"F# Interactive","docId":"examples/fsharp-interactive","unlisted":false},{"type":"link","href":"/docs/examples/filebased-csharp","label":"File based C# application","docId":"examples/filebased-csharp","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Reference","items":[{"type":"link","href":"/docs/comparison/framework-differences","label":"Framework Differences","docId":"comparison/framework-differences","unlisted":false},{"type":"link","href":"/docs/comparison/attributes","label":"Attributes","docId":"comparison/attributes","unlisted":false},{"type":"link","href":"/docs/reference/test-configuration","label":"Test Configuration","docId":"reference/test-configuration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Migration Guides","items":[{"type":"link","href":"/docs/migration/xunit","label":"Migrating from xUnit.net","docId":"migration/xunit","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Experimental Features","items":[{"type":"link","href":"/docs/experimental/dynamic-tests","label":"Dynamically Created Tests","docId":"experimental/dynamic-tests","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"advanced/exception-handling":{"id":"advanced/exception-handling","title":"Exception Handling","description":"TUnit provides a comprehensive exception hierarchy to help you understand and handle different types of failures that can occur during test execution. Understanding these exceptions is crucial for debugging test failures and implementing custom error handling."},"advanced/extension-points":{"id":"advanced/extension-points","title":"Extension Points","description":"TUnit provides several extension points that allow you to customize and extend the framework\'s behavior. These interfaces enable you to implement custom test execution logic, hook into the test lifecycle, and control parallel execution."},"advanced/performance-best-practices":{"id":"advanced/performance-best-practices","title":"Performance Best Practices","description":"This guide provides recommendations for optimizing test performance and ensuring your TUnit test suite runs efficiently."},"assertions/and-conditions":{"id":"assertions/and-conditions","title":"And Conditions","description":"TUnit can chain assertions together, using the And property. This reads very much like English, and aims to keep the test easy to read and understand, and doesn\'t require you repeat boilerplate code such as Assert.That over and over.","sidebar":"docs"},"assertions/assertion-groups":{"id":"assertions/assertion-groups","title":"Assertion Groups","description":"Mixing \'Or\' & \'And\' conditions within Assert.That(...) statements may result in unexpected logic.","sidebar":"docs"},"assertions/awaiting":{"id":"assertions/awaiting","title":"Awaiting","description":"In TUnit you await your assertions, and this serves two purposes:","sidebar":"docs"},"assertions/delegates":{"id":"assertions/delegates","title":"Delegates","description":"TUnit can execute your delegates for you, and this allows you to assert on the data returned (if any was) - Or on any exceptions thrown:","sidebar":"docs"},"assertions/extensibility/custom-assertions":{"id":"assertions/extensibility/custom-assertions","title":"Custom Assertions","description":"The TUnit Assertions can be easily extended so that you can create your own assertions.","sidebar":"docs"},"assertions/extensibility/extensibility-chaining-and-converting":{"id":"assertions/extensibility/extensibility-chaining-and-converting","title":"Chaining and Converting","description":"TUnit allows you to chain assertions that change the type being asserted, enabling fluent and expressive test code.","sidebar":"docs"},"assertions/extensibility/extensibility-returning-items-from-await":{"id":"assertions/extensibility/extensibility-returning-items-from-await","title":"Returning Data via await","description":"Sometimes, you may want your assertion to return a value, such as an item found in a collection, so you can use it in further assertions or logic.","sidebar":"docs"},"assertions/extensibility/source-generator-assertions":{"id":"assertions/extensibility/source-generator-assertions","title":"Source Generator Assertions","description":"TUnit provides source generators to make creating custom assertions incredibly easy. Instead of manually writing assertion classes and extension methods, you can simply decorate your methods with attributes and let the generator do the work.","sidebar":"docs"},"assertions/fsharp":{"id":"assertions/fsharp","title":"FSharp","description":"As awaiting doesn\'t work quite the same in F#, the syntax instead looks like this:","sidebar":"docs"},"assertions/or-conditions":{"id":"assertions/or-conditions","title":"Or Conditions","description":"Similar to the And property, there is also the Or property.","sidebar":"docs"},"assertions/scopes":{"id":"assertions/scopes","title":"Assertion Scopes","description":"In TUnit you can create an assertion scope by calling Assert.Multiple(). This returns an IDisposable and so you should use that by encapsulating the returned value in a using block. This will make sure that any assertion exceptions are aggregated together and thrown only after the scope is exited.","sidebar":"docs"},"assertions/type-checking":{"id":"assertions/type-checking","title":"Type Checking","description":"TUnit assertions try to check the types at compile time."},"comparison/attributes":{"id":"comparison/attributes","title":"Attributes","description":"Here are TUnit\'s equivalent attributes to other test frameworks.","sidebar":"docs"},"comparison/framework-differences":{"id":"comparison/framework-differences","title":"Framework Differences","description":"TUnit is inspired by NUnit and xUnit, and first and foremost I want to say that these are amazing frameworks and no hate to them.","sidebar":"docs"},"customization-extensibility/argument-formatters":{"id":"customization-extensibility/argument-formatters","title":"Argument Formatters","description":"When writing data-driven tests, especially with custom classes as arguments, the test explorer may only show the class name, making it hard to distinguish test cases.","sidebar":"docs"},"customization-extensibility/data-source-generators":{"id":"customization-extensibility/data-source-generators","title":"Data Source Generators","description":"TUnit provides several base classes for creating custom data source generators:","sidebar":"docs"},"customization-extensibility/display-names":{"id":"customization-extensibility/display-names","title":"Display Names","description":"If you want simple control over the name of a test, you can use the [DisplayName(...)] attribute.","sidebar":"docs"},"customization-extensibility/libraries":{"id":"customization-extensibility/libraries","title":"Libraries","description":"If you want a library package to define things like re-useable base classes with hooks etc, then you shouldn\'t use the main TUnit package - As this assumes your project is a test project and tries to build it as an executable etc.","sidebar":"docs"},"customization-extensibility/logging":{"id":"customization-extensibility/logging","title":"Logging","description":"By default, TUnit will intercept any logs to the Console, and attempt to correlate them to the test that triggered that log by the current async context that it is in.","sidebar":"docs"},"examples/aspnet":{"id":"examples/aspnet","title":"ASP.NET Core Web App/Api","description":"If you want to test a web app, you can utilise the Microsoft.Mvc.Testing packages to wrap your web app within an in-memory test server.","sidebar":"docs"},"examples/complex-test-infrastructure":{"id":"examples/complex-test-infrastructure","title":"Complex Test Infrastructure Orchestration","description":"TUnit provides a property injection system that can help orchestrate complex test infrastructure setups. This page demonstrates how TUnit handles test setups that typically require manual coordination in traditional testing approaches.","sidebar":"docs"},"examples/filebased-csharp":{"id":"examples/filebased-csharp","title":"File based C# application","description":"application","sidebar":"docs"},"examples/fsharp-interactive":{"id":"examples/fsharp-interactive","title":"F# Interactive","description":"Interactive","sidebar":"docs"},"examples/instrumenting-global-test-ids":{"id":"examples/instrumenting-global-test-ids","title":"Instrumenting: Global Test IDs","description":"There are plenty use cases for having a unique identifier for each test in your test suite. If you\'re engineering tests that connect to a data source, you might want to ensure data isolation between the tests. One way to do that is cleaning up the data source after each test, but that prevents you from running tests cleanly in parallel, and it requires you to write either very intelligent or a lot of cleanup code. Additionally, bugs can cause data to leak between tests and make your tests flaky.","sidebar":"docs"},"examples/intro":{"id":"examples/intro","title":"Examples","description":"This can serve as a place to show how to use TUnit to test more complex systems, utilising advanced features like ClassData sources with IAsyncInitializers and IAsyncDisposables, or utilising test events to drive things.","sidebar":"docs"},"examples/playwright":{"id":"examples/playwright","title":"Playwright","description":"There is a NuGet package to help with Playwright: TUnit.Playwright","sidebar":"docs"},"examples/tunit-ci-pipeline":{"id":"examples/tunit-ci-pipeline","title":"TUnit in CI pipelines","description":"When using TUnit for end-to-end (E2E) tests or TUnit\'s Playwright library for UI testing, you will likely run these tests in a CI/CD pipeline\u2014either on a schedule or as part of a release. In such cases, it is important to publish the test results for visibility and reporting.","sidebar":"docs"},"execution/ci-cd-reporting":{"id":"execution/ci-cd-reporting","title":"CI/CD Reporting","description":"TUnit provides built-in integration with continuous integration and deployment platforms, automatically detecting and adapting to various CI environments.","sidebar":"docs"},"execution/engine-modes":{"id":"execution/engine-modes","title":"Engine Modes","description":"TUnit supports two execution modes, providing flexibility for different development and deployment scenarios.","sidebar":"docs"},"execution/executors":{"id":"execution/executors","title":"Executors","description":"In some advanced cases, you may need to control how a test or hook is executed.","sidebar":"docs"},"execution/repeating":{"id":"execution/repeating","title":"Repeating","description":"If you want to repeat a test, add a [RepeatAttribute] onto your test method or class. This takes an int of how many times you\'d like to repeat. Each repeat will show in the test explorer as a new test.","sidebar":"docs"},"execution/retrying":{"id":"execution/retrying","title":"Retrying","description":"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating.","sidebar":"docs"},"execution/test-filters":{"id":"execution/test-filters","title":"Test Filters","description":"Running TUnit via dotnet run supports test filters.","sidebar":"docs"},"execution/timeouts":{"id":"execution/timeouts","title":"Timeouts","description":"If you want to stop a test after a specified amount of time, add a [Timeout] attribute onto your test method or class. This takes an int of how many milliseconds a test can execute for.","sidebar":"docs"},"experimental/dynamic-tests":{"id":"experimental/dynamic-tests","title":"Dynamically Created Tests","description":"TUnit offers the ability to create your tests via dynamic code, as opposed to the standard [Test] attribute and data attributes.","sidebar":"docs"},"extensions/extensions":{"id":"extensions/extensions","title":"Extensions","description":"As TUnit is built on top of Microsoft.Testing.Platform, it can tap into generic testing extension packages.","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"My test project won\'t execute / I get errors about runtime identifiers?","sidebar":"docs"},"getting-started/congratulations":{"id":"getting-started/congratulations","title":"Congratulations!","description":"You have just learned the basics of writing a test in TUnit.","sidebar":"docs"},"getting-started/installation":{"id":"getting-started/installation","title":"Installing TUnit","description":"Easily","sidebar":"docs"},"getting-started/running-your-tests":{"id":"getting-started/running-your-tests","title":"Running your tests","description":"As TUnit is built on-top of the newer Microsoft.Testing.Platform, and combined with the fact that TUnit tests are source generated, running your tests is available in a variety of ways.","sidebar":"docs"},"getting-started/writing-your-first-test":{"id":"getting-started/writing-your-first-test","title":"Writing your first test","description":"Start by creating a new class:","sidebar":"docs"},"intro":{"id":"intro","title":"Intro","description":"TUnit is another testing framework for C# / .NET.","sidebar":"docs"},"migration/mstest":{"id":"migration/mstest","title":"Migrating from MSTest","description":"Using TUnit\'s Code Fixers"},"migration/nunit":{"id":"migration/nunit","title":"Migrating from NUnit","description":"Using TUnit\'s Code Fixers"},"migration/xunit":{"id":"migration/xunit","title":"Migrating from xUnit.net","description":"Using TUnit\'s Code Fixers","sidebar":"docs"},"parallelism/not-in-parallel":{"id":"parallelism/not-in-parallel","title":"Not in Parallel","description":"By default, TUnit tests will run in parallel.","sidebar":"docs"},"parallelism/parallel-groups":{"id":"parallelism/parallel-groups","title":"Parallel Groups","description":"Parallel Groups are an alternative parallel mechanism to [NotInParallel].","sidebar":"docs"},"parallelism/parallel-limiter":{"id":"parallelism/parallel-limiter","title":"Parallel Limiter","description":"TUnit allows the user to control the parallel limit on a test, class or assembly level.","sidebar":"docs"},"reference/command-line-flags":{"id":"reference/command-line-flags","title":"Command Line Flags","description":"Please note that for the coverage and trx report, you need to install additional extensions"},"reference/test-configuration":{"id":"reference/test-configuration","title":"Test Configuration","description":"TUnit supports having a testconfig.json file within your test project.","sidebar":"docs"},"test-authoring/aot-compatibility":{"id":"test-authoring/aot-compatibility","title":"AOT Compatibility and Generic Tests","description":"TUnit\'s source generation mode provides compile-time safety and performance benefits, but requires specific patterns for advanced scenarios like generic tests and complex data sources."},"test-authoring/arguments":{"id":"test-authoring/arguments","title":"Data Driven Tests","description":"It\'s common to want to repeat tests but pass in different values on each execution.","sidebar":"docs"},"test-authoring/class-data-source":{"id":"test-authoring/class-data-source","title":"Injectable Class Data Source","description":"The ClassDataSource attribute is used to instantiate and inject in new classes as parameters to your tests and/or test classes.","sidebar":"docs"},"test-authoring/culture":{"id":"test-authoring/culture","title":"Culture","description":"The Culture] attribute is used to set the [current Culture for the duration of a test. It may be specified at the level of a test, fixture or assembly.","sidebar":"docs"},"test-authoring/depends-on":{"id":"test-authoring/depends-on","title":"Depends On","description":"Important","sidebar":"docs"},"test-authoring/explicit":{"id":"test-authoring/explicit","title":"Explicit","description":"If you want a test to only be run explicitly (and not part of all general tests) then you can add the [ExplicitAttribute].","sidebar":"docs"},"test-authoring/generic-attributes":{"id":"test-authoring/generic-attributes","title":"Generic Attributes","description":"TUnit provides generic versions of several attributes that offer enhanced type safety and better IDE support. These attributes allow you to specify types at compile time, reducing errors and improving code maintainability."},"test-authoring/matrix-tests":{"id":"test-authoring/matrix-tests","title":"Matrix Tests","description":"The Matrix data source is a way to specify different arguments per parameter, and then generate every possible combination of all of those arguments.","sidebar":"docs"},"test-authoring/method-data-source":{"id":"test-authoring/method-data-source","title":"Method Data Sources","description":"A limitation of passing data in with [Arguments(...)] is that the data must be constant values. For example, we can\'t new up an object and pass it into this attribute as an argument. This is a constraint of the language and we can\'t change that.","sidebar":"docs"},"test-authoring/mocking":{"id":"test-authoring/mocking","title":"Mocking","description":"TUnit is a testing framework focused on test execution and does not include any built-in mocking capabilities. This gives you the freedom to choose whichever mocking library best suits your needs and preferences.","sidebar":"docs"},"test-authoring/nested-data-sources":{"id":"test-authoring/nested-data-sources","title":"Nested Data Sources with Initialization","description":"When writing integration tests, you often need complex test fixtures that depend on other initialized resources. TUnit\'s nested data source initialization feature makes this elegant and automatic.","sidebar":"docs"},"test-authoring/order":{"id":"test-authoring/order","title":"Ordering Tests","description":"It is recommended to use [DependsOn(...)] as it provides more flexibility and doesn\'t sacrifice parallelisation.","sidebar":"docs"},"test-authoring/skip":{"id":"test-authoring/skip","title":"Skipping Tests","description":"If you want to simply skip a test, just place a [Skip(reason)] attribute on your test with an explanation of why you\'re skipping it.","sidebar":"docs"},"test-authoring/things-to-know":{"id":"test-authoring/things-to-know","title":"Things to know","description":"TUnit has made some decisions by design. You may need to know about them:","sidebar":"docs"},"test-lifecycle/class-constructors":{"id":"test-lifecycle/class-constructors","title":"Class Constructor Helpers","description":"Some test suites might be more complex than others, and a user may want control over \'newing\' up their test classes.","sidebar":"docs"},"test-lifecycle/cleanup":{"id":"test-lifecycle/cleanup","title":"Test Clean Ups","description":"TUnit supports having your test class implement IDisposable or IAsyncDisposable. These will be called after your test has finished executing. However, using the attributes below offers better support for running multiple methods, and without having to implement your own try/catch logic. Every [After] method will be run, and any exceptions will be lazily thrown afterwards.","sidebar":"docs"},"test-lifecycle/dependency-injection":{"id":"test-lifecycle/dependency-injection","title":"Dependency Injection","description":"Dependency Injection can be set up by leveraging the power of the Data Source Generators.","sidebar":"docs"},"test-lifecycle/event-subscribing":{"id":"test-lifecycle/event-subscribing","title":"Event Subscribing","description":"Objects associated with your tests have the ability to subscribe to lifecycle events generated by TUnit.","sidebar":"docs"},"test-lifecycle/properties":{"id":"test-lifecycle/properties","title":"Properties","description":"Custom properties can be added to a test using the [PropertyAttribute].","sidebar":"docs"},"test-lifecycle/property-injection":{"id":"test-lifecycle/property-injection","title":"Property Injection","description":"TUnit\'s AOT-compatible property injection system makes it easy to initialize properties on your test class with compile-time safety and excellent performance.","sidebar":"docs"},"test-lifecycle/setup":{"id":"test-lifecycle/setup","title":"Test Set Ups","description":"Most setup for a test can be performed in the constructor (think setting up mocks, assigning fields.)","sidebar":"docs"},"test-lifecycle/test-context":{"id":"test-lifecycle/test-context","title":"Test Context","description":"All tests have a TestContext object available to them.","sidebar":"docs"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting Guide","description":"This guide covers common issues you might encounter when using TUnit and their solutions."}}}}')}}]);