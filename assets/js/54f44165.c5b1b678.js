"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7924],{5287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"getting-started/installation","title":"Installing TUnit","description":"Easily","source":"@site/docs/getting-started/installation.md","sourceDirName":"getting-started","slug":"/getting-started/installation","permalink":"/docs/getting-started/installation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Intro","permalink":"/docs/intro"},"next":{"title":"Writing your first test","permalink":"/docs/getting-started/writing-your-first-test"}}');var i=t(4848),l=t(8453);const r={},a="Installing TUnit",o={},c=[{value:"Easily",id:"easily",level:2},{value:"Manually",id:"manually",level:2},{value:"Global Usings",id:"global-usings",level:3},{value:".NET Framework",id:"net-framework",level:2},{value:"Central Package Management (CPM)",id:"central-package-management-cpm",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"installing-tunit",children:"Installing TUnit"})}),"\n",(0,i.jsx)(n.h2,{id:"easily",children:"Easily"}),"\n",(0,i.jsx)(n.p,{children:"Assuming you have the .NET SDK installed, simply run:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"dotnet new install TUnit.Templates"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:'dotnet new TUnit -n "YourProjectName"'})}),"\n",(0,i.jsx)(n.p,{children:"A new test project will be created for you with some samples of different test types and tips. When you're ready to get going, delete them and create your own!"}),"\n",(0,i.jsx)(n.h2,{id:"manually",children:"Manually"}),"\n",(0,i.jsx)(n.p,{children:"First create an empty .NET console application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"dotnet new console --name YourTestProjectNameHere\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To that project add the ",(0,i.jsx)(n.code,{children:"TUnit"})," package:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"cd YourTestProjectNameHere\ndotnet add package TUnit --prerelease\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And then remove any automatically generated ",(0,i.jsx)(n.code,{children:"Program.cs"})," or main method, as this'll be taken care of by the TUnit package."]}),"\n",(0,i.jsx)(n.h3,{id:"global-usings",children:"Global Usings"}),"\n",(0,i.jsx)(n.p,{children:"The TUnit package automatically configures global usings for common TUnit namespaces, so your test files don't need to include using statements for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUnit.Core"})," (for ",(0,i.jsx)(n.code,{children:"[Test]"})," attribute)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUnit.Assertions"})," (for ",(0,i.jsx)(n.code,{children:"Assert.That()"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TUnit.Assertions.Extensions"})," (for assertion methods)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This means your test files can be as simple as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace MyTests;\n\npublic class MyTests  // No [TestClass] needed!\n{\n    [Test]  // Available without explicit using statement\n    public async Task MyTest()\n    {\n        await Assert.That(true).IsTrue();  // Assert is available automatically\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"That's it. We're ready to write our first test."}),"\n",(0,i.jsxs)(n.p,{children:["Your ",(0,i.jsx)(n.code,{children:".csproj"})," should be as simple as something like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <PackageReference Include="TUnit" Version="*" />\n    </ItemGroup>\n\n</Project>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["If you're used to other testing frameworks, you're probably used to the package ",(0,i.jsx)(n.code,{children:"Microsoft.NET.Test.Sdk"}),".\nThis should NOT be used with TUnit. It'll stop test discovery from working properly."]})}),"\n",(0,i.jsx)(n.h2,{id:"net-framework",children:".NET Framework"}),"\n",(0,i.jsxs)(n.p,{children:["If you are still targeting .NET Framework, TUnit will try to Polyfill some missing types that are used by the compiler, such as the ",(0,i.jsx)(n.code,{children:"ModuleInitialiserAttribute"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you have issues with other Polyfill libraries also defining them, in your project files, you can define the property ",(0,i.jsx)(n.code,{children:"<EnableTUnitPolyfills>false</EnableTUnitPolyfills>"})," to stop TUnit generating them for you."]}),"\n",(0,i.jsx)(n.h3,{id:"central-package-management-cpm",children:"Central Package Management (CPM)"}),"\n",(0,i.jsxs)(n.p,{children:["TUnit is fully compatible with NuGet Central Package Management. When CPM is enabled (via ",(0,i.jsx)(n.code,{children:"Directory.Packages.props"}),"), TUnit will automatically inject the Polyfill package using ",(0,i.jsx)(n.code,{children:"VersionOverride"}),", so you don't need to manually add it to your ",(0,i.jsx)(n.code,{children:"Directory.Packages.props"})," file."]}),"\n",(0,i.jsx)(n.p,{children:"If you prefer to manage the Polyfill version yourself, you can:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add ",(0,i.jsx)(n.code,{children:'<PackageVersion Include="Polyfill" Version="x.x.x" />'})," to your ",(0,i.jsx)(n.code,{children:"Directory.Packages.props"}),", OR"]}),"\n",(0,i.jsxs)(n.li,{children:["Disable automatic injection with ",(0,i.jsx)(n.code,{children:"<EnableTUnitPolyfills>false</EnableTUnitPolyfills>"})," and add it manually"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},l=s.createContext(i);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);