"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[726],{6341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorial-advanced/property-injection","title":"Property Injection","description":"TUnit makes it easy to initialise some properties on your test class instead of passing them into the constructor.","source":"@site/docs/tutorial-advanced/property-injection.md","sourceDirName":"tutorial-advanced","slug":"/tutorial-advanced/property-injection","permalink":"/docs/tutorial-advanced/property-injection","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection","permalink":"/docs/tutorial-advanced/dependency-injection"},"next":{"title":"Event Subscribing","permalink":"/docs/tutorial-advanced/event-subscribing"}}');var i=t(4848),o=t(8453);const s={sidebar_position:13},a="Property Injection",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"property-injection",children:"Property Injection"})}),"\n",(0,i.jsx)(n.p,{children:"TUnit makes it easy to initialise some properties on your test class instead of passing them into the constructor."}),"\n",(0,i.jsxs)(n.p,{children:["Your properties must be marked with the ",(0,i.jsx)(n.code,{children:"required"})," keyword and then simply place a data attribute on it.\nThe required keyword keeps your code clean and correct. If a property isn't passed in, you'll get a compiler warning, so you know something has gone wrong. It also gets rid of any pesky nullability warnings."]}),"\n",(0,i.jsx)(n.p,{children:"Supported attributes for properties are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Argument"}),"\n",(0,i.jsx)(n.li,{children:"MethodDataSource"}),"\n",(0,i.jsx)(n.li,{children:"ClassDataSource"}),"\n",(0,i.jsx)(n.li,{children:"DataSourceGeneratorAttribute (though limited to the first item returned)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This can help simplify base classes with common behaviour and avoid having to write boilerplate constructors everywhere."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class PropertySetterTests\n{\n    [Arguments("1")]\n    public required string Property1 { get; init; }\n        \n    [MethodDataSource(nameof(MethodData))]\n    public required string Property2 { get; init; }\n        \n    [ClassDataSource<InnerModel>]\n    public required InnerModel Property3 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.Globally)]\n    public required InnerModel Property4 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.ForClass)]\n    public required InnerModel Property5 { get; init; }\n    \n    [ClassDataSource<InnerModel>(Shared = SharedType.Keyed, Key = "Key")]\n    public required InnerModel Property6 { get; init; }\n        \n    [DataSourceGeneratorTests.AutoFixtureGenerator<string>]\n    public required string Property7 { get; init; }\n    \n    [Test]\n    public void Test()\n    {\n        Console.WriteLine(Property7);\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);