"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3929],{3354:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"assertions/equality-and-comparison","title":"Equality and Comparison Assertions","description":"TUnit provides comprehensive assertions for testing equality and comparing values. These assertions work with any type that implements the appropriate comparison interfaces.","source":"@site/docs/assertions/equality-and-comparison.md","sourceDirName":"assertions","slug":"/assertions/equality-and-comparison","permalink":"/docs/assertions/equality-and-comparison","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Getting Started with Assertions","permalink":"/docs/assertions/getting-started"},"next":{"title":"Null and Default Value Assertions","permalink":"/docs/assertions/null-and-default"}}');var i=a(4848),t=a(8453);const r={sidebar_position:2},l="Equality and Comparison Assertions",c={},o=[{value:"Basic Equality",id:"basic-equality",level:2},{value:"IsEqualTo",id:"isequalto",level:3},{value:"IsNotEqualTo",id:"isnotequalto",level:3},{value:"EqualTo (Alias)",id:"equalto-alias",level:3},{value:"Reference Equality",id:"reference-equality",level:2},{value:"IsSameReferenceAs",id:"issamereferenceas",level:3},{value:"IsNotSameReferenceAs",id:"isnotsamereferenceas",level:3},{value:"Comparison Assertions",id:"comparison-assertions",level:2},{value:"IsGreaterThan",id:"isgreaterthan",level:3},{value:"IsGreaterThanOrEqualTo",id:"isgreaterthanorequalto",level:3},{value:"IsLessThan",id:"islessthan",level:3},{value:"IsLessThanOrEqualTo",id:"islessthanorequalto",level:3},{value:"Range Assertions",id:"range-assertions",level:2},{value:"IsBetween",id:"isbetween",level:3},{value:"Numeric-Specific Assertions",id:"numeric-specific-assertions",level:2},{value:"IsPositive",id:"ispositive",level:3},{value:"IsNegative",id:"isnegative",level:3},{value:"Tolerance for Floating-Point Numbers",id:"tolerance-for-floating-point-numbers",level:2},{value:"Double Tolerance",id:"double-tolerance",level:3},{value:"Float Tolerance",id:"float-tolerance",level:3},{value:"Decimal Tolerance",id:"decimal-tolerance",level:3},{value:"Long Tolerance",id:"long-tolerance",level:3},{value:"Chaining Comparisons",id:"chaining-comparisons",level:2},{value:"Custom Equality Comparers",id:"custom-equality-comparers",level:2},{value:"Working with Value Types and Records",id:"working-with-value-types-and-records",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Validating Calculation Results",id:"validating-calculation-results",level:3},{value:"Validating Ranges",id:"validating-ranges",level:3},{value:"Comparing with Mathematical Constants",id:"comparing-with-mathematical-constants",level:3},{value:"API Response Validation",id:"api-response-validation",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Validating User Input",id:"validating-user-input",level:3},{value:"Percentage Validation",id:"percentage-validation",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"equality-and-comparison-assertions",children:"Equality and Comparison Assertions"})}),"\n",(0,i.jsx)(n.p,{children:"TUnit provides comprehensive assertions for testing equality and comparing values. These assertions work with any type that implements the appropriate comparison interfaces."}),"\n",(0,i.jsx)(n.h2,{id:"basic-equality",children:"Basic Equality"}),"\n",(0,i.jsx)(n.h3,{id:"isequalto",children:"IsEqualTo"}),"\n",(0,i.jsxs)(n.p,{children:["Tests that two values are equal using the type's ",(0,i.jsx)(n.code,{children:"Equals()"})," method or ",(0,i.jsx)(n.code,{children:"=="})," operator:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Basic_Equality()\n{\n    var result = 5 + 5;\n    await Assert.That(result).IsEqualTo(10);\n\n    var name = "Alice";\n    await Assert.That(name).IsEqualTo("Alice");\n\n    var isValid = true;\n    await Assert.That(isValid).IsEqualTo(true);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"isnotequalto",children:"IsNotEqualTo"}),"\n",(0,i.jsx)(n.p,{children:"Tests that two values are not equal:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Not_Equal()\n{\n    var actual = CalculateResult();\n    await Assert.That(actual).IsNotEqualTo(0);\n\n    var username = GetUsername();\n    await Assert.That(username).IsNotEqualTo("admin");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"equalto-alias",children:"EqualTo (Alias)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"EqualTo()"})," is an alias for ",(0,i.jsx)(n.code,{children:"IsEqualTo()"})," for more natural chaining:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Using_EqualTo_Alias()\n{\n    var numbers = new[] { 1, 2, 3 };\n\n    await Assert.That(numbers)\n        .HasCount().EqualTo(3)\n        .And.Contains(2);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reference-equality",children:"Reference Equality"}),"\n",(0,i.jsx)(n.h3,{id:"issamereferenceas",children:"IsSameReferenceAs"}),"\n",(0,i.jsx)(n.p,{children:"Tests that two references point to the exact same object instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Same_Reference()\n{\n    var original = new Person { Name = "Alice" };\n    var reference = original;\n\n    await Assert.That(reference).IsSameReferenceAs(original);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"isnotsamereferenceas",children:"IsNotSameReferenceAs"}),"\n",(0,i.jsx)(n.p,{children:"Tests that two references point to different object instances:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Different_References()\n{\n    var person1 = new Person { Name = "Alice" };\n    var person2 = new Person { Name = "Alice" };\n\n    // Same values, different instances\n    await Assert.That(person1).IsNotSameReferenceAs(person2);\n    await Assert.That(person1).IsEqualTo(person2); // If equality is overridden\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"comparison-assertions",children:"Comparison Assertions"}),"\n",(0,i.jsxs)(n.p,{children:["All comparison assertions work with types that implement ",(0,i.jsx)(n.code,{children:"IComparable<T>"})," or ",(0,i.jsx)(n.code,{children:"IComparable"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"isgreaterthan",children:"IsGreaterThan"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Greater_Than()\n{\n    var score = 85;\n    await Assert.That(score).IsGreaterThan(70);\n\n    var temperature = 25.5;\n    await Assert.That(temperature).IsGreaterThan(20.0);\n\n    var date = DateTime.Now;\n    await Assert.That(date).IsGreaterThan(DateTime.Now.AddDays(-1));\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"isgreaterthanorequalto",children:"IsGreaterThanOrEqualTo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Greater_Than_Or_Equal()\n{\n    var passingGrade = 60;\n    await Assert.That(passingGrade).IsGreaterThanOrEqualTo(60);\n\n    var age = 18;\n    await Assert.That(age).IsGreaterThanOrEqualTo(18); // Exactly 18 passes\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"islessthan",children:"IsLessThan"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Less_Than()\n{\n    var response_time = 150; // milliseconds\n    await Assert.That(response_time).IsLessThan(200);\n\n    var price = 49.99m;\n    await Assert.That(price).IsLessThan(50.00m);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"islessthanorequalto",children:"IsLessThanOrEqualTo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Less_Than_Or_Equal()\n{\n    var maxRetries = 3;\n    var actualRetries = 3;\n    await Assert.That(actualRetries).IsLessThanOrEqualTo(maxRetries);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"range-assertions",children:"Range Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"isbetween",children:"IsBetween"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a value falls within a range (inclusive):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Between_Values()\n{\n    var percentage = 75;\n    await Assert.That(percentage).IsBetween(0, 100);\n\n    var temperature = 22.5;\n    await Assert.That(temperature).IsBetween(20.0, 25.0);\n\n    var age = 30;\n    await Assert.That(age).IsBetween(18, 65);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Boundary values are included:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Between_Includes_Boundaries()\n{\n    await Assert.That(0).IsBetween(0, 10);    // \u2705 Passes\n    await Assert.That(10).IsBetween(0, 10);   // \u2705 Passes\n    await Assert.That(5).IsBetween(0, 10);    // \u2705 Passes\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"numeric-specific-assertions",children:"Numeric-Specific Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"ispositive",children:"IsPositive"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a numeric value is greater than zero:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Positive_Numbers()\n{\n    var profit = 1500.50m;\n    await Assert.That(profit).IsPositive();\n\n    var count = 5;\n    await Assert.That(count).IsPositive();\n\n    // Works with all numeric types\n    await Assert.That(1.5).IsPositive();      // double\n    await Assert.That(1.5f).IsPositive();     // float\n    await Assert.That(1.5m).IsPositive();     // decimal\n    await Assert.That((byte)1).IsPositive();  // byte\n    await Assert.That((short)1).IsPositive(); // short\n    await Assert.That(1L).IsPositive();       // long\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"isnegative",children:"IsNegative"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a numeric value is less than zero:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Negative_Numbers()\n{\n    var loss = -500.25m;\n    await Assert.That(loss).IsNegative();\n\n    var temperature = -5;\n    await Assert.That(temperature).IsNegative();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tolerance-for-floating-point-numbers",children:"Tolerance for Floating-Point Numbers"}),"\n",(0,i.jsx)(n.p,{children:"When comparing floating-point numbers, you can specify a tolerance to account for rounding errors:"}),"\n",(0,i.jsx)(n.h3,{id:"double-tolerance",children:"Double Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Double_With_Tolerance()\n{\n    var actual = 1.0 / 3.0; // 0.333333...\n    var expected = 0.333;\n\n    // Without tolerance - might fail due to precision\n    // await Assert.That(actual).IsEqualTo(expected);\n\n    // With tolerance - passes\n    await Assert.That(actual).IsEqualTo(expected, tolerance: 0.001);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"float-tolerance",children:"Float Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Float_With_Tolerance()\n{\n    float actual = 3.14159f;\n    float expected = 3.14f;\n\n    await Assert.That(actual).IsEqualTo(expected, tolerance: 0.01f);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"decimal-tolerance",children:"Decimal Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Decimal_With_Tolerance()\n{\n    decimal price = 19.995m;\n    decimal expected = 20.00m;\n\n    await Assert.That(price).IsEqualTo(expected, tolerance: 0.01m);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"long-tolerance",children:"Long Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Long_With_Tolerance()\n{\n    long timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n    long expected = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n\n    // Allow 100ms difference\n    await Assert.That(timestamp).IsEqualTo(expected, tolerance: 100L);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"chaining-comparisons",children:"Chaining Comparisons"}),"\n",(0,i.jsx)(n.p,{children:"Combine multiple comparison assertions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_Comparisons()\n{\n    var score = 85;\n\n    await Assert.That(score)\n        .IsGreaterThan(0)\n        .And.IsLessThan(100)\n        .And.IsGreaterThanOrEqualTo(80);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Or use ",(0,i.jsx)(n.code,{children:"IsBetween"})," for simpler range checks:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Range_Check_Simplified()\n{\n    var score = 85;\n\n    // Instead of chaining IsGreaterThan and IsLessThan:\n    await Assert.That(score).IsBetween(0, 100);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-equality-comparers",children:"Custom Equality Comparers"}),"\n",(0,i.jsx)(n.p,{children:"You can provide custom equality comparers for collections and complex types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Custom_Comparer()\n{\n    var people1 = new[] { new Person("Alice"), new Person("Bob") };\n    var people2 = new[] { new Person("ALICE"), new Person("BOB") };\n\n    // Case-insensitive name comparison\n    var comparer = new PersonNameComparer();\n\n    await Assert.That(people1)\n        .IsEquivalentTo(people2)\n        .Using(comparer);\n}\n\npublic class PersonNameComparer : IEqualityComparer<Person>\n{\n    public bool Equals(Person? x, Person? y) =>\n        string.Equals(x?.Name, y?.Name, StringComparison.OrdinalIgnoreCase);\n\n    public int GetHashCode(Person obj) =>\n        obj.Name?.ToLowerInvariant().GetHashCode() ?? 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or use a predicate:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Custom_Equality_Predicate()\n{\n    var people1 = new[] { new Person("Alice"), new Person("Bob") };\n    var people2 = new[] { new Person("ALICE"), new Person("BOB") };\n\n    await Assert.That(people1)\n        .IsEquivalentTo(people2)\n        .Using((p1, p2) => string.Equals(p1.Name, p2.Name,\n                          StringComparison.OrdinalIgnoreCase));\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-value-types-and-records",children:"Working with Value Types and Records"}),"\n",(0,i.jsx)(n.p,{children:"Equality works naturally with value types and records:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public record Point(int X, int Y);\n\n[Test]\npublic async Task Record_Equality()\n{\n    var point1 = new Point(10, 20);\n    var point2 = new Point(10, 20);\n\n    // Records have built-in value equality\n    await Assert.That(point1).IsEqualTo(point2);\n    await Assert.That(point1).IsNotSameReferenceAs(point2);\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public struct Coordinate\n{\n    public double Latitude { get; init; }\n    public double Longitude { get; init; }\n}\n\n[Test]\npublic async Task Struct_Equality()\n{\n    var coord1 = new Coordinate { Latitude = 47.6, Longitude = -122.3 };\n    var coord2 = new Coordinate { Latitude = 47.6, Longitude = -122.3 };\n\n    await Assert.That(coord1).IsEqualTo(coord2);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,i.jsx)(n.h3,{id:"validating-calculation-results",children:"Validating Calculation Results"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Calculate_Discount()\n{\n    var originalPrice = 100m;\n    var discount = 0.20m; // 20%\n\n    var finalPrice = originalPrice * (1 - discount);\n\n    await Assert.That(finalPrice).IsEqualTo(80m);\n    await Assert.That(finalPrice).IsLessThan(originalPrice);\n    await Assert.That(finalPrice).IsGreaterThan(0);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"validating-ranges",children:"Validating Ranges"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Temperature_In_Valid_Range()\n{\n    var roomTemperature = GetRoomTemperature();\n\n    await Assert.That(roomTemperature)\n        .IsBetween(18, 26) // Comfortable range in Celsius\n        .And.IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"comparing-with-mathematical-constants",children:"Comparing with Mathematical Constants"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Mathematical_Constants()\n{\n    var calculatedPi = CalculatePiUsingLeibniz(10000);\n\n    await Assert.That(calculatedPi).IsEqualTo(Math.PI, tolerance: 0.0001);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"api-response-validation",children:"API Response Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task API_Response_Time()\n{\n    var stopwatch = Stopwatch.StartNew();\n    await CallApiEndpoint();\n    stopwatch.Stop();\n\n    await Assert.That(stopwatch.ElapsedMilliseconds)\n        .IsLessThan(500) // Must respond within 500ms\n        .And.IsGreaterThan(0);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"validating-user-input",children:"Validating User Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Username_Length()\n{\n    var username = GetUserInput();\n\n    await Assert.That(username.Length)\n        .IsBetween(3, 20)\n        .And.IsGreaterThan(0);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"percentage-validation",children:"Percentage Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Percentage_Valid()\n{\n    var successRate = CalculateSuccessRate();\n\n    await Assert.That(successRate)\n        .IsBetween(0, 100)\n        .And.IsGreaterThanOrEqualTo(0);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/numeric",children:"Numeric Assertions"})," - Additional numeric-specific assertions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/datetime",children:"DateTime Assertions"})," - Time-based comparisons with tolerance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/collections",children:"Collections"})," - Comparing collections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/string",children:"Strings"})," - String equality with options"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var s=a(6540);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);