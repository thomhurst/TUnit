"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2298],{5152:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"assertions/datetime","title":"DateTime and Time Assertions","description":"TUnit provides comprehensive assertions for date and time types, including DateTime, DateTimeOffset, DateOnly, TimeOnly, and TimeSpan, with support for tolerance-based comparisons and specialized checks.","source":"@site/docs/assertions/datetime.md","sourceDirName":"assertions","slug":"/assertions/datetime","permalink":"/docs/assertions/datetime","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7.5,"frontMatter":{"sidebar_position":7.5},"sidebar":"docs","previous":{"title":"Dictionary Assertions","permalink":"/docs/assertions/dictionaries"},"next":{"title":"Exception Assertions","permalink":"/docs/assertions/exceptions"}}');var t=n(4848),i=n(8453);const r={sidebar_position:7.5},l="DateTime and Time Assertions",o={},c=[{value:"DateTime Equality with Tolerance",id:"datetime-equality-with-tolerance",level:2},{value:"Tolerance Examples",id:"tolerance-examples",level:3},{value:"DateTime Comparison",id:"datetime-comparison",level:2},{value:"DateTime-Specific Assertions",id:"datetime-specific-assertions",level:2},{value:"IsToday / IsNotToday",id:"istoday--isnottoday",level:3},{value:"IsUtc / IsNotUtc",id:"isutc--isnotutc",level:3},{value:"IsLeapYear / IsNotLeapYear",id:"isleapyear--isnotleapyear",level:3},{value:"IsInFuture / IsInPast",id:"isinfuture--isinpast",level:3},{value:"IsInFutureUtc / IsInPastUtc",id:"isinfutureutc--isinpastutc",level:3},{value:"IsOnWeekend / IsOnWeekday",id:"isonweekend--isonweekday",level:3},{value:"IsDaylightSavingTime / IsNotDaylightSavingTime",id:"isdaylightsavingtime--isnotdaylightsavingtime",level:3},{value:"DateTimeOffset",id:"datetimeoffset",level:2},{value:"DateOnly (.NET 6+)",id:"dateonly-net-6",level:2},{value:"DateOnly with Days Tolerance",id:"dateonly-with-days-tolerance",level:3},{value:"DateOnly Comparison",id:"dateonly-comparison",level:3},{value:"TimeOnly (.NET 6+)",id:"timeonly-net-6",level:2},{value:"TimeOnly with Tolerance",id:"timeonly-with-tolerance",level:3},{value:"TimeSpan",id:"timespan",level:2},{value:"TimeSpan Comparison",id:"timespan-comparison",level:3},{value:"TimeSpan Sign Checks",id:"timespan-sign-checks",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Expiration Checks",id:"expiration-checks",level:3},{value:"Age Calculation",id:"age-calculation",level:3},{value:"Business Days",id:"business-days",level:3},{value:"Scheduling",id:"scheduling",level:3},{value:"Performance Timing",id:"performance-timing",level:3},{value:"Date Range Validation",id:"date-range-validation",level:3},{value:"Timestamp Validation",id:"timestamp-validation",level:3},{value:"Time Zone Conversions",id:"time-zone-conversions",level:3},{value:"Working with Date Components",id:"working-with-date-components",level:2},{value:"First and Last Day of Month",id:"first-and-last-day-of-month",level:2},{value:"Quarter Calculation",id:"quarter-calculation",level:2},{value:"DayOfWeek Assertions",id:"dayofweek-assertions",level:2},{value:"Chaining DateTime Assertions",id:"chaining-datetime-assertions",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Birthday Validation",id:"birthday-validation",level:3},{value:"Meeting Scheduler",id:"meeting-scheduler",level:3},{value:"Relative Time Checks",id:"relative-time-checks",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"datetime-and-time-assertions",children:"DateTime and Time Assertions"})}),"\n",(0,t.jsxs)(a.p,{children:["TUnit provides comprehensive assertions for date and time types, including ",(0,t.jsx)(a.code,{children:"DateTime"}),", ",(0,t.jsx)(a.code,{children:"DateTimeOffset"}),", ",(0,t.jsx)(a.code,{children:"DateOnly"}),", ",(0,t.jsx)(a.code,{children:"TimeOnly"}),", and ",(0,t.jsx)(a.code,{children:"TimeSpan"}),", with support for tolerance-based comparisons and specialized checks."]}),"\n",(0,t.jsx)(a.h2,{id:"datetime-equality-with-tolerance",children:"DateTime Equality with Tolerance"}),"\n",(0,t.jsx)(a.p,{children:"DateTime comparisons often need tolerance to account for timing variations:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTime_With_Tolerance()\n{\n    var now = DateTime.Now;\n    var almostNow = now.AddMilliseconds(50);\n\n    // Without tolerance - might fail\n    // await Assert.That(almostNow).IsEqualTo(now);\n\n    // With tolerance - passes\n    await Assert.That(almostNow).IsEqualTo(now, tolerance: TimeSpan.FromSeconds(1));\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"tolerance-examples",children:"Tolerance Examples"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Various_Tolerance_Values()\n{\n    var baseTime = new DateTime(2024, 1, 15, 10, 30, 0);\n\n    // Millisecond tolerance\n    var time1 = baseTime.AddMilliseconds(100);\n    await Assert.That(time1).IsEqualTo(baseTime, tolerance: TimeSpan.FromMilliseconds(500));\n\n    // Second tolerance\n    var time2 = baseTime.AddSeconds(5);\n    await Assert.That(time2).IsEqualTo(baseTime, tolerance: TimeSpan.FromSeconds(10));\n\n    // Minute tolerance\n    var time3 = baseTime.AddMinutes(2);\n    await Assert.That(time3).IsEqualTo(baseTime, tolerance: TimeSpan.FromMinutes(5));\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"datetime-comparison",children:"DateTime Comparison"}),"\n",(0,t.jsx)(a.p,{children:"Standard comparison operators work with DateTime:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTime_Comparison()\n{\n    var past = DateTime.Now.AddDays(-1);\n    var now = DateTime.Now;\n    var future = DateTime.Now.AddDays(1);\n\n    await Assert.That(now).IsGreaterThan(past);\n    await Assert.That(now).IsLessThan(future);\n    await Assert.That(past).IsLessThan(future);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"datetime-specific-assertions",children:"DateTime-Specific Assertions"}),"\n",(0,t.jsx)(a.h3,{id:"istoday--isnottoday",children:"IsToday / IsNotToday"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTime_Is_Today()\n{\n    var today = DateTime.Now;\n    await Assert.That(today).IsToday();\n\n    var yesterday = DateTime.Now.AddDays(-1);\n    await Assert.That(yesterday).IsNotToday();\n\n    var tomorrow = DateTime.Now.AddDays(1);\n    await Assert.That(tomorrow).IsNotToday();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isutc--isnotutc",children:"IsUtc / IsNotUtc"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTime_Kind()\n{\n    var utc = DateTime.UtcNow;\n    await Assert.That(utc).IsUtc();\n\n    var local = DateTime.Now;\n    await Assert.That(local).IsNotUtc();\n\n    var unspecified = new DateTime(2024, 1, 15);\n    await Assert.That(unspecified).IsNotUtc();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isleapyear--isnotleapyear",children:"IsLeapYear / IsNotLeapYear"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Leap_Year_Check()\n{\n    var leapYear = new DateTime(2024, 1, 1);\n    await Assert.That(leapYear).IsLeapYear();\n\n    var nonLeapYear = new DateTime(2023, 1, 1);\n    await Assert.That(nonLeapYear).IsNotLeapYear();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isinfuture--isinpast",children:"IsInFuture / IsInPast"}),"\n",(0,t.jsx)(a.p,{children:"Compares against local time:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Future_and_Past()\n{\n    var future = DateTime.Now.AddHours(1);\n    await Assert.That(future).IsInFuture();\n\n    var past = DateTime.Now.AddHours(-1);\n    await Assert.That(past).IsInPast();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isinfutureutc--isinpastutc",children:"IsInFutureUtc / IsInPastUtc"}),"\n",(0,t.jsx)(a.p,{children:"Compares against UTC time:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Future_and_Past_UTC()\n{\n    var futureUtc = DateTime.UtcNow.AddHours(1);\n    await Assert.That(futureUtc).IsInFutureUtc();\n\n    var pastUtc = DateTime.UtcNow.AddHours(-1);\n    await Assert.That(pastUtc).IsInPastUtc();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isonweekend--isonweekday",children:"IsOnWeekend / IsOnWeekday"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Weekend_Check()\n{\n    var saturday = new DateTime(2024, 1, 6); // Saturday\n    await Assert.That(saturday).IsOnWeekend();\n\n    var monday = new DateTime(2024, 1, 8); // Monday\n    await Assert.That(monday).IsOnWeekday();\n    await Assert.That(monday).IsNotOnWeekend();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"isdaylightsavingtime--isnotdaylightsavingtime",children:"IsDaylightSavingTime / IsNotDaylightSavingTime"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Daylight_Saving_Time()\n{\n    var summer = new DateTime(2024, 7, 1); // Summer in Northern Hemisphere\n    var winter = new DateTime(2024, 1, 1); // Winter\n\n    // Results depend on timezone\n    if (TimeZoneInfo.Local.IsDaylightSavingTime(summer))\n    {\n        await Assert.That(summer).IsDaylightSavingTime();\n    }\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"datetimeoffset",children:"DateTimeOffset"}),"\n",(0,t.jsx)(a.p,{children:"DateTimeOffset includes timezone information:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTimeOffset_With_Tolerance()\n{\n    var now = DateTimeOffset.Now;\n    var almostNow = now.AddSeconds(1);\n\n    await Assert.That(almostNow).IsEqualTo(now, tolerance: TimeSpan.FromSeconds(5));\n}\n"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTimeOffset_Comparison()\n{\n    var earlier = new DateTimeOffset(2024, 1, 1, 12, 0, 0, TimeSpan.FromHours(-8));\n    var later = new DateTimeOffset(2024, 1, 1, 12, 0, 0, TimeSpan.FromHours(0));\n\n    // Same local time, but different UTC times\n    await Assert.That(later).IsGreaterThan(earlier);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"dateonly-net-6",children:"DateOnly (.NET 6+)"}),"\n",(0,t.jsx)(a.p,{children:"DateOnly represents just a date without time:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateOnly_Assertions()\n{\n    var date1 = new DateOnly(2024, 1, 15);\n    var date2 = new DateOnly(2024, 1, 15);\n\n    await Assert.That(date1).IsEqualTo(date2);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"dateonly-with-days-tolerance",children:"DateOnly with Days Tolerance"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateOnly_With_Tolerance()\n{\n    var date1 = new DateOnly(2024, 1, 15);\n    var date2 = new DateOnly(2024, 1, 17);\n\n    await Assert.That(date2).IsEqualTo(date1, daysTolerance: 5);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"dateonly-comparison",children:"DateOnly Comparison"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task DateOnly_Comparison()\n{\n    var earlier = new DateOnly(2024, 1, 1);\n    var later = new DateOnly(2024, 12, 31);\n\n    await Assert.That(later).IsGreaterThan(earlier);\n    await Assert.That(earlier).IsLessThan(later);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"timeonly-net-6",children:"TimeOnly (.NET 6+)"}),"\n",(0,t.jsx)(a.p,{children:"TimeOnly represents just time without a date:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task TimeOnly_Assertions()\n{\n    var morning = new TimeOnly(9, 30, 0);\n    var evening = new TimeOnly(17, 45, 0);\n\n    await Assert.That(evening).IsGreaterThan(morning);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"timeonly-with-tolerance",children:"TimeOnly with Tolerance"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task TimeOnly_With_Tolerance()\n{\n    var time1 = new TimeOnly(10, 30, 0);\n    var time2 = new TimeOnly(10, 30, 5);\n\n    await Assert.That(time2).IsEqualTo(time1, tolerance: TimeSpan.FromSeconds(10));\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"timespan",children:"TimeSpan"}),"\n",(0,t.jsx)(a.p,{children:"TimeSpan represents a duration:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task TimeSpan_Assertions()\n{\n    var duration1 = TimeSpan.FromMinutes(30);\n    var duration2 = TimeSpan.FromMinutes(30);\n\n    await Assert.That(duration1).IsEqualTo(duration2);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"timespan-comparison",children:"TimeSpan Comparison"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task TimeSpan_Comparison()\n{\n    var short_duration = TimeSpan.FromMinutes(5);\n    var long_duration = TimeSpan.FromHours(1);\n\n    await Assert.That(long_duration).IsGreaterThan(short_duration);\n    await Assert.That(short_duration).IsLessThan(long_duration);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"timespan-sign-checks",children:"TimeSpan Sign Checks"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task TimeSpan_Sign()\n{\n    var positive = TimeSpan.FromHours(1);\n    await Assert.That(positive).IsPositive();\n\n    var negative = TimeSpan.FromHours(-1);\n    await Assert.That(negative).IsNegative();\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(a.h3,{id:"expiration-checks",children:"Expiration Checks"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Check_Token_Expiration()\n{\n    var token = CreateToken();\n    var expiresAt = token.ExpiresAt;\n\n    await Assert.That(expiresAt).IsInFuture();\n\n    // Or check if expired\n    var expiredToken = CreateExpiredToken();\n    await Assert.That(expiredToken.ExpiresAt).IsInPast();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"age-calculation",children:"Age Calculation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Calculate_Age()\n{\n    var birthDate = new DateTime(1990, 1, 1);\n    var age = DateTime.Now.Year - birthDate.Year;\n\n    if (DateTime.Now.DayOfYear < birthDate.DayOfYear)\n    {\n        age--;\n    }\n\n    await Assert.That(age).IsGreaterThanOrEqualTo(0);\n    await Assert.That(age).IsLessThan(150); // Reasonable max age\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"business-days",children:"Business Days"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Is_Business_Day()\n{\n    var monday = new DateTime(2024, 1, 8);\n\n    await Assert.That(monday).IsOnWeekday();\n    await Assert.That(monday.DayOfWeek).IsNotEqualTo(DayOfWeek.Saturday);\n    await Assert.That(monday.DayOfWeek).IsNotEqualTo(DayOfWeek.Sunday);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"scheduling",children:"Scheduling"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Scheduled_Time()\n{\n    var scheduledTime = new DateTime(2024, 12, 25, 9, 0, 0);\n\n    await Assert.That(scheduledTime.Month).IsEqualTo(12);\n    await Assert.That(scheduledTime.Day).IsEqualTo(25);\n    await Assert.That(scheduledTime.Hour).IsEqualTo(9);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"performance-timing",children:"Performance Timing"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Operation_Duration()\n{\n    var start = DateTime.Now;\n    await PerformOperationAsync();\n    var end = DateTime.Now;\n\n    var duration = end - start;\n\n    await Assert.That(duration).IsLessThan(TimeSpan.FromSeconds(5));\n    await Assert.That(duration).IsPositive();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"date-range-validation",children:"Date Range Validation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Date_Within_Range()\n{\n    var startDate = new DateTime(2024, 1, 1);\n    var endDate = new DateTime(2024, 12, 31);\n    var checkDate = new DateTime(2024, 6, 15);\n\n    await Assert.That(checkDate).IsGreaterThan(startDate);\n    await Assert.That(checkDate).IsLessThan(endDate);\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"timestamp-validation",children:"Timestamp Validation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Record_Created_Recently()\n{\n    var record = await CreateRecordAsync();\n    var createdAt = record.CreatedAt;\n    var now = DateTime.UtcNow;\n\n    // Created within last minute\n    await Assert.That(createdAt).IsEqualTo(now, tolerance: TimeSpan.FromMinutes(1));\n    await Assert.That(createdAt).IsInPastUtc();\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"time-zone-conversions",children:"Time Zone Conversions"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Time_Zone_Conversion()\n{\n    var utcTime = DateTime.UtcNow;\n    var localTime = utcTime.ToLocalTime();\n\n    await Assert.That(utcTime).IsUtc();\n    await Assert.That(localTime).IsNotUtc();\n\n    var offset = localTime - utcTime;\n    await Assert.That(Math.Abs(offset.TotalHours)).IsLessThan(24);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"working-with-date-components",children:"Working with Date Components"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Date_Components()\n{\n    var date = new DateTime(2024, 7, 15, 14, 30, 45);\n\n    await Assert.That(date.Year).IsEqualTo(2024);\n    await Assert.That(date.Month).IsEqualTo(7);\n    await Assert.That(date.Day).IsEqualTo(15);\n    await Assert.That(date.Hour).IsEqualTo(14);\n    await Assert.That(date.Minute).IsEqualTo(30);\n    await Assert.That(date.Second).IsEqualTo(45);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"first-and-last-day-of-month",children:"First and Last Day of Month"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task First_Day_Of_Month()\n{\n    var date = new DateTime(2024, 3, 15);\n    var firstDay = new DateTime(date.Year, date.Month, 1);\n\n    await Assert.That(firstDay.Day).IsEqualTo(1);\n}\n\n[Test]\npublic async Task Last_Day_Of_Month()\n{\n    var date = new DateTime(2024, 2, 15);\n    var daysInMonth = DateTime.DaysInMonth(date.Year, date.Month);\n    var lastDay = new DateTime(date.Year, date.Month, daysInMonth);\n\n    await Assert.That(lastDay.Day).IsEqualTo(29); // 2024 is a leap year\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"quarter-calculation",children:"Quarter Calculation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Date_Quarter()\n{\n    var q1 = new DateTime(2024, 2, 1);\n    var quarter1 = (q1.Month - 1) / 3 + 1;\n    await Assert.That(quarter1).IsEqualTo(1);\n\n    var q3 = new DateTime(2024, 8, 1);\n    var quarter3 = (q3.Month - 1) / 3 + 1;\n    await Assert.That(quarter3).IsEqualTo(3);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"dayofweek-assertions",children:"DayOfWeek Assertions"}),"\n",(0,t.jsx)(a.p,{children:"DayOfWeek has its own assertions:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Day_Of_Week_Checks()\n{\n    var dayOfWeek = DateTime.Now.DayOfWeek;\n\n    if (dayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)\n    {\n        await Assert.That(dayOfWeek).IsWeekend();\n    }\n    else\n    {\n        await Assert.That(dayOfWeek).IsWeekday();\n    }\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"chaining-datetime-assertions",children:"Chaining DateTime Assertions"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_DateTime_Assertions()\n{\n    var date = DateTime.Now;\n\n    await Assert.That(date)\n        .IsToday()\n        .And.IsGreaterThan(DateTime.MinValue)\n        .And.IsLessThan(DateTime.MaxValue);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(a.h3,{id:"birthday-validation",children:"Birthday Validation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_Birthday()\n{\n    var birthday = new DateTime(1990, 5, 15);\n\n    await Assert.That(birthday).IsInPast();\n    await Assert.That(birthday).IsGreaterThan(new DateTime(1900, 1, 1));\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"meeting-scheduler",children:"Meeting Scheduler"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Schedule_Meeting()\n{\n    var meetingTime = new DateTime(2024, 1, 15, 14, 0, 0);\n\n    await Assert.That(meetingTime).IsInFuture();\n    await Assert.That(meetingTime).IsOnWeekday();\n    await Assert.That(meetingTime.Hour).IsBetween(9, 17); // Business hours\n}\n"})}),"\n",(0,t.jsx)(a.h3,{id:"relative-time-checks",children:"Relative Time Checks"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-csharp",children:"[Test]\npublic async Task Within_Last_Hour()\n{\n    var timestamp = DateTime.Now.AddMinutes(-30);\n    var hourAgo = DateTime.Now.AddHours(-1);\n\n    await Assert.That(timestamp).IsGreaterThan(hourAgo);\n}\n"})}),"\n",(0,t.jsx)(a.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - General comparison with tolerance"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"/docs/assertions/numeric",children:"Numeric Assertions"})," - Numeric components of dates"]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.a,{href:"/docs/assertions/specialized-types",children:"Specialized Types"})," - Other time-related types"]}),"\n"]})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function r(e){const a=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:a},e.children)}}}]);