"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6491],{2692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"customization-extensibility/data-source-generators","title":"Data Source Generators","description":"TUnit exposes an abstract DataSourceGeneratorAttribute class that you can inherit from and implement your own logic for creating values.","source":"@site/docs/customization-extensibility/data-source-generators.md","sourceDirName":"customization-extensibility","slug":"/customization-extensibility/data-source-generators","permalink":"/docs/customization-extensibility/data-source-generators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Extensions","permalink":"/docs/extensions/"},"next":{"title":"Argument Formatters","permalink":"/docs/customization-extensibility/argument-formatters"}}');var r=n(4848),s=n(8453);const o={},i="Data Source Generators",c={},u=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"data-source-generators",children:"Data Source Generators"})}),"\n",(0,r.jsxs)(t.p,{children:["TUnit exposes an ",(0,r.jsx)(t.code,{children:"abstract"})," ",(0,r.jsx)(t.code,{children:"DataSourceGeneratorAttribute"})," class that you can inherit from and implement your own logic for creating values."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"DataSourceGeneratorAttribute"})," class uses generic ",(0,r.jsx)(t.code,{children:"Type"})," arguments to keep your data strongly typed."]}),"\n",(0,r.jsxs)(t.p,{children:["This attribute can be useful to easily populate data in a generic way, and without having to define lots of specific ",(0,r.jsx)(t.code,{children:"MethodDataSources"})]}),"\n",(0,r.jsxs)(t.p,{children:["If you just need to generate data for a single parameter, you simply return ",(0,r.jsx)(t.code,{children:"T"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If you need to generate data for multiple parameters, you must use a ",(0,r.jsx)(t.code,{children:"Tuple<>"})," return type. E.g. ",(0,r.jsx)(t.code,{children:"return (T1, T2, T3)"})]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example that uses AutoFixture to generate arguments:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class AutoFixtureGeneratorAttribute<T1, T2, T3> : DataSourceGeneratorAttribute<T1, T2, T3>\n{\n    public override IEnumerable<Func<(T1, T2, T3)>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        var fixture = new Fixture();\n        \n        yield return () => (fixture.Create<T1>(), fixture.Create<T2>(), fixture.Create<T3>());\n    }\n}\n\n[AutoFixtureGenerator<SomeClass1, SomeClass2, SomeClass3>]\npublic class MyTestClass(SomeClass1 someClass1, SomeClass2 someClass2, SomeClass3 someClass3)\n{\n    [Test]\n    [AutoFixtureGenerator<int, string, bool>]\n    public async Task Test((int value, string value2, bool value3))\n    {\n        // ...\n    }\n}\n\n\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Notes:\n",(0,r.jsx)(t.code,{children:"GenerateDataSources()"})," could be called multiple times if you have nested loops to generate data within your tests. Because of this, you are required to return a ",(0,r.jsx)(t.code,{children:"Func"})," - This means that tests can create a new object each time for a test case. Otherwise, we'd be pointing to the same object if we were in a nested loop and that could lead to unintended side-effects."]}),"\n",(0,r.jsx)(t.p,{children:"An example could be using a DataSourceGenerator on both the class and the test method, resulting with a loop within a loop."}),"\n",(0,r.jsx)(t.p,{children:"Because this could be called multiple times, if you're subscribing to test events and storing state within the attribute, be aware of this and how this could affect disposal etc."}),"\n",(0,r.jsxs)(t.p,{children:["Instead, you can use the ",(0,r.jsx)(t.code,{children:"yield return"})," pattern, and use the ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," from the ",(0,r.jsx)(t.code,{children:"DataGeneratorMetadata"})," object passed to you.\nAfter each ",(0,r.jsx)(t.code,{children:"yield"}),", the execution is passed back to TUnit, and TUnit will set a new ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," for you - So as long as you yield each result, you'll get a unique context object for each test case.\nThe ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," object exposes ",(0,r.jsx)(t.code,{children:"Events"})," - And you can register a delegate to be invoked on them at the point in the test lifecycle that you wish."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"\n    public override IEnumerable<Func<int>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        dataGeneratorMetadata.TestBuilderContext.Current; // <-- Initial Context for first test\n        \n        yield return () => 1;\n        \n        dataGeneratorMetadata.TestBuilderContext.Current; // <-- This is now a different context object, as we yielded\n        dataGeneratorMetadata.TestBuilderContext.Current; // <-- This is still the same as above because it'll only change on a yield\n        \n        yield return () => 2;\n        \n        dataGeneratorMetadata.TestBuilderContext.Current; // <-- A new object again\n    }\n\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(6540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);