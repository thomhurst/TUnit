"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7684],{1312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"test-lifecycle/test-context","title":"Test Context","description":"All tests have a TestContext object available to them.","source":"@site/docs/test-lifecycle/test-context.md","sourceDirName":"test-lifecycle","slug":"/test-lifecycle/test-context","permalink":"/docs/test-lifecycle/test-context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Event Subscribing","permalink":"/docs/test-lifecycle/event-subscribing"},"next":{"title":"Properties","permalink":"/docs/test-lifecycle/properties"}}');var c=n(4848),o=n(8453);const i={},r="Test Context",l={},a=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"test-context",children:"Test Context"})}),"\n",(0,c.jsxs)(t.p,{children:["All tests have a ",(0,c.jsx)(t.code,{children:"TestContext"})," object available to them."]}),"\n",(0,c.jsxs)(t.p,{children:["This can be accessed statically via ",(0,c.jsx)(t.code,{children:"TestContext.Current"}),"."]}),"\n",(0,c.jsx)(t.p,{children:"Here you can see information about the test, including things like the test name, containing class, custom properties, categories, etc."}),"\n",(0,c.jsxs)(t.p,{children:["This can be useful if you want something like a generic ",(0,c.jsx)(t.code,{children:"AfterEachTest"})," for all tests, but with logic to execute for only certain tests."]}),"\n",(0,c.jsx)(t.p,{children:"e.g."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:'if (TestContext.Current.TestInformation.CustomProperties.ContainsKey("SomeProperty"))\n{\n    // Do something\n}\n'})}),"\n",(0,c.jsxs)(t.p,{children:["The context also has a ",(0,c.jsx)(t.code,{children:"Results"})," object. You'll notice this is nullable. This will be null until you're in the context of a ",(0,c.jsx)(t.code,{children:"AfterEachTest"})," method. That's because the ",(0,c.jsx)(t.code,{children:"Results"})," can only be set after a test has finished."]}),"\n",(0,c.jsx)(t.p,{children:"These results can be handy when you're cleaning up, but maybe only want to do something if a test failed."}),"\n",(0,c.jsx)(t.p,{children:"e.g."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:"if (TestContext.Current?.Result?.Status == Status.Failed)\n{\n    // Take a screenshot?\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(6540);const c={},o=s.createContext(c);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);