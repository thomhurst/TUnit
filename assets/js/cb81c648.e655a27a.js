"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5922],{6371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"test-authoring/aot-compatibility","title":"AOT Compatibility and Generic Tests","description":"TUnit\'s AOT-only mode provides compile-time safety and performance benefits, but requires specific patterns for advanced scenarios like generic tests and complex data sources.","source":"@site/docs/test-authoring/aot-compatibility.md","sourceDirName":"test-authoring","slug":"/test-authoring/aot-compatibility","permalink":"/docs/test-authoring/aot-compatibility","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=t(4848),s=t(8453);const r={},c="AOT Compatibility and Generic Tests",o={},l=[{value:"Generic Test Instantiation",id:"generic-test-instantiation",level:2},{value:"Generic Test Methods",id:"generic-test-methods",level:3},{value:"Generic Test Classes",id:"generic-test-classes",level:3},{value:"AOT-Compatible Data Sources",id:"aot-compatible-data-sources",level:2},{value:"Static Data Sources",id:"static-data-sources",level:3},{value:"Async Data Sources with Cancellation",id:"async-data-sources-with-cancellation",level:3},{value:"Advanced Property Injection",id:"advanced-property-injection",level:2},{value:"Service Provider Integration",id:"service-provider-integration",level:3},{value:"Async Property Initialization",id:"async-property-initialization",level:3},{value:"Compile-Time Diagnostics",id:"compile-time-diagnostics",level:2},{value:"Generic Test Diagnostics",id:"generic-test-diagnostics",level:3},{value:"Data Source Diagnostics",id:"data-source-diagnostics",level:3},{value:"Performance Benefits",id:"performance-benefits",level:2},{value:"Configuration Reference",id:"configuration-reference",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"aot-compatibility-and-generic-tests",children:"AOT Compatibility and Generic Tests"})}),"\n",(0,i.jsx)(n.p,{children:"TUnit's AOT-only mode provides compile-time safety and performance benefits, but requires specific patterns for advanced scenarios like generic tests and complex data sources."}),"\n",(0,i.jsx)(n.h2,{id:"generic-test-instantiation",children:"Generic Test Instantiation"}),"\n",(0,i.jsx)(n.p,{children:"Generic test classes and methods require explicit type instantiation for AOT compatibility."}),"\n",(0,i.jsx)(n.h3,{id:"generic-test-methods",children:"Generic Test Methods"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"[GenerateGenericTest]"})," attribute to specify which type combinations to generate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class GenericTests\n{\n    [Test]\n    [GenerateGenericTest(typeof(int), typeof(string))]\n    [GenerateGenericTest(typeof(long), typeof(bool))]\n    [GenerateGenericTest(typeof(double), typeof(char))]\n    public async Task GenericTestMethod<T1, T2>()\n    {\n        // Test logic using T1 and T2\n        var value1 = default(T1);\n        var value2 = default(T2);\n        \n        await Assert.That(value1).IsNotNull().Or.IsEqualTo(default(T1));\n        await Assert.That(value2).IsNotNull().Or.IsEqualTo(default(T2));\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"generic-test-classes",children:"Generic Test Classes"}),"\n",(0,i.jsxs)(n.p,{children:["Apply ",(0,i.jsx)(n.code,{children:"[GenerateGenericTest]"})," to the class to generate all test methods for specified types:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\n[GenerateGenericTest(typeof(int))]\n[GenerateGenericTest(typeof(string))]\n[GenerateGenericTest(typeof(DateTime))]\npublic class GenericTestClass<T>\n{\n    [Test]\n    public async Task TestDefaultValue()\n    {\n        var defaultValue = default(T);\n        \n        // For reference types, default should be null\n        // For value types, default should be the type\'s default value\n        if (typeof(T).IsValueType)\n        {\n            await Assert.That(defaultValue).IsNotNull();\n        }\n        else\n        {\n            await Assert.That(defaultValue).IsNull();\n        }\n    }\n\n    [Test]\n    [Arguments("test data")]\n    public async Task TestWithGenericAndArguments(string input)\n    {\n        var value = default(T);\n        \n        await Assert.That(input).IsEqualTo("test data");\n        // Can use both generic type T and regular parameters\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"aot-compatible-data-sources",children:"AOT-Compatible Data Sources"}),"\n",(0,i.jsx)(n.h3,{id:"static-data-sources",children:"Static Data Sources"}),"\n",(0,i.jsx)(n.p,{children:"Use static methods and properties for AOT-compatible data sources:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class AotDataSourceTests\n{\n    // Static method data source - AOT compatible\n    [Test]\n    [MethodDataSource(nameof(GetTestData))]\n    public async Task TestWithStaticData(int value, string name)\n    {\n        await Assert.That(value).IsGreaterThan(0);\n        await Assert.That(name).IsNotEmpty();\n    }\n\n    public static IEnumerable<object[]> GetTestData()\n    {\n        yield return new object[] { 1, "first" };\n        yield return new object[] { 2, "second" };\n        yield return new object[] { 3, "third" };\n    }\n\n    // Static property data source - AOT compatible\n    [Test]\n    [MethodDataSource(nameof(PropertyTestData))]\n    public async Task TestWithPropertyData(bool flag, double number)\n    {\n        await Assert.That(flag).IsTrue().Or.IsFalse(); // Either is valid\n        await Assert.That(number).IsGreaterThanOrEqualTo(0.0);\n    }\n\n    public static IEnumerable<object[]> PropertyTestData => new[]\n    {\n        new object[] { true, 1.5 },\n        new object[] { false, 2.7 },\n        new object[] { true, 0.0 }\n    };\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"async-data-sources-with-cancellation",children:"Async Data Sources with Cancellation"}),"\n",(0,i.jsx)(n.p,{children:"AOT mode supports async data sources with proper cancellation token handling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\nusing System.Runtime.CompilerServices;\n\nnamespace MyTestProject;\n\npublic class AsyncDataSourceTests\n{\n    [Test]\n    [MethodDataSource(nameof(GetAsyncTestData))]\n    public async Task TestWithAsyncData(int id, string data)\n    {\n        await Assert.That(id).IsGreaterThan(0);\n        await Assert.That(data).StartsWith("data");\n    }\n\n    public static async IAsyncEnumerable<object[]> GetAsyncTestData(\n        [EnumeratorCancellation] CancellationToken ct = default)\n    {\n        for (int i = 1; i <= 3; i++)\n        {\n            ct.ThrowIfCancellationRequested();\n            \n            // Simulate async work\n            await Task.Delay(10, ct);\n            \n            yield return new object[] { i, $"data_{i}" };\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-property-injection",children:"Advanced Property Injection"}),"\n",(0,i.jsx)(n.h3,{id:"service-provider-integration",children:"Service Provider Integration"}),"\n",(0,i.jsx)(n.p,{children:"AOT mode includes a built-in service provider for dependency injection:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\nusing TUnit.Core.Services;\n\nnamespace MyTestProject;\n\npublic class ServiceInjectionTests\n{\n    [DataSourceForProperty<DatabaseService>(Shared = SharedType.Globally)]\n    public required DatabaseService Database { get; init; }\n\n    [DataSourceForProperty<LoggingService>]\n    public required LoggingService Logger { get; init; }\n\n    [Test]\n    public async Task TestWithInjectedServices()\n    {\n        // Services are automatically injected before test execution\n        await Assert.That(Database).IsNotNull();\n        await Assert.That(Logger).IsNotNull();\n        \n        var result = await Database.QueryAsync("SELECT 1");\n        Logger.Log($"Query result: {result}");\n        \n        await Assert.That(result).IsEqualTo(1);\n    }\n}\n\n// Example service classes\npublic class DatabaseService\n{\n    public async Task<int> QueryAsync(string sql)\n    {\n        await Task.Delay(1); // Simulate async database call\n        return 1;\n    }\n}\n\npublic class LoggingService\n{\n    public void Log(string message)\n    {\n        Console.WriteLine($"[LOG] {message}");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"async-property-initialization",children:"Async Property Initialization"}),"\n",(0,i.jsxs)(n.p,{children:["Properties can implement ",(0,i.jsx)(n.code,{children:"IAsyncInitializable"})," for complex setup:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class AsyncInitializationTests\n{\n    [DataSourceForProperty<AsyncContainer>]\n    public required AsyncContainer Container { get; init; }\n\n    [Test]\n    public async Task TestWithAsyncInitializedProperty()\n    {\n        // Container.InitializeAsync() is called automatically before test\n        await Assert.That(Container.IsInitialized).IsTrue();\n        await Assert.That(Container.ConnectionString).IsNotEmpty();\n    }\n}\n\npublic class AsyncContainer : IAsyncInitializable, IAsyncDisposable\n{\n    public bool IsInitialized { get; private set; }\n    public string ConnectionString { get; private set; } = "";\n\n    public async Task InitializeAsync()\n    {\n        // Simulate async initialization\n        await Task.Delay(10);\n        ConnectionString = "Server=localhost;Database=test";\n        IsInitialized = true;\n    }\n\n    public async ValueTask DisposeAsync()\n    {\n        // Cleanup is called automatically after test\n        await Task.Delay(1);\n        IsInitialized = false;\n        ConnectionString = "";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compile-time-diagnostics",children:"Compile-Time Diagnostics"}),"\n",(0,i.jsx)(n.p,{children:"AOT mode provides helpful compile-time diagnostics for common issues:"}),"\n",(0,i.jsx)(n.h3,{id:"generic-test-diagnostics",children:"Generic Test Diagnostics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"// \u274c This will generate TUnit0058 error\n[Test]\npublic async Task GenericTest<T>() // Missing [GenerateGenericTest]\n{\n    var value = default(T);\n    await Assert.That(value).IsNotNull().Or.IsNull();\n}\n\n// \u2705 Correct usage\n[Test]\n[GenerateGenericTest(typeof(int))]\n[GenerateGenericTest(typeof(string))]\npublic async Task GenericTest<T>()\n{\n    var value = default(T);\n    await Assert.That(value).IsNotNull().Or.IsNull();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"data-source-diagnostics",children:"Data Source Diagnostics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DataSourceDiagnostics\n{\n    // \u274c This will generate TUnit0059 error - dynamic data source\n    [Test]\n    [MethodDataSource(nameof(GetDynamicData))]\n    public async Task TestWithDynamicDataSource(object value)\n    {\n        await Assert.That(value).IsNotNull();\n    }\n\n    public IEnumerable<object[]> GetDynamicData()\n    {\n        // This method uses reflection internally - not AOT compatible\n        return SomeReflectionBasedDataGenerator.GetData();\n    }\n\n    // \u2705 Use static, compile-time known data sources\n    [Test]\n    [MethodDataSource(nameof(GetStaticData))]\n    public async Task TestWithStaticDataSource(string value)\n    {\n        await Assert.That(value).IsNotNull();\n    }\n\n    public static IEnumerable<object[]> GetStaticData()\n    {\n        yield return new object[] { "static1" };\n        yield return new object[] { "static2" };\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-benefits",children:"Performance Benefits"}),"\n",(0,i.jsx)(n.p,{children:"The AOT-only mode provides significant performance improvements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"2-3x faster test execution"})," compared to reflection-based approach"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero runtime type introspection"})," - all types resolved at compile time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal memory allocations"})," through strongly-typed delegates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better code optimization"})," from the compiler and runtime"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-reference",children:"Configuration Reference"}),"\n",(0,i.jsxs)(n.p,{children:["Configure AOT behavior through your ",(0,i.jsx)(n.code,{children:".editorconfig"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ini",children:"# TUnit AOT Configuration\ntunit.aot_only_mode = true              # Enable AOT-only mode (default: true)\ntunit.generic_depth_limit = 5           # Max generic nesting depth (default: 5)  \ntunit.enable_property_injection = true  # Enable property DI (default: true)\ntunit.enable_valuetask_hooks = true     # Enable ValueTask hooks (default: true)\ntunit.enable_verbose_diagnostics = false # Verbose diagnostics (default: false)\ntunit.max_generic_instantiations = 10   # Max generic instantiations (default: 10)\ntunit.enable_auto_generic_discovery = true # Auto-discover generics (default: true)\n"})}),"\n",(0,i.jsx)(n.p,{children:"These settings help balance compilation time, binary size, and functionality based on your project's needs."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);