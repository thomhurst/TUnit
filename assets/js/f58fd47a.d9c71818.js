"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6194],{636:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"parallelism/parallel-groups","title":"Parallel Groups","description":"Parallel Groups are an alternative parallel mechanism to [NotInParallel].","source":"@site/docs/parallelism/parallel-groups.md","sourceDirName":"parallelism","slug":"/parallelism/parallel-groups","permalink":"/docs/parallelism/parallel-groups","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Not in Parallel","permalink":"/docs/parallelism/not-in-parallel"},"next":{"title":"Parallel Limiter","permalink":"/docs/parallelism/parallel-limiter"}}');var s=n(4848),t=n(8453);const r={},o="Parallel Groups",c={},i=[];function p(e){const l={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.header,{children:(0,s.jsx)(l.h1,{id:"parallel-groups",children:"Parallel Groups"})}),"\n",(0,s.jsx)(l.p,{children:"Parallel Groups are an alternative parallel mechanism to [NotInParallel]."}),"\n",(0,s.jsx)(l.p,{children:'Instead, classes that share a [ParallelGroup("")] attribute with the same key, may all run together in parallel, and nothing else will run alongside them.'}),"\n",(0,s.jsxs)(l.p,{children:["For the example below, all ",(0,s.jsx)(l.code,{children:"MyTestClass"})," tests may run in parallel, and all ",(0,s.jsx)(l.code,{children:"MyTestClass2"})," tests may run in parallel. But they should not overlap and execute both classes at the same time."]}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\n[ParallelGroup("Group1")]\npublic class MyTestClass\n{\n    [Test]\n    public async Task MyTest()\n    {\n        \n    }\n\n    [Test]\n    public async Task MyTest2()\n    {\n        \n    }\n\n    [Test]\n    public async Task MyTest3()\n    {\n        \n    }\n}\n\n[ParallelGroup("Group2")]\npublic class MyTestClass2\n{\n    [Test]\n    public async Task MyTest()\n    {\n        \n    }\n\n    [Test]\n    public async Task MyTest2()\n    {\n        \n    }\n\n    [Test]\n    public async Task MyTest3()\n    {\n        \n    }\n}\n'})})]})}function u(e={}){const{wrapper:l}={...(0,t.R)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,l,n)=>{n.d(l,{R:()=>r,x:()=>o});var a=n(6540);const s={},t=a.createContext(s);function r(e){const l=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function o(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(t.Provider,{value:l},e.children)}}}]);