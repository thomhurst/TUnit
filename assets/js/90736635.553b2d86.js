"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6598],{1851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"examples/tunit-ci-pipline","title":"TUnit in CI pipelines","description":"When using TUnit for end-to-end (E2E) tests or TUnit\'s Playwright library for UI testing, you will likely run these tests in a CI/CD pipeline\u2014either on a schedule or as part of a release. In such cases, it is important to publish the test results for visibility and reporting.","source":"@site/docs/examples/tunit-ci-pipline.md","sourceDirName":"examples","slug":"/examples/tunit-ci-pipline","permalink":"/docs/examples/tunit-ci-pipline","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Instrumenting: Global Test IDs","permalink":"/docs/examples/instrumenting_global_test_ids"},"next":{"title":"Experimental","permalink":"/docs/category/experimental"}}');var i=n(4848),r=n(8453);const o={sidebar_position:4},l="TUnit in CI pipelines",a={},c=[];function p(e){const t={blockquote:"blockquote",br:"br",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"tunit-in-ci-pipelines",children:"TUnit in CI pipelines"})}),"\n",(0,i.jsx)(t.p,{children:"When using TUnit for end-to-end (E2E) tests or TUnit's Playwright library for UI testing, you will likely run these tests in a CI/CD pipeline\u2014either on a schedule or as part of a release. In such cases, it is important to publish the test results for visibility and reporting."}),"\n",(0,i.jsx)(t.p,{children:"The best practice is to use the .NET SDK CLI (dotnet test) directly to maintain full control over execution, ensure reproducibility across environments, and allow for local debugging."}),"\n",(0,i.jsx)(t.p,{children:"Below is an example of how to execute and publish TUnit test results to Azure DevOps Test Runs."}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Note: The -- separator is required to pass arguments to the test runner."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"steps:\n  - script: dotnet test --configuration Release -- --report-trx --results-directory $(Agent.TempDirectory)\n    displayName: 'Run tests and output .trx file'\n    continueOnError: true\n\n  - task: PublishTestResults@2\n    displayName: 'Publish Test Results from *.trx files'\n    inputs:\n      testResultsFormat: VSTest\n      testResultsFiles: '*.trx'\n      searchFolder: '$(Agent.TempDirectory)'\n      failTaskOnFailedTests: true\n      failTaskOnMissingResultsFile: true\n"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Best Practice:",(0,i.jsx)(t.br,{}),"\n","For efficiency and clearity in failures, separate restore, build, and test into distinct steps.",(0,i.jsx)(t.br,{}),"\n",'A common approach is to perform restore and build in a "build pipeline", then execute tests using --no-build in a separate "test pipeline" to avoid redundant compilation and improve performance.']}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);