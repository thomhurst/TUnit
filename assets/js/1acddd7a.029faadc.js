"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2724],{327:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"migration/xunit","title":"Migrating from xUnit.net","description":"Using TUnit\'s Code Fixers","source":"@site/docs/migration/xunit.md","sourceDirName":"migration","slug":"/migration/xunit","permalink":"/docs/migration/xunit","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"TestContext Interface Organization Migration Guide","permalink":"/docs/migration/testcontext-interface-organization"},"next":{"title":"Migrating from NUnit","permalink":"/docs/migration/nunit"}}');var i=s(4848),r=s(8453);const a={},l="Migrating from xUnit.net",c={},o=[{value:"Using TUnit&#39;s Code Fixers",id:"using-tunits-code-fixers",level:2},{value:"Steps",id:"steps",level:3},{value:"Install the TUnit packages to your test projects",id:"install-the-tunit-packages-to-your-test-projects",level:4},{value:"Remove the automatically added global usings",id:"remove-the-automatically-added-global-usings",level:4},{value:"Rebuild the project",id:"rebuild-the-project",level:4},{value:"Run the code fixer via the dotnet CLI",id:"run-the-code-fixer-via-the-dotnet-cli",level:4},{value:"Revert step <code>Remove the automatically added global usings</code>",id:"revert-step-remove-the-automatically-added-global-usings",level:4},{value:"Perform any manual bits that are still necessary",id:"perform-any-manual-bits-that-are-still-necessary",level:4},{value:"Remove the xUnit packages",id:"remove-the-xunit-packages",level:4},{value:"Done! (Hopefully)",id:"done-hopefully",level:4},{value:"Manual Migration Guide",id:"manual-migration-guide",level:2},{value:"Basic Test Structure",id:"basic-test-structure",level:3},{value:"Simple Test (Fact \u2192 Test)",id:"simple-test-fact--test",level:4},{value:"Parameterized Tests",id:"parameterized-tests",level:3},{value:"Theory with InlineData \u2192 Arguments",id:"theory-with-inlinedata--arguments",level:4},{value:"Data Sources",id:"data-sources",level:3},{value:"MemberData \u2192 MethodDataSource",id:"memberdata--methoddatasource",level:4},{value:"ClassData \u2192 MethodDataSource",id:"classdata--methoddatasource",level:4},{value:"Setup and Teardown",id:"setup-and-teardown",level:3},{value:"Constructor and IDisposable \u2192 Before/After Hooks",id:"constructor-and-idisposable--beforeafter-hooks",level:4},{value:"IAsyncLifetime \u2192 Before/After Hooks",id:"iasynclifetime--beforeafter-hooks",level:4},{value:"Shared Context and Fixtures",id:"shared-context-and-fixtures",level:3},{value:"IClassFixture \u2192 ClassDataSource",id:"iclassfixture--classdatasource",level:4},{value:"Collection Fixtures \u2192 Shared ClassDataSource",id:"collection-fixtures--shared-classdatasource",level:4},{value:"Assembly Fixture \u2192 ClassDataSource with PerAssembly",id:"assembly-fixture--classdatasource-with-perassembly",level:4},{value:"Test Output",id:"test-output",level:3},{value:"ITestOutputHelper \u2192 TestContext",id:"itestoutputhelper--testcontext",level:4},{value:"Traits and Categories",id:"traits-and-categories",level:3},{value:"Trait \u2192 Property",id:"trait--property",level:4},{value:"Assertions",id:"assertions",level:3},{value:"Basic Assertions",id:"basic-assertions",level:4},{value:"Collection Assertions",id:"collection-assertions",level:4},{value:"String Assertions",id:"string-assertions",level:4},{value:"Exception Assertions",id:"exception-assertions",level:4},{value:"Complete Example: Real-World Test Class",id:"complete-example-real-world-test-class",level:3},{value:"Quick Reference",id:"quick-reference",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"migrating-from-xunitnet",children:"Migrating from xUnit.net"})}),"\n",(0,i.jsx)(n.h2,{id:"using-tunits-code-fixers",children:"Using TUnit's Code Fixers"}),"\n",(0,i.jsx)(n.p,{children:"TUnit has some code fixers to help automate some of the migration for you."}),"\n",(0,i.jsx)(n.p,{children:"Now bear in mind, these won't be perfect, and you'll likely still have to do some bits manually, but it should make life a bit easier."}),"\n",(0,i.jsx)(n.p,{children:"If you think something could be improved, or something seemed to break, raise an issue so we can make this better and work for more people."}),"\n",(0,i.jsx)(n.h3,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(n.h4,{id:"install-the-tunit-packages-to-your-test-projects",children:"Install the TUnit packages to your test projects"}),"\n",(0,i.jsx)(n.p,{children:"Use your IDE or the dotnet CLI to add the TUnit packages to your test projects"}),"\n",(0,i.jsx)(n.h4,{id:"remove-the-automatically-added-global-usings",children:"Remove the automatically added global usings"}),"\n",(0,i.jsx)(n.p,{children:"In your csproj add:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"    <PropertyGroup>\n        <TUnitImplicitUsings>false</TUnitImplicitUsings>\n        <TUnitAssertionsImplicitUsings>false</TUnitAssertionsImplicitUsings>\n    </PropertyGroup>\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is temporary - Just to make sure no types clash, and so the code fixers can distinguish between xUnit and TUnit types with similar names."}),"\n",(0,i.jsx)(n.h4,{id:"rebuild-the-project",children:"Rebuild the project"}),"\n",(0,i.jsx)(n.p,{children:"This ensures the TUnit packages have been restored and the analyzers should be loaded."}),"\n",(0,i.jsx)(n.h4,{id:"run-the-code-fixer-via-the-dotnet-cli",children:"Run the code fixer via the dotnet CLI"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"dotnet format analyzers --severity info --diagnostics TUXU0001"})}),"\n",(0,i.jsxs)(n.h4,{id:"revert-step-remove-the-automatically-added-global-usings",children:["Revert step ",(0,i.jsx)(n.code,{children:"Remove the automatically added global usings"})]}),"\n",(0,i.jsx)(n.h4,{id:"perform-any-manual-bits-that-are-still-necessary",children:"Perform any manual bits that are still necessary"}),"\n",(0,i.jsx)(n.p,{children:"This bit's on you! You'll have to work out what still needs doing.\nRaise an issue if you think it could be automated."}),"\n",(0,i.jsx)(n.h4,{id:"remove-the-xunit-packages",children:"Remove the xUnit packages"}),"\n",(0,i.jsx)(n.p,{children:"Simply uninstall them once you've migrated"}),"\n",(0,i.jsx)(n.h4,{id:"done-hopefully",children:"Done! (Hopefully)"}),"\n",(0,i.jsx)(n.h2,{id:"manual-migration-guide",children:"Manual Migration Guide"}),"\n",(0,i.jsx)(n.h3,{id:"basic-test-structure",children:"Basic Test Structure"}),"\n",(0,i.jsx)(n.h4,{id:"simple-test-fact--test",children:"Simple Test (Fact \u2192 Test)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CalculatorTests\n{\n    [Fact]\n    public void Add_TwoNumbers_ReturnsSum()\n    {\n        var calculator = new Calculator();\n        var result = calculator.Add(2, 3);\n        Assert.Equal(5, result);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class CalculatorTests\n{\n    [Test]\n    public async Task Add_TwoNumbers_ReturnsSum()\n    {\n        var calculator = new Calculator();\n        var result = calculator.Add(2, 3);\n        await Assert.That(result).IsEqualTo(5);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[Fact]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[Test]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Test method returns ",(0,i.jsx)(n.code,{children:"async Task"})]}),"\n",(0,i.jsxs)(n.li,{children:["Assertions use fluent syntax with ",(0,i.jsx)(n.code,{children:"await Assert.That(...)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"parameterized-tests",children:"Parameterized Tests"}),"\n",(0,i.jsx)(n.h4,{id:"theory-with-inlinedata--arguments",children:"Theory with InlineData \u2192 Arguments"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class StringTests\n{\n    [Theory]\n    [InlineData("hello", 5)]\n    [InlineData("world", 5)]\n    [InlineData("", 0)]\n    public void Length_ReturnsCorrectValue(string input, int expectedLength)\n    {\n        Assert.Equal(expectedLength, input.Length);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class StringTests\n{\n    [Test]\n    [Arguments("hello", 5)]\n    [Arguments("world", 5)]\n    [Arguments("", 0)]\n    public async Task Length_ReturnsCorrectValue(string input, int expectedLength)\n    {\n        await Assert.That(input.Length).IsEqualTo(expectedLength);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[Theory]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[Test]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[InlineData(...)]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[Arguments(...)]"})]}),"\n",(0,i.jsx)(n.li,{children:"Method is async and assertions are awaited"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-sources",children:"Data Sources"}),"\n",(0,i.jsx)(n.h4,{id:"memberdata--methoddatasource",children:"MemberData \u2192 MethodDataSource"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DataDrivenTests\n{\n    [Theory]\n    [MemberData(nameof(GetTestData))]\n    public void ProcessData_WithVariousInputs(int value, string text, bool expected)\n    {\n        var result = SomeLogic(value, text);\n        Assert.Equal(expected, result);\n    }\n\n    public static IEnumerable<object[]> GetTestData()\n    {\n        yield return new object[] { 1, "test", true };\n        yield return new object[] { 2, "demo", false };\n        yield return new object[] { 3, "example", true };\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DataDrivenTests\n{\n    [Test]\n    [MethodDataSource(nameof(GetTestData))]\n    public async Task ProcessData_WithVariousInputs(int value, string text, bool expected)\n    {\n        var result = SomeLogic(value, text);\n        await Assert.That(result).IsEqualTo(expected);\n    }\n\n    public static IEnumerable<(int value, string text, bool expected)> GetTestData()\n    {\n        yield return (1, "test", true);\n        yield return (2, "demo", false);\n        yield return (3, "example", true);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[MemberData(nameof(...))]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[MethodDataSource(nameof(...))]"})]}),"\n",(0,i.jsxs)(n.li,{children:["Data source returns tuples instead of ",(0,i.jsx)(n.code,{children:"object[]"})," (strongly typed)"]}),"\n",(0,i.jsx)(n.li,{children:"No need for boxing/unboxing values"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"classdata--methoddatasource",children:"ClassData \u2192 MethodDataSource"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class TestDataGenerator : IEnumerable<object[]>\n{\n    public IEnumerator<object[]> GetEnumerator()\n    {\n        yield return new object[] { 1, "one" };\n        yield return new object[] { 2, "two" };\n    }\n\n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}\n\npublic class MyTests\n{\n    [Theory]\n    [ClassData(typeof(TestDataGenerator))]\n    public void TestWithClassData(int number, string text)\n    {\n        Assert.NotNull(text);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class MyTests\n{\n    [Test]\n    [MethodDataSource(nameof(TestDataGenerator.GetTestData))]\n    public async Task TestWithClassData(int number, string text)\n    {\n        await Assert.That(text).IsNotNull();\n    }\n}\n\npublic class TestDataGenerator\n{\n    public static IEnumerable<(int, string)> GetTestData()\n    {\n        yield return (1, "one");\n        yield return (2, "two");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[ClassData(typeof(...))]"})," \u2192 ",(0,i.jsx)(n.code,{children:"[MethodDataSource(nameof(ClassName.MethodName))]"})]}),"\n",(0,i.jsx)(n.li,{children:"Point to a static method rather than implementing IEnumerable"}),"\n",(0,i.jsx)(n.li,{children:"Use tuples for type safety"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"setup-and-teardown",children:"Setup and Teardown"}),"\n",(0,i.jsx)(n.h4,{id:"constructor-and-idisposable--beforeafter-hooks",children:"Constructor and IDisposable \u2192 Before/After Hooks"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseTests : IDisposable\n{\n    private readonly DatabaseConnection _connection;\n\n    public DatabaseTests()\n    {\n        _connection = new DatabaseConnection();\n        _connection.Open();\n    }\n\n    [Fact]\n    public void Query_ReturnsData()\n    {\n        var result = _connection.Query("SELECT * FROM Users");\n        Assert.NotNull(result);\n    }\n\n    public void Dispose()\n    {\n        _connection?.Close();\n        _connection?.Dispose();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent (Option 1: Using IDisposable):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseTests : IDisposable\n{\n    private DatabaseConnection _connection = null!;\n\n    public DatabaseTests()\n    {\n        _connection = new DatabaseConnection();\n        _connection.Open();\n    }\n\n    [Test]\n    public async Task Query_ReturnsData()\n    {\n        var result = _connection.Query("SELECT * FROM Users");\n        await Assert.That(result).IsNotNull();\n    }\n\n    public void Dispose()\n    {\n        _connection?.Close();\n        _connection?.Dispose();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent (Option 2: Using Hooks):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseTests\n{\n    private DatabaseConnection _connection = null!;\n\n    [Before(Test)]\n    public async Task Setup()\n    {\n        _connection = new DatabaseConnection();\n        await _connection.OpenAsync();\n    }\n\n    [Test]\n    public async Task Query_ReturnsData()\n    {\n        var result = _connection.Query("SELECT * FROM Users");\n        await Assert.That(result).IsNotNull();\n    }\n\n    [After(Test)]\n    public async Task Cleanup()\n    {\n        if (_connection != null)\n        {\n            await _connection.CloseAsync();\n            _connection.Dispose();\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Constructor setup can remain, or use ",(0,i.jsx)(n.code,{children:"[Before(Test)]"})]}),"\n",(0,i.jsxs)(n.li,{children:["IDisposable can remain, or use ",(0,i.jsx)(n.code,{children:"[After(Test)]"})]}),"\n",(0,i.jsx)(n.li,{children:"Hooks support async operations natively"}),"\n",(0,i.jsxs)(n.li,{children:["Multiple ",(0,i.jsx)(n.code,{children:"[After(Test)]"})," methods are guaranteed to run even if one fails"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"iasynclifetime--beforeafter-hooks",children:"IAsyncLifetime \u2192 Before/After Hooks"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class AsyncSetupTests : IAsyncLifetime\n{\n    private HttpClient _client = null!;\n\n    public async Task InitializeAsync()\n    {\n        _client = new HttpClient();\n        await _client.GetAsync("https://api.example.com/warm-up");\n    }\n\n    [Fact]\n    public async Task FetchData_ReturnsSuccess()\n    {\n        var response = await _client.GetAsync("https://api.example.com/data");\n        Assert.True(response.IsSuccessStatusCode);\n    }\n\n    public async Task DisposeAsync()\n    {\n        _client?.Dispose();\n        await Task.CompletedTask;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class AsyncSetupTests\n{\n    private HttpClient _client = null!;\n\n    [Before(Test)]\n    public async Task Setup()\n    {\n        _client = new HttpClient();\n        await _client.GetAsync("https://api.example.com/warm-up");\n    }\n\n    [Test]\n    public async Task FetchData_ReturnsSuccess()\n    {\n        var response = await _client.GetAsync("https://api.example.com/data");\n        await Assert.That(response.IsSuccessStatusCode).IsTrue();\n    }\n\n    [After(Test)]\n    public async Task Cleanup()\n    {\n        _client?.Dispose();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IAsyncLifetime.InitializeAsync()"})," \u2192 ",(0,i.jsx)(n.code,{children:"[Before(Test)]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IAsyncLifetime.DisposeAsync()"})," \u2192 ",(0,i.jsx)(n.code,{children:"[After(Test)]"})]}),"\n",(0,i.jsx)(n.li,{children:"More explicit and easier to understand at a glance"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"shared-context-and-fixtures",children:"Shared Context and Fixtures"}),"\n",(0,i.jsx)(n.h4,{id:"iclassfixture--classdatasource",children:"IClassFixture \u2192 ClassDataSource"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class DatabaseFixture : IDisposable\n{\n    public DatabaseConnection Connection { get; }\n\n    public DatabaseFixture()\n    {\n        Connection = new DatabaseConnection();\n        Connection.Open();\n    }\n\n    public void Dispose()\n    {\n        Connection?.Close();\n        Connection?.Dispose();\n    }\n}\n\npublic class UserRepositoryTests : IClassFixture<DatabaseFixture>\n{\n    private readonly DatabaseFixture _fixture;\n\n    public UserRepositoryTests(DatabaseFixture fixture)\n    {\n        _fixture = fixture;\n    }\n\n    [Fact]\n    public void GetUser_ReturnsUser()\n    {\n        var repo = new UserRepository(_fixture.Connection);\n        var user = repo.GetUser(1);\n        Assert.NotNull(user);\n    }\n\n    [Fact]\n    public void GetAllUsers_ReturnsUsers()\n    {\n        var repo = new UserRepository(_fixture.Connection);\n        var users = repo.GetAllUsers();\n        Assert.NotEmpty(users);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class DatabaseFixture : IDisposable\n{\n    public DatabaseConnection Connection { get; }\n\n    public DatabaseFixture()\n    {\n        Connection = new DatabaseConnection();\n        Connection.Open();\n    }\n\n    public void Dispose()\n    {\n        Connection?.Close();\n        Connection?.Dispose();\n    }\n}\n\n[ClassDataSource<DatabaseFixture>(Shared = SharedType.PerClass)]\npublic class UserRepositoryTests(DatabaseFixture fixture)\n{\n    [Test]\n    public async Task GetUser_ReturnsUser()\n    {\n        var repo = new UserRepository(fixture.Connection);\n        var user = repo.GetUser(1);\n        await Assert.That(user).IsNotNull();\n    }\n\n    [Test]\n    public async Task GetAllUsers_ReturnsUsers()\n    {\n        var repo = new UserRepository(fixture.Connection);\n        var users = repo.GetAllUsers();\n        await Assert.That(users).IsNotEmpty();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"IClassFixture<T>"})," interface \u2192 ",(0,i.jsx)(n.code,{children:"[ClassDataSource<T>(Shared = SharedType.PerClass)]"})," attribute"]}),"\n",(0,i.jsx)(n.li,{children:"Fixture injected via primary constructor"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Shared = SharedType.PerClass"})," ensures one instance per test class"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"collection-fixtures--shared-classdatasource",children:"Collection Fixtures \u2192 Shared ClassDataSource"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[CollectionDefinition("Database collection")]\npublic class DatabaseCollection : ICollectionFixture<DatabaseFixture>\n{\n}\n\npublic class DatabaseFixture : IDisposable\n{\n    public DatabaseConnection Connection { get; }\n\n    public DatabaseFixture()\n    {\n        Connection = new DatabaseConnection();\n        Connection.Open();\n    }\n\n    public void Dispose() => Connection?.Dispose();\n}\n\n[Collection("Database collection")]\npublic class UserTests : IClassFixture<DatabaseFixture>\n{\n    private readonly DatabaseFixture _fixture;\n\n    public UserTests(DatabaseFixture fixture)\n    {\n        _fixture = fixture;\n    }\n\n    [Fact]\n    public void CreateUser_Succeeds()\n    {\n        // Test using _fixture.Connection\n    }\n}\n\n[Collection("Database collection")]\npublic class ProductTests : IClassFixture<DatabaseFixture>\n{\n    private readonly DatabaseFixture _fixture;\n\n    public ProductTests(DatabaseFixture fixture)\n    {\n        _fixture = fixture;\n    }\n\n    [Fact]\n    public void CreateProduct_Succeeds()\n    {\n        // Test using _fixture.Connection\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class DatabaseFixture : IDisposable\n{\n    public DatabaseConnection Connection { get; }\n\n    public DatabaseFixture()\n    {\n        Connection = new DatabaseConnection();\n        Connection.Open();\n    }\n\n    public void Dispose() => Connection?.Dispose();\n}\n\n[ClassDataSource<DatabaseFixture>(Shared = SharedType.Keyed, Key = "DatabaseCollection")]\npublic class UserTests(DatabaseFixture fixture)\n{\n    [Test]\n    public async Task CreateUser_Succeeds()\n    {\n        // Test using fixture.Connection\n    }\n}\n\n[ClassDataSource<DatabaseFixture>(Shared = SharedType.Keyed, Key = "DatabaseCollection")]\npublic class ProductTests(DatabaseFixture fixture)\n{\n    [Test]\n    public async Task CreateProduct_Succeeds()\n    {\n        // Test using fixture.Connection\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'[Collection("name")]'})," \u2192 ",(0,i.jsx)(n.code,{children:'[ClassDataSource<T>(Shared = SharedType.Keyed, Key = "name")]'})]}),"\n",(0,i.jsx)(n.li,{children:"No need for CollectionDefinition class"}),"\n",(0,i.jsx)(n.li,{children:"All classes with same Key share the fixture instance"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"assembly-fixture--classdatasource-with-perassembly",children:"Assembly Fixture \u2192 ClassDataSource with PerAssembly"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit doesn't have native assembly fixtures, but TUnit does:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class ApplicationFixture : IDisposable\n{\n    public IServiceProvider ServiceProvider { get; }\n\n    public ApplicationFixture()\n    {\n        // Setup once for entire assembly\n        ServiceProvider = ConfigureServices();\n    }\n\n    public void Dispose()\n    {\n        // Cleanup once after all tests\n    }\n}\n\n[ClassDataSource<ApplicationFixture>(Shared = SharedType.PerAssembly)]\npublic class IntegrationTests(ApplicationFixture fixture)\n{\n    [Test]\n    public async Task Test1()\n    {\n        var service = fixture.ServiceProvider.GetService<IMyService>();\n        await Assert.That(service).IsNotNull();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-output",children:"Test Output"}),"\n",(0,i.jsx)(n.h4,{id:"itestoutputhelper--testcontext",children:"ITestOutputHelper \u2192 TestContext"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class LoggingTests\n{\n    private readonly ITestOutputHelper _output;\n\n    public LoggingTests(ITestOutputHelper output)\n    {\n        _output = output;\n    }\n\n    [Fact]\n    public void Test_WithLogging()\n    {\n        _output.WriteLine("Starting test");\n\n        var result = PerformOperation();\n\n        _output.WriteLine($"Result: {result}");\n        Assert.True(result > 0);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class LoggingTests\n{\n    [Test]\n    public async Task Test_WithLogging(TestContext context)\n    {\n        context.OutputWriter.WriteLine("Starting test");\n\n        var result = PerformOperation();\n\n        context.OutputWriter.WriteLine($"Result: {result}");\n        await Assert.That(result).IsGreaterThan(0);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ITestOutputHelper"})," injected in constructor \u2192 ",(0,i.jsx)(n.code,{children:"TestContext"})," injected as method parameter"]}),"\n",(0,i.jsxs)(n.li,{children:["Access output via ",(0,i.jsx)(n.code,{children:"context.OutputWriter.WriteLine()"})]}),"\n",(0,i.jsx)(n.li,{children:"TestContext provides additional test metadata"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"traits-and-categories",children:"Traits and Categories"}),"\n",(0,i.jsx)(n.h4,{id:"trait--property",children:"Trait \u2192 Property"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class FeatureTests\n{\n    [Fact]\n    [Trait("Category", "Integration")]\n    [Trait("Priority", "High")]\n    public void ImportantIntegrationTest()\n    {\n        // Test implementation\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class FeatureTests\n{\n    [Test]\n    [Property("Category", "Integration")]\n    [Property("Priority", "High")]\n    public async Task ImportantIntegrationTest()\n    {\n        // Test implementation\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'[Trait("key", "value")]'})," \u2192 ",(0,i.jsx)(n.code,{children:'[Property("key", "value")]'})]}),"\n",(0,i.jsxs)(n.li,{children:["Can be used for filtering: ",(0,i.jsx)(n.code,{children:'--treenode-filter "/*/*/*/*[Category=Integration]"'})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"assertions",children:"Assertions"}),"\n",(0,i.jsx)(n.h4,{id:"basic-assertions",children:"Basic Assertions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Fact]\npublic void Assertions_Examples()\n{\n    Assert.Equal(5, 2 + 3);\n    Assert.NotEqual(5, 2 + 2);\n    Assert.True(5 > 3);\n    Assert.False(5 < 3);\n    Assert.Null(null);\n    Assert.NotNull("value");\n    Assert.Same(obj1, obj2);\n    Assert.NotSame(obj1, obj3);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Assertions_Examples()\n{\n    await Assert.That(2 + 3).IsEqualTo(5);\n    await Assert.That(2 + 2).IsNotEqualTo(5);\n    await Assert.That(5 > 3).IsTrue();\n    await Assert.That(5 < 3).IsFalse();\n    await Assert.That((object?)null).IsNull();\n    await Assert.That("value").IsNotNull();\n    await Assert.That(obj1).IsSameReference(obj2);\n    await Assert.That(obj1).IsNotSameReference(obj3);\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"collection-assertions",children:"Collection Assertions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Fact]\npublic void Collection_Assertions()\n{\n    var list = new[] { 1, 2, 3 };\n\n    Assert.Contains(2, list);\n    Assert.DoesNotContain(5, list);\n    Assert.Empty(Array.Empty<int>());\n    Assert.NotEmpty(list);\n    Assert.Equal(3, list.Length);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Assertions()\n{\n    var list = new[] { 1, 2, 3 };\n\n    await Assert.That(list).Contains(2);\n    await Assert.That(list).DoesNotContain(5);\n    await Assert.That(Array.Empty<int>()).IsEmpty();\n    await Assert.That(list).IsNotEmpty();\n    await Assert.That(list).HasCount().EqualTo(3);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"string-assertions",children:"String Assertions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Fact]\npublic void String_Assertions()\n{\n    var text = "Hello, World!";\n\n    Assert.Contains("World", text);\n    Assert.DoesNotContain("xyz", text);\n    Assert.StartsWith("Hello", text);\n    Assert.EndsWith("!", text);\n    Assert.Matches(@"H\\w+", text);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task String_Assertions()\n{\n    var text = "Hello, World!";\n\n    await Assert.That(text).Contains("World");\n    await Assert.That(text).DoesNotContain("xyz");\n    await Assert.That(text).StartsWith("Hello");\n    await Assert.That(text).EndsWith("!");\n    await Assert.That(text).Matches(@"H\\w+");\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"exception-assertions",children:"Exception Assertions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Fact]\npublic void Exception_Assertions()\n{\n    Assert.Throws<ArgumentException>(() => ThrowsException());\n\n    var ex = Assert.Throws<ArgumentException>(() => ThrowsException());\n    Assert.Equal("paramName", ex.ParamName);\n}\n\n[Fact]\npublic async Task Async_Exception_Assertions()\n{\n    await Assert.ThrowsAsync<InvalidOperationException>(() => ThrowsExceptionAsync());\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Exception_Assertions()\n{\n    await Assert.ThrowsAsync<ArgumentException>(() => ThrowsException());\n\n    var ex = await Assert.ThrowsAsync<ArgumentException>(() => ThrowsException());\n    await Assert.That(ex.ParamName).IsEqualTo("paramName");\n}\n\n[Test]\npublic async Task Async_Exception_Assertions()\n{\n    await Assert.ThrowsAsync<InvalidOperationException>(() => ThrowsExceptionAsync());\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Changes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Both sync and async use ",(0,i.jsx)(n.code,{children:"Assert.ThrowsAsync"})," in TUnit"]}),"\n",(0,i.jsx)(n.li,{children:"Returned exception can be further asserted on"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"complete-example-real-world-test-class",children:"Complete Example: Real-World Test Class"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"xUnit Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class UserServiceTests : IClassFixture<DatabaseFixture>, IAsyncLifetime\n{\n    private readonly DatabaseFixture _dbFixture;\n    private readonly ITestOutputHelper _output;\n    private UserService _userService = null!;\n\n    public UserServiceTests(DatabaseFixture dbFixture, ITestOutputHelper output)\n    {\n        _dbFixture = dbFixture;\n        _output = output;\n    }\n\n    public async Task InitializeAsync()\n    {\n        _userService = new UserService(_dbFixture.Connection);\n        await _userService.InitializeAsync();\n    }\n\n    public Task DisposeAsync() => Task.CompletedTask;\n\n    [Theory]\n    [InlineData("john@example.com", "John")]\n    [InlineData("jane@example.com", "Jane")]\n    public async Task CreateUser_WithValidData_Succeeds(string email, string name)\n    {\n        _output.WriteLine($"Creating user: {name}");\n\n        var user = await _userService.CreateUserAsync(email, name);\n\n        Assert.NotNull(user);\n        Assert.Equal(email, user.Email);\n        Assert.Equal(name, user.Name);\n\n        _output.WriteLine($"User created with ID: {user.Id}");\n    }\n\n    [Fact]\n    public async Task GetUser_WhenNotFound_ThrowsException()\n    {\n        await Assert.ThrowsAsync<UserNotFoundException>(\n            () => _userService.GetUserAsync(99999));\n    }\n\n    [Theory]\n    [MemberData(nameof(GetInvalidEmails))]\n    public async Task CreateUser_WithInvalidEmail_ThrowsException(string invalidEmail)\n    {\n        await Assert.ThrowsAsync<ArgumentException>(\n            () => _userService.CreateUserAsync(invalidEmail, "Test"));\n    }\n\n    public static IEnumerable<object[]> GetInvalidEmails()\n    {\n        yield return new object[] { "" };\n        yield return new object[] { "not-an-email" };\n        yield return new object[] { "@example.com" };\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"TUnit Equivalent:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[ClassDataSource<DatabaseFixture>(Shared = SharedType.PerClass)]\npublic class UserServiceTests(DatabaseFixture dbFixture)\n{\n    private UserService _userService = null!;\n\n    [Before(Test)]\n    public async Task Setup()\n    {\n        _userService = new UserService(dbFixture.Connection);\n        await _userService.InitializeAsync();\n    }\n\n    [Test]\n    [Arguments("john@example.com", "John")]\n    [Arguments("jane@example.com", "Jane")]\n    public async Task CreateUser_WithValidData_Succeeds(string email, string name, TestContext context)\n    {\n        context.OutputWriter.WriteLine($"Creating user: {name}");\n\n        var user = await _userService.CreateUserAsync(email, name);\n\n        await Assert.That(user).IsNotNull();\n        await Assert.That(user.Email).IsEqualTo(email);\n        await Assert.That(user.Name).IsEqualTo(name);\n\n        context.OutputWriter.WriteLine($"User created with ID: {user.Id}");\n    }\n\n    [Test]\n    public async Task GetUser_WhenNotFound_ThrowsException()\n    {\n        await Assert.ThrowsAsync<UserNotFoundException>(\n            () => _userService.GetUserAsync(99999));\n    }\n\n    [Test]\n    [MethodDataSource(nameof(GetInvalidEmails))]\n    public async Task CreateUser_WithInvalidEmail_ThrowsException(string invalidEmail)\n    {\n        await Assert.ThrowsAsync<ArgumentException>(\n            () => _userService.CreateUserAsync(invalidEmail, "Test"));\n    }\n\n    public static IEnumerable<string> GetInvalidEmails()\n    {\n        yield return "";\n        yield return "not-an-email";\n        yield return "@example.com";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Differences Summary:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Class-level fixtures use attributes instead of interfaces"}),"\n",(0,i.jsxs)(n.li,{children:["Setup/teardown use ",(0,i.jsx)(n.code,{children:"[Before]"}),"/",(0,i.jsx)(n.code,{children:"[After]"})," attributes instead of IAsyncLifetime"]}),"\n",(0,i.jsx)(n.li,{children:"Primary constructor for fixture injection"}),"\n",(0,i.jsx)(n.li,{children:"TestContext injected as method parameter when needed"}),"\n",(0,i.jsx)(n.li,{children:"All tests are async by default"}),"\n",(0,i.jsx)(n.li,{children:"Data sources return strongly-typed values (not object[])"}),"\n",(0,i.jsx)(n.li,{children:"Fluent assertion syntax"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"xUnit"}),(0,i.jsx)(n.th,{children:"TUnit"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[Fact]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[Test]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[Theory]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[Test]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[InlineData(...)]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[Arguments(...)]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[MemberData(nameof(...))]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[MethodDataSource(nameof(...))]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[ClassData(typeof(...))]"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[MethodDataSource(nameof(ClassName.Method))]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'[Trait("key", "value")]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'[Property("key", "value")]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"IClassFixture<T>"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"[ClassDataSource<T>(Shared = SharedType.PerClass)]"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'[Collection("name")]'})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'[ClassDataSource<T>(Shared = SharedType.Keyed, Key = "name")]'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Constructor"}),(0,i.jsxs)(n.td,{children:["Constructor or ",(0,i.jsx)(n.code,{children:"[Before(Test)]"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"IDisposable"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"IDisposable"})," or ",(0,i.jsx)(n.code,{children:"[After(Test)]"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"IAsyncLifetime"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"[Before(Test)]"})," / ",(0,i.jsx)(n.code,{children:"[After(Test)]"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ITestOutputHelper"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"TestContext"})," parameter"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Assert.Equal(expected, actual)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"await Assert.That(actual).IsEqualTo(expected)"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Assert.Throws<T>(() => ...)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"await Assert.ThrowsAsync<T>(() => ...)"})})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);