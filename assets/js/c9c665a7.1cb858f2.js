"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2243],{5401:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"assertions/collections","title":"Collection Assertions","description":"TUnit provides comprehensive assertions for testing collections, including membership, count, ordering, and equivalency checks. These assertions work with any IEnumerable.","source":"@site/docs/assertions/collections.md","sourceDirName":"assertions","slug":"/assertions/collections","permalink":"/docs/assertions/collections","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6.5,"frontMatter":{"sidebar_position":6.5},"sidebar":"docs","previous":{"title":"String Assertions","permalink":"/docs/assertions/string"},"next":{"title":"Dictionary Assertions","permalink":"/docs/assertions/dictionaries"}}');var t=s(4848),i=s(8453);const r={sidebar_position:6.5},l="Collection Assertions",c={},o=[{value:"Membership Assertions",id:"membership-assertions",level:2},{value:"Contains (Item)",id:"contains-item",level:3},{value:"Contains (Predicate)",id:"contains-predicate",level:3},{value:"DoesNotContain (Item)",id:"doesnotcontain-item",level:3},{value:"DoesNotContain (Predicate)",id:"doesnotcontain-predicate",level:3},{value:"Count Assertions",id:"count-assertions",level:2},{value:"HasCount",id:"hascount",level:3},{value:"Count with Comparison",id:"count-with-comparison",level:3},{value:"Count with Predicate",id:"count-with-predicate",level:3},{value:"IsEmpty",id:"isempty",level:3},{value:"IsNotEmpty",id:"isnotempty",level:3},{value:"HasSingleItem",id:"hassingleitem",level:3},{value:"Ordering Assertions",id:"ordering-assertions",level:2},{value:"IsInOrder",id:"isinorder",level:3},{value:"IsInDescendingOrder",id:"isindescendingorder",level:3},{value:"IsOrderedBy",id:"isorderedby",level:3},{value:"IsOrderedByDescending",id:"isorderedbydescending",level:3},{value:"Predicate-Based Assertions",id:"predicate-based-assertions",level:2},{value:"All",id:"all",level:3},{value:"With Satisfy",id:"with-satisfy",level:4},{value:"With Mapper",id:"with-mapper",level:4},{value:"Any",id:"any",level:3},{value:"Equivalency Assertions",id:"equivalency-assertions",level:2},{value:"IsEquivalentTo",id:"isequivalentto",level:3},{value:"With Custom Comparer",id:"with-custom-comparer",level:4},{value:"With Custom Equality Predicate",id:"with-custom-equality-predicate",level:4},{value:"Explicitly Ignoring Order",id:"explicitly-ignoring-order",level:4},{value:"IsNotEquivalentTo",id:"isnotequivalentto",level:3},{value:"Structural Equivalency",id:"structural-equivalency",level:2},{value:"IsStructurallyEqualTo",id:"isstructurallyequalto",level:3},{value:"IsNotStructurallyEqualTo",id:"isnotstructurallyequalto",level:3},{value:"Distinctness",id:"distinctness",level:2},{value:"HasDistinctItems",id:"hasdistinctitems",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Filtering Results",id:"filtering-results",level:3},{value:"LINQ Query Results",id:"linq-query-results",level:3},{value:"Sorting Validation",id:"sorting-validation",level:3},{value:"API Response Validation",id:"api-response-validation",level:3},{value:"Collection Transformation",id:"collection-transformation",level:3},{value:"Empty vs Null Collections",id:"empty-vs-null-collections",level:2},{value:"Nested Collections",id:"nested-collections",level:2},{value:"Collection of Collections",id:"collection-of-collections",level:2},{value:"Chaining Collection Assertions",id:"chaining-collection-assertions",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Materialize IEnumerable",id:"materialize-ienumerable",level:3},{value:"Working with HashSet and SortedSet",id:"working-with-hashset-and-sortedset",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Validate All Items",id:"validate-all-items",level:3},{value:"Find and Assert",id:"find-and-assert",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"collection-assertions",children:"Collection Assertions"})}),"\n",(0,t.jsxs)(n.p,{children:["TUnit provides comprehensive assertions for testing collections, including membership, count, ordering, and equivalency checks. These assertions work with any ",(0,t.jsx)(n.code,{children:"IEnumerable<T>"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"membership-assertions",children:"Membership Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"contains-item",children:"Contains (Item)"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection contains a specific item:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Contains_Item()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers).Contains(3);\n    await Assert.That(numbers).Contains(1);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Works with any collection type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Various_Collection_Types()\n{\n    var list = new List<string> { "apple", "banana", "cherry" };\n    await Assert.That(list).Contains("banana");\n\n    var hashSet = new HashSet<int> { 10, 20, 30 };\n    await Assert.That(hashSet).Contains(20);\n\n    var queue = new Queue<string>(new[] { "first", "second" });\n    await Assert.That(queue).Contains("first");\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"contains-predicate",children:"Contains (Predicate)"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection contains an item matching a predicate, and returns that item:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Collection_Contains_Matching_Item()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 30 },\n        new User { Name = "Bob", Age = 25 }\n    };\n\n    // Returns the found item\n    var user = await Assert.That(users).Contains(u => u.Name == "Alice");\n\n    // Can assert on the returned item\n    await Assert.That(user.Age).IsEqualTo(30);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"doesnotcontain-item",children:"DoesNotContain (Item)"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection does not contain a specific item:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Does_Not_Contain()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers).DoesNotContain(10);\n    await Assert.That(numbers).DoesNotContain(0);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"doesnotcontain-predicate",children:"DoesNotContain (Predicate)"}),"\n",(0,t.jsx)(n.p,{children:"Tests that no items match the predicate:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Collection_Does_Not_Contain_Matching()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 30 },\n        new User { Name = "Bob", Age = 25 }\n    };\n\n    await Assert.That(users).DoesNotContain(u => u.Age > 50);\n    await Assert.That(users).DoesNotContain(u => u.Name == "Charlie");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"count-assertions",children:"Count Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"hascount",children:"HasCount"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection has an exact count:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Has_Count()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers).HasCount(5);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"count-with-comparison",children:"Count with Comparison"}),"\n",(0,t.jsx)(n.p,{children:"Get the count for further assertions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Count_With_Comparison()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers)\n        .HasCount().EqualTo(5);\n\n    await Assert.That(numbers)\n        .HasCount().GreaterThan(3)\n        .And.HasCount().LessThan(10);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"count-with-predicate",children:"Count with Predicate"}),"\n",(0,t.jsx)(n.p,{children:"Count items matching a predicate:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Count_With_Predicate()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5, 6 };\n\n    // Count even numbers\n    var evenCount = await Assert.That(numbers)\n        .Count(n => n % 2 == 0);\n\n    await Assert.That(evenCount).IsEqualTo(3);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isempty",children:"IsEmpty"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection has no items:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Is_Empty()\n{\n    var empty = new List<int>();\n\n    await Assert.That(empty).IsEmpty();\n    await Assert.That(empty).HasCount(0);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isnotempty",children:"IsNotEmpty"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection has at least one item:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Is_Not_Empty()\n{\n    var numbers = new[] { 1 };\n\n    await Assert.That(numbers).IsNotEmpty();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"hassingleitem",children:"HasSingleItem"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection has exactly one item, and returns that item:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Collection_Has_Single_Item()\n{\n    var users = new[] { new User { Name = "Alice", Age = 30 } };\n\n    var user = await Assert.That(users).HasSingleItem();\n\n    await Assert.That(user.Name).IsEqualTo("Alice");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"ordering-assertions",children:"Ordering Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"isinorder",children:"IsInOrder"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection is sorted in ascending order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_In_Ascending_Order()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers).IsInOrder();\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Strings_In_Order()\n{\n    var names = new[] { "Alice", "Bob", "Charlie" };\n\n    await Assert.That(names).IsInOrder();\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isindescendingorder",children:"IsInDescendingOrder"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection is sorted in descending order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_In_Descending_Order()\n{\n    var numbers = new[] { 5, 4, 3, 2, 1 };\n\n    await Assert.That(numbers).IsInDescendingOrder();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isorderedby",children:"IsOrderedBy"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection is ordered by a specific property:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Ordered_By_Property()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 25 },\n        new User { Name = "Bob", Age = 30 },\n        new User { Name = "Charlie", Age = 35 }\n    };\n\n    await Assert.That(users).IsOrderedBy(u => u.Age);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isorderedbydescending",children:"IsOrderedByDescending"}),"\n",(0,t.jsx)(n.p,{children:"Tests that a collection is ordered by a property in descending order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Ordered_By_Descending()\n{\n    var users = new[]\n    {\n        new User { Name = "Charlie", Age = 35 },\n        new User { Name = "Bob", Age = 30 },\n        new User { Name = "Alice", Age = 25 }\n    };\n\n    await Assert.That(users).IsOrderedByDescending(u => u.Age);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"predicate-based-assertions",children:"Predicate-Based Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"all",children:"All"}),"\n",(0,t.jsx)(n.p,{children:"Tests that all items satisfy a condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task All_Items_Match()\n{\n    var numbers = new[] { 2, 4, 6, 8 };\n\n    await Assert.That(numbers).All(n => n % 2 == 0);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"with-satisfy",children:"With Satisfy"}),"\n",(0,t.jsx)(n.p,{children:"Chain additional assertions on all items:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task All_Satisfy()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 25 },\n        new User { Name = "Bob", Age = 30 }\n    };\n\n    await Assert.That(users)\n        .All()\n        .Satisfy(u => Assert.That(u.Age).IsGreaterThan(18));\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"with-mapper",children:"With Mapper"}),"\n",(0,t.jsx)(n.p,{children:"Map items before asserting:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task All_Satisfy_With_Mapper()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 25 },\n        new User { Name = "Bob", Age = 30 }\n    };\n\n    await Assert.That(users)\n        .All()\n        .Satisfy(\n            u => u.Name,\n            name => Assert.That(name).IsNotEmpty()\n        );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"any",children:"Any"}),"\n",(0,t.jsx)(n.p,{children:"Tests that at least one item satisfies a condition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Any_Item_Matches()\n{\n    var numbers = new[] { 1, 3, 5, 6, 7 };\n\n    await Assert.That(numbers).Any(n => n % 2 == 0);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"equivalency-assertions",children:"Equivalency Assertions"}),"\n",(0,t.jsx)(n.h3,{id:"isequivalentto",children:"IsEquivalentTo"}),"\n",(0,t.jsx)(n.p,{children:"Tests that two collections contain the same items, regardless of order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collections_Are_Equivalent()\n{\n    var actual = new[] { 1, 2, 3, 4, 5 };\n    var expected = new[] { 5, 4, 3, 2, 1 };\n\n    await Assert.That(actual).IsEquivalentTo(expected);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Different collection types:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Different_Collection_Types()\n{\n    var list = new List<int> { 1, 2, 3 };\n    var array = new[] { 3, 2, 1 };\n\n    await Assert.That(list).IsEquivalentTo(array);\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"with-custom-comparer",children:"With Custom Comparer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Equivalent_With_Comparer()\n{\n    var actual = new[] { "apple", "banana", "cherry" };\n    var expected = new[] { "APPLE", "BANANA", "CHERRY" };\n\n    await Assert.That(actual)\n        .IsEquivalentTo(expected)\n        .Using(StringComparer.OrdinalIgnoreCase);\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"with-custom-equality-predicate",children:"With Custom Equality Predicate"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Equivalent_With_Predicate()\n{\n    var users1 = new[]\n    {\n        new User { Name = "Alice", Age = 30 },\n        new User { Name = "Bob", Age = 25 }\n    };\n\n    var users2 = new[]\n    {\n        new User { Name = "Bob", Age = 25 },\n        new User { Name = "Alice", Age = 30 }\n    };\n\n    await Assert.That(users1)\n        .IsEquivalentTo(users2)\n        .Using((u1, u2) => u1.Name == u2.Name && u1.Age == u2.Age);\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"explicitly-ignoring-order",children:"Explicitly Ignoring Order"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Equivalent_Ignoring_Order()\n{\n    var actual = new[] { 1, 2, 3 };\n    var expected = new[] { 3, 2, 1 };\n\n    await Assert.That(actual)\n        .IsEquivalentTo(expected)\n        .IgnoringOrder();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"isnotequivalentto",children:"IsNotEquivalentTo"}),"\n",(0,t.jsx)(n.p,{children:"Tests that collections are not equivalent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collections_Not_Equivalent()\n{\n    var actual = new[] { 1, 2, 3 };\n    var different = new[] { 4, 5, 6 };\n\n    await Assert.That(actual).IsNotEquivalentTo(different);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"structural-equivalency",children:"Structural Equivalency"}),"\n",(0,t.jsx)(n.h3,{id:"isstructurallyequalto",children:"IsStructurallyEqualTo"}),"\n",(0,t.jsx)(n.p,{children:"Deep comparison of collections including nested objects:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Structurally_Equal()\n{\n    var actual = new[]\n    {\n        new { Name = "Alice", Address = new { City = "Seattle" } },\n        new { Name = "Bob", Address = new { City = "Portland" } }\n    };\n\n    var expected = new[]\n    {\n        new { Name = "Alice", Address = new { City = "Seattle" } },\n        new { Name = "Bob", Address = new { City = "Portland" } }\n    };\n\n    await Assert.That(actual).IsStructurallyEqualTo(expected);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"isnotstructurallyequalto",children:"IsNotStructurallyEqualTo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Not_Structurally_Equal()\n{\n    var actual = new[]\n    {\n        new { Name = "Alice", Age = 30 }\n    };\n\n    var different = new[]\n    {\n        new { Name = "Alice", Age = 31 }\n    };\n\n    await Assert.That(actual).IsNotStructurallyEqualTo(different);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"distinctness",children:"Distinctness"}),"\n",(0,t.jsx)(n.h3,{id:"hasdistinctitems",children:"HasDistinctItems"}),"\n",(0,t.jsx)(n.p,{children:"Tests that all items in a collection are unique:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task All_Items_Distinct()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers).HasDistinctItems();\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Fails if duplicates exist:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Duplicates_Fail()\n{\n    var numbers = new[] { 1, 2, 2, 3 };\n\n    // This will fail\n    // await Assert.That(numbers).HasDistinctItems();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(n.h3,{id:"filtering-results",children:"Filtering Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Filter_And_Assert()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n    var evens = numbers.Where(n => n % 2 == 0).ToArray();\n\n    await Assert.That(evens)\n        .HasCount(5)\n        .And.All(n => n % 2 == 0);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"linq-query-results",children:"LINQ Query Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task LINQ_Query_Results()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 25 },\n        new User { Name = "Bob", Age = 30 },\n        new User { Name = "Charlie", Age = 35 }\n    };\n\n    var adults = users.Where(u => u.Age >= 18).ToArray();\n\n    await Assert.That(adults)\n        .HasCount(3)\n        .And.All(u => u.Age >= 18);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sorting-validation",children:"Sorting Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Verify_Sorting()\n{\n    var unsorted = new[] { 5, 2, 8, 1, 9 };\n    var sorted = unsorted.OrderBy(x => x).ToArray();\n\n    await Assert.That(sorted).IsInOrder();\n    await Assert.That(sorted).IsEquivalentTo(unsorted);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"api-response-validation",children:"API Response Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task API_Returns_Expected_Items()\n{\n    var response = await _api.GetUsersAsync();\n\n    await Assert.That(response)\n        .IsNotEmpty()\n        .And.All(u => u.Id > 0)\n        .And.All(u => !string.IsNullOrEmpty(u.Name));\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"collection-transformation",children:"Collection Transformation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Map_And_Verify()\n{\n    var users = new[]\n    {\n        new User { Name = "Alice", Age = 25 },\n        new User { Name = "Bob", Age = 30 }\n    };\n\n    var names = users.Select(u => u.Name).ToArray();\n\n    await Assert.That(names)\n        .HasCount(2)\n        .And.Contains("Alice")\n        .And.Contains("Bob")\n        .And.All(name => !string.IsNullOrEmpty(name));\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"empty-vs-null-collections",children:"Empty vs Null Collections"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Empty_vs_Null()\n{\n    List<int>? nullList = null;\n    List<int> emptyList = new();\n    List<int> populated = new() { 1, 2, 3 };\n\n    await Assert.That(nullList).IsNull();\n    await Assert.That(emptyList).IsNotNull();\n    await Assert.That(emptyList).IsEmpty();\n    await Assert.That(populated).IsNotEmpty();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"nested-collections",children:"Nested Collections"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Nested_Collections()\n{\n    var matrix = new[]\n    {\n        new[] { 1, 2, 3 },\n        new[] { 4, 5, 6 },\n        new[] { 7, 8, 9 }\n    };\n\n    await Assert.That(matrix).HasCount(3);\n    await Assert.That(matrix).All(row => row.Length == 3);\n\n    // Flatten and assert\n    var flattened = matrix.SelectMany(x => x).ToArray();\n    await Assert.That(flattened).HasCount(9);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"collection-of-collections",children:"Collection of Collections"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Collection_Of_Collections()\n{\n    var groups = new List<List<int>>\n    {\n        new() { 1, 2 },\n        new() { 3, 4, 5 },\n        new() { 6 }\n    };\n\n    await Assert.That(groups)\n        .HasCount(3)\n        .And.All(group => group.Count > 0);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"chaining-collection-assertions",children:"Chaining Collection Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_Collection_Assertions()\n{\n    var numbers = new[] { 1, 2, 3, 4, 5 };\n\n    await Assert.That(numbers)\n        .IsNotEmpty()\n        .And.HasCount(5)\n        .And.Contains(3)\n        .And.DoesNotContain(10)\n        .And.IsInOrder()\n        .And.All(n => n > 0)\n        .And.Any(n => n == 5);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"materialize-ienumerable",children:"Materialize IEnumerable"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Materialize_Before_Multiple_Assertions()\n{\n    // This query is deferred\n    IEnumerable<int> query = Enumerable.Range(1, 1000000)\n        .Where(n => n % 2 == 0);\n\n    // Materialize once to avoid re-execution\n    var materialized = query.ToArray();\n\n    await Assert.That(materialized).HasCount().GreaterThan(1000);\n    await Assert.That(materialized).Contains(100);\n    await Assert.That(materialized).All(n => n % 2 == 0);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"working-with-hashset-and-sortedset",children:"Working with HashSet and SortedSet"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task HashSet_Assertions()\n{\n    var set = new HashSet<int> { 1, 2, 3, 4, 5 };\n\n    await Assert.That(set)\n        .HasCount(5)\n        .And.Contains(3)\n        .And.HasDistinctItems();\n}\n\n[Test]\npublic async Task SortedSet_Assertions()\n{\n    var sorted = new SortedSet<int> { 5, 2, 8, 1, 9 };\n\n    await Assert.That(sorted)\n        .IsInOrder()\n        .And.HasDistinctItems();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"validate-all-items",children:"Validate All Items"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_Each_Item()\n{\n    var users = GetUsers();\n\n    await using (Assert.Multiple())\n    {\n        foreach (var user in users)\n        {\n            await Assert.That(user.Name).IsNotEmpty();\n            await Assert.That(user.Age).IsGreaterThan(0);\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or more elegantly:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_All_With_Assertion()\n{\n    var users = GetUsers();\n\n    await Assert.That(users).All(u =>\n        !string.IsNullOrEmpty(u.Name) && u.Age > 0\n    );\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"find-and-assert",children:"Find and Assert"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Find_And_Assert()\n{\n    var users = GetUsers();\n\n    var admin = await Assert.That(users)\n        .Contains(u => u.Role == "Admin");\n\n    await Assert.That(admin.Permissions).IsNotEmpty();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/dictionaries",children:"Dictionaries"})," - Dictionary-specific assertions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/string",children:"Strings"})," - String collections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - Item comparison"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var a=s(6540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);