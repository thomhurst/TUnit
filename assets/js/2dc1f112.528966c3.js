"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[6491],{2692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"customization-extensibility/data-source-generators","title":"Data Source Generators","description":"TUnit provides several base classes for creating custom data source generators:","source":"@site/docs/customization-extensibility/data-source-generators.md","sourceDirName":"customization-extensibility","slug":"/customization-extensibility/data-source-generators","permalink":"/docs/customization-extensibility/data-source-generators","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Extensions","permalink":"/docs/extensions/"},"next":{"title":"Argument Formatters","permalink":"/docs/customization-extensibility/argument-formatters"}}');var r=n(4848),s=n(8453);const o={},i="Data Source Generators",c={},u=[{value:"DataSourceGeneratorAttribute",id:"datasourcegeneratorattribute",level:2},{value:"AsyncDataSourceGeneratorAttribute",id:"asyncdatasourcegeneratorattribute",level:2},{value:"UntypedDataSourceGeneratorAttribute",id:"untypeddatasourcegeneratorattribute",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Func Return Pattern",id:"func-return-pattern",level:3},{value:"TestBuilderContext",id:"testbuildercontext",level:3},{value:"Choosing the Right Base Class",id:"choosing-the-right-base-class",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"data-source-generators",children:"Data Source Generators"})}),"\n",(0,r.jsx)(t.p,{children:"TUnit provides several base classes for creating custom data source generators:"}),"\n",(0,r.jsx)(t.h2,{id:"datasourcegeneratorattribute",children:"DataSourceGeneratorAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["The standard ",(0,r.jsx)(t.code,{children:"DataSourceGeneratorAttribute"})," class uses generic ",(0,r.jsx)(t.code,{children:"Type"})," arguments to keep your data strongly typed. This attribute can be useful to easily populate data in a generic way, and without having to define lots of specific ",(0,r.jsx)(t.code,{children:"MethodDataSources"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If you just need to generate data for a single parameter, you simply return ",(0,r.jsx)(t.code,{children:"T"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["If you need to generate data for multiple parameters, you must use a ",(0,r.jsx)(t.code,{children:"Tuple<>"})," return type. E.g. ",(0,r.jsx)(t.code,{children:"return (T1, T2, T3)"})]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example that uses AutoFixture to generate arguments:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class AutoFixtureGeneratorAttribute<T1, T2, T3> : DataSourceGeneratorAttribute<T1, T2, T3>\n{\n    public override IEnumerable<Func<(T1, T2, T3)>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        var fixture = new Fixture();\n        \n        yield return () => (fixture.Create<T1>(), fixture.Create<T2>(), fixture.Create<T3>());\n    }\n}\n\n[AutoFixtureGenerator<SomeClass1, SomeClass2, SomeClass3>]\npublic class MyTestClass(SomeClass1 someClass1, SomeClass2 someClass2, SomeClass3 someClass3)\n{\n    [Test]\n    [AutoFixtureGenerator<int, string, bool>]\n    public async Task Test((int value, string value2, bool value3))\n    {\n        // ...\n    }\n}\n\n\n"})}),"\n",(0,r.jsx)(t.h2,{id:"asyncdatasourcegeneratorattribute",children:"AsyncDataSourceGeneratorAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["For data sources that need to perform asynchronous operations (like reading from a database, calling an API, or loading files), TUnit provides ",(0,r.jsx)(t.code,{children:"AsyncDataSourceGeneratorAttribute"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["This works similarly to ",(0,r.jsx)(t.code,{children:"DataSourceGeneratorAttribute"})," but allows you to use async/await:"]}),"\n",(0,r.jsxs)(t.admonition,{title:"Performance Consideration",type:"warning",children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Important"}),": AsyncDataSourceGenerator code runs at test discovery time, not test execution time. This means:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Keep async operations fast and lightweight"}),"\n",(0,r.jsx)(t.li,{children:"Avoid long-running operations or external dependencies that might be slow/unavailable"}),"\n",(0,r.jsx)(t.li,{children:"If an async operation hangs, your tests may never be discovered"}),"\n",(0,r.jsx)(t.li,{children:"Consider caching results if the operation is expensive"}),"\n",(0,r.jsx)(t.li,{children:"For heavy operations, consider using a regular test method that loads data once and shares it across tests"}),"\n"]})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class DatabaseDataGeneratorAttribute<T> : AsyncDataSourceGeneratorAttribute<T> where T : class\n{\n    private readonly string _connectionString;\n    \n    public DatabaseDataGeneratorAttribute(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    public override async IAsyncEnumerable<Func<T>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        await using var connection = new SqlConnection(_connectionString);\n        await connection.OpenAsync();\n        \n        var entities = await connection.QueryAsync<T>("SELECT * FROM " + typeof(T).Name);\n        \n        foreach (var entity in entities)\n        {\n            yield return () => entity;\n        }\n    }\n}\n\n[Test]\n[DatabaseDataGenerator<Customer>("Server=localhost;Database=TestDb;")]\npublic async Task TestCustomerBehavior(Customer customer)\n{\n    // Test with real customer data from database\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"untypeddatasourcegeneratorattribute",children:"UntypedDataSourceGeneratorAttribute"}),"\n",(0,r.jsxs)(t.p,{children:["For scenarios where you need to generate dynamic types or work with libraries that don't have compile-time type information (like AutoFixture), TUnit provides ",(0,r.jsx)(t.code,{children:"UntypedDataSourceGeneratorAttribute"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"This is particularly useful when:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Working with anonymous types"}),"\n",(0,r.jsx)(t.li,{children:"Using dynamic type generation libraries"}),"\n",(0,r.jsx)(t.li,{children:"Creating data where the type isn't known at compile time"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\nusing AutoFixture;\n\nnamespace MyTestProject;\n\npublic class AutoFixtureGeneratorAttribute : UntypedDataSourceGeneratorAttribute\n{\n    private readonly Type[] _types;\n    \n    public AutoFixtureGeneratorAttribute(params Type[] types)\n    {\n        _types = types;\n    }\n    \n    public override IEnumerable<Func<object?[]>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        var fixture = new Fixture();\n        \n        yield return () => _types.Select(type => fixture.Create(type, new SpecimenContext(fixture))).ToArray();\n    }\n}\n\n[Test]\n[AutoFixtureGenerator(typeof(Customer), typeof(Order), typeof(Product))]\npublic async Task TestWithDynamicTypes(Customer customer, Order order, Product product)\n{\n    // AutoFixture will generate test data for all three parameters\n}\n\n// You can also use it at the class level\n[AutoFixtureGenerator(typeof(DatabaseContext))]\npublic class RepositoryTests(DatabaseContext context)\n{\n    [Test]\n    public async Task TestRepository()\n    {\n        // context is populated by AutoFixture\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsx)(t.h3,{id:"func-return-pattern",children:"Func Return Pattern"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"GenerateDataSources()"})," could be called multiple times if you have nested loops to generate data within your tests. Because of this, you are required to return a ",(0,r.jsx)(t.code,{children:"Func"})," - This means that tests can create a new object each time for a test case. Otherwise, we'd be pointing to the same object if we were in a nested loop and that could lead to unintended side-effects."]}),"\n",(0,r.jsx)(t.p,{children:"An example could be using a DataSourceGenerator on both the class and the test method, resulting with a loop within a loop."}),"\n",(0,r.jsx)(t.h3,{id:"testbuildercontext",children:"TestBuilderContext"}),"\n",(0,r.jsx)(t.p,{children:"Because this could be called multiple times, if you're subscribing to test events and storing state within the attribute, be aware of this and how this could affect disposal etc."}),"\n",(0,r.jsxs)(t.p,{children:["Instead, you can use the ",(0,r.jsx)(t.code,{children:"yield return"})," pattern, and use the ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," from the ",(0,r.jsx)(t.code,{children:"DataGeneratorMetadata"})," object passed to you.\nAfter each ",(0,r.jsx)(t.code,{children:"yield"}),", the execution is passed back to TUnit, and TUnit will set a new ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," for you - So as long as you yield each result, you'll get a unique context object for each test case.\nThe ",(0,r.jsx)(t.code,{children:"TestBuilderContext"})," object exposes ",(0,r.jsx)(t.code,{children:"Events"})," - And you can register a delegate to be invoked on them at the point in the test lifecycle that you wish."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"public override IEnumerable<Func<int>> GenerateDataSources(DataGeneratorMetadata dataGeneratorMetadata)\n{\n    dataGeneratorMetadata.TestBuilderContext.Current; // <-- Initial Context for first test\n    \n    yield return () => 1;\n    \n    dataGeneratorMetadata.TestBuilderContext.Current; // <-- This is now a different context object, as we yielded\n    dataGeneratorMetadata.TestBuilderContext.Current; // <-- This is still the same as above because it'll only change on a yield\n    \n    yield return () => 2;\n    \n    dataGeneratorMetadata.TestBuilderContext.Current; // <-- A new object again\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"choosing-the-right-base-class",children:"Choosing the Right Base Class"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"DataSourceGeneratorAttribute"}),": Use when you know the types at compile time and want strong typing"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"AsyncDataSourceGeneratorAttribute"}),": Use when you need to perform async operations (database, API, file I/O)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"UntypedDataSourceGeneratorAttribute"}),": Use when working with dynamic types or type generation libraries"]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(6540);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);