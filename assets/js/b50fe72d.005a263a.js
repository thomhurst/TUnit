"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3032],{1001:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"tutorial-advanced/retrying","title":"Retrying","description":"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating.","source":"@site/docs/tutorial-advanced/retrying.md","sourceDirName":"tutorial-advanced","slug":"/tutorial-advanced/retrying","permalink":"/docs/tutorial-advanced/retrying","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Test Clean Ups","permalink":"/docs/tutorial-advanced/cleanup"},"next":{"title":"Repeating","permalink":"/docs/tutorial-advanced/repeating"}}');var r=n(4848),i=n(8453);const o={sidebar_position:3},a="Retrying",c={},u=[];function d(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"retrying",children:"Retrying"})}),"\n",(0,r.jsx)(e.p,{children:"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating."}),"\n",(0,r.jsxs)(e.p,{children:["If you want to retry a test, add a ",(0,r.jsx)(e.code,{children:"[RetryAttribute]"})," onto your test method or class. This takes an ",(0,r.jsx)(e.code,{children:"int"})," of how many times you'd like to retry."]}),"\n",(0,r.jsx)(e.p,{children:"This can be used on base classes and inherited to affect all tests in sub-classes."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test]\n    [Retry(3)]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["The basic ",(0,r.jsx)(e.code,{children:"RetryAttribute"})," will retry on any exception."]}),"\n",(0,r.jsxs)(e.p,{children:["If you only want to retry on certain conditions, you can create your own attribute that inherits from ",(0,r.jsx)(e.code,{children:"RetryAttribute"}),". There's a ",(0,r.jsx)(e.code,{children:"ShouldRetry"})," method that can be overridden, where you can access the test information and the type of exception that was thrown."]}),"\n",(0,r.jsx)(e.p,{children:"If this method returns true, the test can be retried, otherwise it'll fail."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class RetryTransientHttpAttribute : RetryAttribute\n{\n    public RetryTransientHttpAttribute(int times) : base(times)\n    {\n    }\n\n    public override Task<bool> ShouldRetry(TestInformation testInformation, Exception exception)\n    {\n        if (exception is HttpRequestException requestException)\n        {\n            return Task.FromResult(requestException.StatusCode is\n                HttpStatusCode.BadGateway\n                or HttpStatusCode.TooManyRequests\n                or HttpStatusCode.GatewayTimeout\n                or HttpStatusCode.RequestTimeout);\n        }\n\n        return Task.FromResult(false);\n    }\n}\n\npublic class MyTestClass\n{\n    [Test]\n    [RetryTransientHttp(3)]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})})]})}function l(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>a});var s=n(6540);const r={},i=s.createContext(r);function o(t){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),s.createElement(i.Provider,{value:e},t.children)}}}]);