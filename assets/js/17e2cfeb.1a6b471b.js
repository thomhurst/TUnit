"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2020],{8349:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"test-authoring/combined-data-source","title":"CombinedDataSource","description":"Overview","source":"@site/docs/test-authoring/combined-data-source.md","sourceDirName":"test-authoring","slug":"/test-authoring/combined-data-source","permalink":"/docs/test-authoring/combined-data-source","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Matrix Tests","permalink":"/docs/test-authoring/matrix-tests"},"next":{"title":"Nested Data Sources with Initialization","permalink":"/docs/test-authoring/nested-data-sources"}}');var r=n(4848),a=n(8453);const i={},l="CombinedDataSource",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Comparison with MatrixDataSource",id:"comparison-with-matrixdatasource",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Simple Arguments Mixing",id:"simple-arguments-mixing",level:3},{value:"Mixing Arguments with MethodDataSource",id:"mixing-arguments-with-methoddatasource",level:3},{value:"Advanced Scenarios",id:"advanced-scenarios",level:2},{value:"Three Parameters from Different Sources",id:"three-parameters-from-different-sources",level:3},{value:"Multiple Data Sources on Same Parameter",id:"multiple-data-sources-on-same-parameter",level:3},{value:"Using ClassDataSource",id:"using-classdatasource",level:3},{value:"Complex Type Combinations",id:"complex-type-combinations",level:3},{value:"Cartesian Product Behavior",id:"cartesian-product-behavior",level:2},{value:"Example Calculation",id:"example-calculation",level:3},{value:"Supported Data Source Attributes",id:"supported-data-source-attributes",level:2},{value:"Built-in Attributes",id:"built-in-attributes",level:3},{value:"Custom Data Sources",id:"custom-data-sources",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"\u2705 DO",id:"-do",level:3},{value:"\u274c DON&#39;T",id:"-dont",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Test Case Growth",id:"test-case-growth",level:3},{value:"Optimization Tips",id:"optimization-tips",level:3},{value:"Edge Cases and Error Handling",id:"edge-cases-and-error-handling",level:2},{value:"Missing Data Source",id:"missing-data-source",level:3},{value:"No Parameters",id:"no-parameters",level:3},{value:"Nullable Types",id:"nullable-types",level:3},{value:"Comparison with Other Approaches",id:"comparison-with-other-approaches",level:2},{value:"vs. Method-Level [Arguments]",id:"vs-method-level-arguments",level:3},{value:"vs. MatrixDataSource",id:"vs-matrixdatasource",level:3},{value:"AOT/Native Compilation",id:"aotnative-compilation",level:2},{value:"Examples from Real-World Scenarios",id:"examples-from-real-world-scenarios",level:2},{value:"Testing API Endpoints with Different Configurations",id:"testing-api-endpoints-with-different-configurations",level:3},{value:"Database Query Testing",id:"database-query-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue: Too Many Test Cases Generated",id:"issue-too-many-test-cases-generated",level:3},{value:"Issue: Data Source Returns No Values",id:"issue-data-source-returns-no-values",level:3},{value:"Issue: Parameter Type Mismatch",id:"issue-parameter-type-mismatch",level:3},{value:"See Also",id:"see-also",level:2},{value:"Version History",id:"version-history",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"combineddatasource",children:"CombinedDataSource"})}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"[CombinedDataSource]"})," attribute enables you to apply different data source attributes to individual parameters, creating test cases through Cartesian product combination. This provides maximum flexibility when you need different parameters to be generated by different data sources."]}),"\n",(0,r.jsx)(s.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\u2705 Apply ANY ",(0,r.jsx)(s.code,{children:"IDataSourceAttribute"})," to individual parameters"]}),"\n",(0,r.jsxs)(s.li,{children:["\u2705 Mix ",(0,r.jsx)(s.code,{children:"[Arguments]"}),", ",(0,r.jsx)(s.code,{children:"[MethodDataSource]"}),", ",(0,r.jsx)(s.code,{children:"[ClassDataSource]"}),", and custom data sources"]}),"\n",(0,r.jsx)(s.li,{children:"\u2705 Automatic Cartesian product generation"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 Full AOT/Native compilation support"}),"\n",(0,r.jsx)(s.li,{children:"\u2705 Works in both source-generated and reflection modes"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"comparison-with-matrixdatasource",children:"Comparison with MatrixDataSource"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Feature"}),(0,r.jsx)(s.th,{children:"MatrixDataSource"}),(0,r.jsx)(s.th,{children:"CombinedDataSource"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Parameter-level attributes"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"[Matrix]"})," only"]}),(0,r.jsxs)(s.td,{children:["ANY ",(0,r.jsx)(s.code,{children:"IDataSourceAttribute"})]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Combination strategy"}),(0,r.jsx)(s.td,{children:"Cartesian product"}),(0,r.jsx)(s.td,{children:"Cartesian product"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Data source types"}),(0,r.jsx)(s.td,{children:"Matrix-specific"}),(0,r.jsx)(s.td,{children:"All TUnit data sources"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Use case"}),(0,r.jsx)(s.td,{children:"Simple matrix combinations"}),(0,r.jsx)(s.td,{children:"Complex, mixed data scenarios"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(s.h3,{id:"simple-arguments-mixing",children:"Simple Arguments Mixing"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[CombinedDataSource]\npublic async Task SimpleTest(\n    [Arguments(1, 2, 3)] int x,\n    [Arguments("a", "b")] string y)\n{\n    // Creates 3 \xd7 2 = 6 test cases:\n    // (1, "a"), (1, "b"), (2, "a"), (2, "b"), (3, "a"), (3, "b")\n\n    await Assert.That(x).IsIn([1, 2, 3]);\n    await Assert.That(y).IsIn(["a", "b"]);\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"mixing-arguments-with-methoddatasource",children:"Mixing Arguments with MethodDataSource"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'public static IEnumerable<string> GetStrings()\n{\n    yield return "Hello";\n    yield return "World";\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task MixedDataSources(\n    [Arguments(1, 2)] int x,\n    [MethodDataSource(nameof(GetStrings))] string y)\n{\n    // Creates 2 \xd7 2 = 4 test cases:\n    // (1, "Hello"), (1, "World"), (2, "Hello"), (2, "World")\n\n    await Assert.That(x).IsIn([1, 2]);\n    await Assert.That(y).IsIn(["Hello", "World"]);\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"advanced-scenarios",children:"Advanced Scenarios"}),"\n",(0,r.jsx)(s.h3,{id:"three-parameters-from-different-sources",children:"Three Parameters from Different Sources"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public static IEnumerable<int> GetNumbers()\n{\n    yield return 10;\n    yield return 20;\n    yield return 30;\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task ThreeWayMix(\n    [Arguments(1, 2)] int x,\n    [MethodDataSource(nameof(GetNumbers))] int y,\n    [Arguments(true, false)] bool z)\n{\n    // Creates 2 \xd7 3 \xd7 2 = 12 test cases\n    await Assert.That(x).IsIn([1, 2]);\n    await Assert.That(y).IsIn([10, 20, 30]);\n    await Assert.That(z).IsIn([true, false]);\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"multiple-data-sources-on-same-parameter",children:"Multiple Data Sources on Same Parameter"}),"\n",(0,r.jsx)(s.p,{children:"You can apply multiple data source attributes to a single parameter - all values will be combined:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[CombinedDataSource]\npublic async Task MultipleSourcesPerParameter(\n    [Arguments(1, 2)]\n    [Arguments(3, 4)] int x,\n    [Arguments("a")] string y)\n{\n    // Creates (2 + 2) \xd7 1 = 4 test cases\n    // x can be: 1, 2, 3, or 4\n    await Assert.That(x).IsIn([1, 2, 3, 4]);\n    await Assert.That(y).IsEqualTo("a");\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"using-classdatasource",children:"Using ClassDataSource"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public class MyTestData\n{\n    public int Value { get; set; }\n    public string Name { get; set; } = string.Empty;\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task WithClassDataSource(\n    [Arguments(1, 2)] int x,\n    [ClassDataSource<MyTestData>] MyTestData obj)\n{\n    // Creates 2 \xd7 1 = 2 test cases\n    await Assert.That(x).IsIn([1, 2]);\n    await Assert.That(obj).IsNotNull();\n}\n"})}),"\n",(0,r.jsx)(s.h3,{id:"complex-type-combinations",children:"Complex Type Combinations"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\n[CombinedDataSource]\npublic async Task DifferentTypes(\n    [Arguments(1, 2)] int intVal,\n    [Arguments(\"a\", \"b\")] string stringVal,\n    [Arguments(1.5, 2.5)] double doubleVal,\n    [Arguments(true, false)] bool boolVal,\n    [Arguments('x', 'y')] char charVal)\n{\n    // Creates 2 \xd7 2 \xd7 2 \xd7 2 \xd7 2 = 32 test cases\n    // All combinations of the parameter values\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"cartesian-product-behavior",children:"Cartesian Product Behavior"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"[CombinedDataSource]"})," generates test cases using ",(0,r.jsx)(s.strong,{children:"Cartesian product"})," - every combination of parameter values is tested."]}),"\n",(0,r.jsx)(s.h3,{id:"example-calculation",children:"Example Calculation"}),"\n",(0,r.jsx)(s.p,{children:"Given:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Parameter ",(0,r.jsx)(s.code,{children:"a"}),": ",(0,r.jsx)(s.code,{children:"[Arguments(1, 2, 3)]"})," \u2192 3 values"]}),"\n",(0,r.jsxs)(s.li,{children:["Parameter ",(0,r.jsx)(s.code,{children:"b"}),": ",(0,r.jsx)(s.code,{children:'[Arguments("x", "y")]'})," \u2192 2 values"]}),"\n",(0,r.jsxs)(s.li,{children:["Parameter ",(0,r.jsx)(s.code,{children:"c"}),": ",(0,r.jsx)(s.code,{children:"[Arguments(true, false)]"})," \u2192 2 values"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Total test cases: ",(0,r.jsx)(s.strong,{children:"3 \xd7 2 \xd7 2 = 12"})]}),"\n",(0,r.jsx)(s.p,{children:"Generated combinations:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'(1, "x", true), (1, "x", false), (1, "y", true), (1, "y", false),\n(2, "x", true), (2, "x", false), (2, "y", true), (2, "y", false),\n(3, "x", true), (3, "x", false), (3, "y", true), (3, "y", false)\n'})}),"\n",(0,r.jsx)(s.h2,{id:"supported-data-source-attributes",children:"Supported Data Source Attributes"}),"\n",(0,r.jsxs)(s.p,{children:["The following attributes can be applied to parameters with ",(0,r.jsx)(s.code,{children:"[CombinedDataSource]"}),":"]}),"\n",(0,r.jsx)(s.h3,{id:"built-in-attributes",children:"Built-in Attributes"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Attribute"}),(0,r.jsx)(s.th,{children:"Description"}),(0,r.jsx)(s.th,{children:"Example"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[Arguments]"})}),(0,r.jsx)(s.td,{children:"Inline values"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[Arguments(1, 2, 3)]"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[MethodDataSource]"})}),(0,r.jsx)(s.td,{children:"Values from a method"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[MethodDataSource(nameof(GetData))]"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[MethodDataSource<T>]"})}),(0,r.jsx)(s.td,{children:"Typed method data source"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[MethodDataSource<MyClass>(nameof(GetData))]"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[ClassDataSource<T>]"})}),(0,r.jsx)(s.td,{children:"Instance generation"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[ClassDataSource<MyClass>]"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[ClassDataSource]"})}),(0,r.jsx)(s.td,{children:"Dynamic type instances"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"[ClassDataSource(typeof(MyClass))]"})})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"custom-data-sources",children:"Custom Data Sources"}),"\n",(0,r.jsxs)(s.p,{children:["Any attribute implementing ",(0,r.jsx)(s.code,{children:"IDataSourceAttribute"})," can be used:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'public class CustomDataSourceAttribute : DataSourceGeneratorAttribute<string>\n{\n    protected override IEnumerable<Func<string>> GenerateDataSources(\n        DataGeneratorMetadata metadata)\n    {\n        yield return () => "Custom1";\n        yield return () => "Custom2";\n    }\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task WithCustomDataSource(\n    [Arguments(1, 2)] int x,\n    [CustomDataSource] string y)\n{\n    // Creates 2 \xd7 2 = 4 test cases\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(s.h3,{id:"-do",children:"\u2705 DO"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use descriptive parameter names"})," to make test output clear"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Keep parameter counts reasonable"})," (< 5 parameters typically)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Be mindful of Cartesian product size"})," - 5 params \xd7 10 values each = 100,000 tests!"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Group related tests"})," in the same test class"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use assertions to validate parameter values"})," when debugging"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"-dont",children:"\u274c DON'T"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Don't create excessive test cases"})," - Be aware of exponential growth"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Don't mix with method-level data sources"})," - Use one approach per test method"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Don't forget to test edge cases"})," like null values"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Don't leave parameters without data sources"})," - All parameters must have at least one data source attribute"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(s.h3,{id:"test-case-growth",children:"Test Case Growth"}),"\n",(0,r.jsx)(s.p,{children:"Be aware of exponential growth with multiple parameters:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Parameters"}),(0,r.jsx)(s.th,{children:"Values Each"}),(0,r.jsx)(s.th,{children:"Total Tests"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"2"}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"9"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"27"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"4"}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"81"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"5"}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"243"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"1,000"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"4"}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"10,000"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"optimization-tips",children:"Optimization Tips"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Reduce parameter value sets"})," when possible"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Use focused test methods"})," - test one concept per method"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsxs)(s.strong,{children:["Consider using ",(0,r.jsx)(s.code,{children:"[Matrix]"})," for simpler scenarios"]})," if you don't need mixed data sources"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Leverage test parallelization"})," - TUnit runs tests in parallel by default"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"edge-cases-and-error-handling",children:"Edge Cases and Error Handling"}),"\n",(0,r.jsx)(s.h3,{id:"missing-data-source",children:"Missing Data Source"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"// \u274c ERROR: Parameter 'y' has no data source\n[Test]\n[CombinedDataSource]\npublic async Task MissingDataSource(\n    [Arguments(1, 2)] int x,\n    int y) // No data source attribute!\n{\n    // This will fail during test initialization\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Error"}),": ",(0,r.jsx)(s.code,{children:"Parameter 'y' has no data source attributes. All parameters must have at least one IDataSourceAttribute when using [CombinedDataSource]."})]}),"\n",(0,r.jsx)(s.h3,{id:"no-parameters",children:"No Parameters"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"// \u274c ERROR: No parameters with data sources\n[Test]\n[CombinedDataSource]\npublic async Task NoParameters()\n{\n    // This will fail\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Error"}),": ",(0,r.jsx)(s.code,{children:"[CombinedDataSource] only supports parameterised tests"})]}),"\n",(0,r.jsx)(s.h3,{id:"nullable-types",children:"Nullable Types"}),"\n",(0,r.jsx)(s.p,{children:"Nullable types are fully supported:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[CombinedDataSource]\npublic async Task NullableTypes(\n    [Arguments(1, 2, null)] int? nullableInt,\n    [Arguments("a", null)] string? nullableString)\n{\n    // Creates 3 \xd7 2 = 6 test cases including nulls\n    if (nullableInt.HasValue)\n    {\n        await Assert.That(nullableInt.Value).IsIn([1, 2]);\n    }\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"comparison-with-other-approaches",children:"Comparison with Other Approaches"}),"\n",(0,r.jsx)(s.h3,{id:"vs-method-level-arguments",children:"vs. Method-Level [Arguments]"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Method-Level:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[Arguments(1, "a")]\n[Arguments(2, "b")]\npublic async Task OldWay(int x, string y)\n{\n    // Must manually specify every combination\n    // Only creates 2 test cases\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"MixedParameters:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[CombinedDataSource]\npublic async Task NewWay(\n    [Arguments(1, 2)] int x,\n    [Arguments("a", "b")] string y)\n{\n    // Automatically creates all 4 combinations\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"vs-matrixdatasource",children:"vs. MatrixDataSource"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Matrix:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\n[MatrixDataSource]\npublic async Task MatrixWay(\n    [Matrix(1, 2)] int x,\n    [Matrix("a", "b")] string y)\n{\n    // Limited to Matrix attribute only\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"MixedParameters:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\n[CombinedDataSource]\npublic async Task MixedWay(\n    [Arguments(1, 2)] int x,\n    [MethodDataSource(nameof(GetStrings))] string y)\n{\n    // Can mix any data source types!\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"aotnative-compilation",children:"AOT/Native Compilation"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"[CombinedDataSource]"})," is fully compatible with AOT and Native compilation. The attribute uses proper trimming annotations and works in both source-generated and reflection modes."]}),"\n",(0,r.jsx)(s.h2,{id:"examples-from-real-world-scenarios",children:"Examples from Real-World Scenarios"}),"\n",(0,r.jsx)(s.h3,{id:"testing-api-endpoints-with-different-configurations",children:"Testing API Endpoints with Different Configurations"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'public static IEnumerable<HttpMethod> GetHttpMethods()\n{\n    yield return HttpMethod.Get;\n    yield return HttpMethod.Post;\n    yield return HttpMethod.Put;\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task ApiEndpoint_ResponseCodes(\n    [MethodDataSource(nameof(GetHttpMethods))] HttpMethod method,\n    [Arguments("/api/users", "/api/products")] string endpoint,\n    [Arguments(200, 404)] int expectedStatusCode)\n{\n    // Tests all combinations of HTTP methods, endpoints, and expected codes\n    // 3 \xd7 2 \xd7 2 = 12 test cases\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"database-query-testing",children:"Database Query Testing"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'public class QueryParameters\n{\n    public int PageSize { get; set; }\n    public string SortOrder { get; set; } = string.Empty;\n}\n\n[Test]\n[CombinedDataSource]\npublic async Task Database_Pagination(\n    [Arguments(10, 20, 50)] int pageSize,\n    [Arguments("asc", "desc")] string sortOrder,\n    [Arguments(true, false)] bool includeDeleted)\n{\n    // Tests all pagination combinations\n    // 3 \xd7 2 \xd7 2 = 12 test cases\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(s.h3,{id:"issue-too-many-test-cases-generated",children:"Issue: Too Many Test Cases Generated"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Problem"}),": Test run takes too long due to exponential growth"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Solution"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Reduce the number of values per parameter"}),"\n",(0,r.jsx)(s.li,{children:"Split into multiple focused test methods"}),"\n",(0,r.jsx)(s.li,{children:"Use more specific test scenarios"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"issue-data-source-returns-no-values",children:"Issue: Data Source Returns No Values"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Problem"}),": A parameter's data source returns an empty enumerable"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Solution"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Ensure data source methods return at least one value"}),"\n",(0,r.jsx)(s.li,{children:"Check that the method is static/accessible"}),"\n",(0,r.jsx)(s.li,{children:"Verify method signature matches expected format"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"issue-parameter-type-mismatch",children:"Issue: Parameter Type Mismatch"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Problem"}),": Data source returns wrong type for parameter"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Solution"}),":"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Ensure data source return type matches parameter type"}),"\n",(0,r.jsxs)(s.li,{children:["Use typed data sources: ",(0,r.jsx)(s.code,{children:"[MethodDataSource<MyClass>]"})]}),"\n",(0,r.jsx)(s.li,{children:"Check that generated values can be cast to parameter type"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/docs/test-authoring/matrix-tests",children:"MatrixDataSource Documentation"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/docs/test-authoring/method-data-source",children:"MethodDataSource Documentation"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/docs/test-authoring/class-data-source",children:"ClassDataSource Documentation"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.a,{href:"/docs/test-authoring/arguments",children:"Arguments Attribute Documentation"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"version-history",children:"Version History"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"v1.0.0"})," - Initial release","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Parameter-level data source support"}),"\n",(0,r.jsx)(s.li,{children:"Cartesian product generation"}),"\n",(0,r.jsxs)(s.li,{children:["Support for all ",(0,r.jsx)(s.code,{children:"IDataSourceAttribute"})," implementations"]}),"\n",(0,r.jsx)(s.li,{children:"Full AOT compatibility"}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var t=n(6540);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);