"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3411],{2740:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"assertions/awaiting","title":"Awaiting","description":"In TUnit you await your assertions, and this serves two purposes:","source":"@site/docs/assertions/awaiting.md","sourceDirName":"assertions","slug":"/assertions/awaiting","permalink":"/docs/assertions/awaiting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Mocking","permalink":"/docs/test-authoring/mocking"},"next":{"title":"And Conditions","permalink":"/docs/assertions/and-conditions"}}');var a=s(4848),i=s(8453);const o={},r="Awaiting",l={},c=[{value:"Complex Assertion Examples",id:"complex-assertion-examples",level:2},{value:"Chaining Multiple Assertions",id:"chaining-multiple-assertions",level:3},{value:"Collection Assertions with Complex Conditions",id:"collection-assertions-with-complex-conditions",level:3},{value:"Async Operation Assertions",id:"async-operation-assertions",level:3},{value:"Nested Object Assertions",id:"nested-object-assertions",level:3},{value:"Exception Assertions with Details",id:"exception-assertions-with-details",level:3},{value:"Custom Assertion Conditions",id:"custom-assertion-conditions",level:3},{value:"DateTime and TimeSpan Assertions",id:"datetime-and-timespan-assertions",level:3},{value:"Floating Point Comparisons",id:"floating-point-comparisons",level:3},{value:"String Pattern Matching",id:"string-pattern-matching",level:3},{value:"Combining Or and And Conditions",id:"combining-or-and-and-conditions",level:3},{value:"Performance Assertions",id:"performance-assertions",level:3},{value:"State Machine Assertions",id:"state-machine-assertions",level:3}];function d(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"awaiting",children:"Awaiting"})}),"\n",(0,a.jsxs)(e.p,{children:["In TUnit you ",(0,a.jsx)(e.code,{children:"await"})," your assertions, and this serves two purposes:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["the ",(0,a.jsx)(e.code,{children:"await"})," keyword is responsible for performing the assertion, before you call await we're building a chain of assertion rules."]}),"\n",(0,a.jsxs)(e.li,{children:["it allows executing and asserting on ",(0,a.jsx)(e.code,{children:"async"})," delegates without performing sync-over-async"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["Because of this, your tests should be ",(0,a.jsx)(e.code,{children:"async"})," and return a ",(0,a.jsx)(e.code,{children:"Task"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Don't worry about forgetting to ",(0,a.jsx)(e.code,{children:"await"})," - There's an analyzer built in that will notify you if you've missed any!",(0,a.jsx)(e.br,{}),"\n","If you forget to ",(0,a.jsx)(e.code,{children:"await"}),", your assertion will not actually be executed, and your test may pass when it should fail."]}),"\n",(0,a.jsx)(e.p,{children:"This will error:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"    [Test]\n    public void MyTest()\n    {\n        var result = Add(1, 2);\n\n        Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,a.jsx)(e.p,{children:"This won't:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"    [Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        await Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,a.jsxs)(e.p,{children:["TUnit is able to take in asynchronous delegates. To be able to assert on these, we need to execute the code. We want to avoid sync-over-async, as this can cause problems and block the thread pool, slowing down your test suite.\nAnd with how fast .NET has become, the overhead of ",(0,a.jsx)(e.code,{children:"Task"}),"s and ",(0,a.jsx)(e.code,{children:"async"})," methods shouldn't be noticable."]}),"\n",(0,a.jsx)(e.h2,{id:"complex-assertion-examples",children:"Complex Assertion Examples"}),"\n",(0,a.jsx)(e.h3,{id:"chaining-multiple-assertions",children:"Chaining Multiple Assertions"}),"\n",(0,a.jsx)(e.p,{children:"You can chain multiple assertions together for more complex validations:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task ComplexObjectValidation()\n{\n    var user = await GetUserAsync("john.doe");\n    \n    // Chain multiple property assertions\n    await Assert.That(user)\n        .IsNotNull()\n        .And.HasProperty(u => u.Email).EqualTo("john.doe@example.com")\n        .And.HasProperty(u => u.Age).GreaterThan(18)\n        .And.HasProperty(u => u.Roles).Contains("Admin");\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"collection-assertions-with-complex-conditions",children:"Collection Assertions with Complex Conditions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task ComplexCollectionAssertions()\n{\n    var orders = await GetOrdersAsync();\n    \n    // Assert multiple conditions on a collection\n    await Assert.That(orders)\n        .HasCount().GreaterThan(0)\n        .And.Contains(o => o.Status == OrderStatus.Completed)\n        .And.DoesNotContain(o => o.Total < 0)\n        .And.HasDistinctItems(new OrderIdComparer());\n    \n    // Assert on filtered subset\n    var completedOrders = orders.Where(o => o.Status == OrderStatus.Completed);\n    await Assert.That(completedOrders)\n        .All(o => o.CompletedDate != null)\n        .And.Any(o => o.Total > 1000);\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"async-operation-assertions",children:"Async Operation Assertions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task AsyncOperationAssertions()\n{\n    // Assert that async operation completes within time limit\n    await Assert.That(async () => await LongRunningOperationAsync())\n        .CompletesWithin(TimeSpan.FromSeconds(5));\n    \n    // Assert that async operation throws specific exception\n    await Assert.That(async () => await RiskyOperationAsync())\n        .Throws<InvalidOperationException>()\n        .WithMessage().Containing("connection failed");\n    \n    // Assert on result of async operation\n    await Assert.That(() => CalculateAsync(10, 20))\n        .ResultsIn(30)\n        .Within(TimeSpan.FromSeconds(1));\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"nested-object-assertions",children:"Nested Object Assertions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task NestedObjectAssertions()\n{\n    var company = await GetCompanyAsync();\n    \n    await Assert.That(company)\n        .IsNotNull()\n        .And.HasProperty(c => c.Name).EqualTo("TechCorp")\n        .And.HasProperty(c => c.Address).Satisfies(address => \n            Assert.That(address)\n                .HasProperty(a => a.City).EqualTo("Seattle")\n                .And.HasProperty(a => a.ZipCode).Matches(@"^\\d{5}$")\n        )\n        .And.HasProperty(c => c.Employees).Satisfies(employees =>\n            Assert.That(employees)\n                .HasCount().Between(100, 500)\n                .And.All(e => e.Email.EndsWith("@techcorp.com"))\n        );\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"exception-assertions-with-details",children:"Exception Assertions with Details"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task DetailedExceptionAssertions()\n{\n    var invalidData = new { Id = -1, Name = "" };\n    \n    // Assert exception with specific properties\n    await Assert.That(() => ProcessDataAsync(invalidData))\n        .Throws<ValidationException>()\n        .WithMessage().EqualTo("Validation failed")\n        .And.WithInnerException<ArgumentException>()\n        .WithParameterName("data");\n    \n    // Assert aggregate exception\n    await Assert.That(() => ParallelOperationAsync())\n        .Throws<AggregateException>()\n        .Where(ex => ex.InnerExceptions.Count == 3)\n        .And.Where(ex => ex.InnerExceptions.All(e => e is TaskCanceledException));\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"custom-assertion-conditions",children:"Custom Assertion Conditions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task CustomAssertionConditions()\n{\n    var measurements = await GetMeasurementsAsync();\n    \n    // Use custom conditions for complex validations\n    await Assert.That(measurements)\n        .Satisfies(m => {\n            var average = m.Average();\n            var stdDev = CalculateStandardDeviation(m);\n            return stdDev < average * 0.1; // Less than 10% deviation\n        }, "Measurements should have low standard deviation");\n    \n    // Combine built-in and custom assertions\n    await Assert.That(measurements)\n        .HasCount().GreaterThan(100)\n        .And.All(m => m > 0)\n        .And.Satisfies(IsNormallyDistributed, "Data should be normally distributed");\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"datetime-and-timespan-assertions",children:"DateTime and TimeSpan Assertions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task DateTimeAssertions()\n{\n    var order = await CreateOrderAsync();\n    \n    // Complex datetime assertions\n    await Assert.That(order.CreatedAt)\n        .IsAfter(DateTime.UtcNow.AddMinutes(-1))\n        .And.IsBefore(DateTime.UtcNow.AddMinutes(1))\n        .And.HasKind(DateTimeKind.Utc);\n    \n    // TimeSpan assertions\n    var processingTime = order.CompletedAt - order.CreatedAt;\n    await Assert.That(processingTime)\n        .IsLessThan(TimeSpan.FromMinutes(5))\n        .And.IsGreaterThan(TimeSpan.Zero);\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"floating-point-comparisons",children:"Floating Point Comparisons"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task FloatingPointAssertions()\n{\n    var calculations = await PerformComplexCalculationsAsync();\n    \n    // Use tolerance for floating point comparisons\n    await Assert.That(calculations.Pi)\n        .IsEqualTo(Math.PI).Within(0.0001);\n    \n    // Assert on collections of floating point numbers\n    await Assert.That(calculations.Results)\n        .All(r => Math.Abs(r) < 1000000) // No overflow\n        .And.Contains(42.0).Within(0.1)  // Contains approximately 42\n        .And.HasSum().EqualTo(expectedSum).Within(0.01);\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"string-pattern-matching",children:"String Pattern Matching"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task StringPatternAssertions()\n{\n    var logs = await GetLogEntriesAsync();\n    \n    // Complex string assertions\n    await Assert.That(logs)\n        .All(log => log.Matches(@"^\\[\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\]"))\n        .And.Any(log => log.Contains("ERROR"))\n        .And.None(log => log.Contains("SENSITIVE_DATA"));\n    \n    // Assert on formatted output\n    var report = await GenerateReportAsync();\n    await Assert.That(report)\n        .StartsWith("Report Generated:")\n        .And.Contains("Total Items:")\n        .And.DoesNotContain("null")\n        .And.HasLength().Between(1000, 5000);\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"combining-or-and-and-conditions",children:"Combining Or and And Conditions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task ComplexLogicalConditions()\n{\n    var product = await GetProductAsync();\n    \n    // Complex logical combinations\n    await Assert.That(product)\n        .HasProperty(p => p.Status)\n        .EqualTo(ProductStatus.Active)\n        .Or.EqualTo(ProductStatus.Pending)\n        .And.HasProperty(p => p.Price)\n        .GreaterThan(0)\n        .And.LessThan(10000);\n    \n    // Multiple condition paths\n    await Assert.That(product.Category)\n        .IsEqualTo("Electronics")\n        .And(Assert.That(product.Warranty).IsNotNull())\n        .Or\n        .IsEqualTo("Books")\n        .And(Assert.That(product.ISBN).IsNotNull());\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"performance-assertions",children:"Performance Assertions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task PerformanceAssertions()\n{\n    var stopwatch = Stopwatch.StartNew();\n    var results = new List<long>();\n    \n    // Measure multiple operations\n    for (int i = 0; i < 100; i++)\n    {\n        var start = stopwatch.ElapsedMilliseconds;\n        await PerformOperationAsync();\n        results.Add(stopwatch.ElapsedMilliseconds - start);\n    }\n    \n    // Assert on performance metrics\n    await Assert.That(results.Average())\n        .IsLessThan(100); // Average under 100ms\n    \n    await Assert.That(results.Max())\n        .IsLessThan(500); // No operation over 500ms\n    \n    await Assert.That(results.Where(r => r > 200).Count())\n        .IsLessThan(5); // Less than 5% over 200ms\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"state-machine-assertions",children:"State Machine Assertions"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task StateMachineAssertions()\n{\n    var workflow = new OrderWorkflow();\n    \n    // Initial state\n    await Assert.That(workflow.State).IsEqualTo(OrderState.New);\n    \n    // State transition assertions\n    await workflow.StartProcessing();\n    await Assert.That(workflow.State)\n        .IsEqualTo(OrderState.Processing)\n        .And(Assert.That(workflow.CanTransitionTo(OrderState.Completed)).IsTrue())\n        .And(Assert.That(workflow.CanTransitionTo(OrderState.New)).IsFalse());\n    \n    // Complex workflow validation\n    await workflow.Complete();\n    await Assert.That(workflow)\n        .HasProperty(w => w.State).EqualTo(OrderState.Completed)\n        .And.HasProperty(w => w.CompletedAt).IsNotNull()\n        .And.HasProperty(w => w.History).Contains(h => h.State == OrderState.Processing);\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"These examples demonstrate the power and flexibility of TUnit's assertion system, showing how you can build complex, readable assertions for various testing scenarios."})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>r});var t=s(6540);const a={},i=t.createContext(a);function o(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);