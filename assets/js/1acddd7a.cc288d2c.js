"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2724],{327:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"migration/xunit","title":"Migrating from xUnit.net","description":"Using TUnit\'s Code Fixers","source":"@site/docs/migration/xunit.md","sourceDirName":"migration","slug":"/migration/xunit","permalink":"/docs/migration/xunit","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Test Configuration","permalink":"/docs/reference/test-configuration"},"next":{"title":"Dynamically Created Tests","permalink":"/docs/experimental/dynamic-tests"}}');var i=s(4848),o=s(8453);const r={},a="Migrating from xUnit.net",l={},d=[{value:"Using TUnit&#39;s Code Fixers",id:"using-tunits-code-fixers",level:2},{value:"Steps",id:"steps",level:3},{value:"Install the TUnit packages to your test projects",id:"install-the-tunit-packages-to-your-test-projects",level:4},{value:"Remove the automatically added global usings",id:"remove-the-automatically-added-global-usings",level:4},{value:"Rebuild the project",id:"rebuild-the-project",level:4},{value:"Run the code fixer via the dotnet CLI",id:"run-the-code-fixer-via-the-dotnet-cli",level:4},{value:"Revert step <code>Remove the automatically added global usings</code>",id:"revert-step-remove-the-automatically-added-global-usings",level:4},{value:"Perform any manual bits that are still necessary",id:"perform-any-manual-bits-that-are-still-necessary",level:4},{value:"Remove the xUnit packages",id:"remove-the-xunit-packages",level:4},{value:"Done! (Hopefully)",id:"done-hopefully",level:4},{value:"Manually",id:"manually",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"migrating-from-xunitnet",children:"Migrating from xUnit.net"})}),"\n",(0,i.jsx)(t.h2,{id:"using-tunits-code-fixers",children:"Using TUnit's Code Fixers"}),"\n",(0,i.jsx)(t.p,{children:"TUnit has some code fixers to help automate some of the migration for you."}),"\n",(0,i.jsx)(t.p,{children:"Now bear in mind, these won't be perfect, and you'll likely still have to do some bits manually, but it should make life a bit easier."}),"\n",(0,i.jsx)(t.p,{children:"If you think something could be improved, or something seemed to break, raise an issue so we can make this better and work for more people."}),"\n",(0,i.jsx)(t.h3,{id:"steps",children:"Steps"}),"\n",(0,i.jsx)(t.h4,{id:"install-the-tunit-packages-to-your-test-projects",children:"Install the TUnit packages to your test projects"}),"\n",(0,i.jsx)(t.p,{children:"Use your IDE or the dotnet CLI to add the TUnit packages to your test projects"}),"\n",(0,i.jsx)(t.h4,{id:"remove-the-automatically-added-global-usings",children:"Remove the automatically added global usings"}),"\n",(0,i.jsx)(t.p,{children:"In your csproj add:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:"    <PropertyGroup>\n        <TUnitImplicitUsings>false</TUnitImplicitUsings>\n        <TUnitAssertionsImplicitUsings>false</TUnitAssertionsImplicitUsings>\n    </PropertyGroup>\n"})}),"\n",(0,i.jsx)(t.p,{children:"This is temporary - Just to make sure no types clash, and so the code fixers can distinguish between xUnit and TUnit types with similar names."}),"\n",(0,i.jsx)(t.h4,{id:"rebuild-the-project",children:"Rebuild the project"}),"\n",(0,i.jsx)(t.p,{children:"This ensures the TUnit packages have been restored and the analyzers should be loaded."}),"\n",(0,i.jsx)(t.h4,{id:"run-the-code-fixer-via-the-dotnet-cli",children:"Run the code fixer via the dotnet CLI"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"dotnet format analyzers --severity info --diagnostics TUXU0001"})}),"\n",(0,i.jsxs)(t.h4,{id:"revert-step-remove-the-automatically-added-global-usings",children:["Revert step ",(0,i.jsx)(t.code,{children:"Remove the automatically added global usings"})]}),"\n",(0,i.jsx)(t.h4,{id:"perform-any-manual-bits-that-are-still-necessary",children:"Perform any manual bits that are still necessary"}),"\n",(0,i.jsx)(t.p,{children:"This bit's on you! You'll have to work out what still needs doing.\nRaise an issue if you think it could be automated."}),"\n",(0,i.jsx)(t.h4,{id:"remove-the-xunit-packages",children:"Remove the xUnit packages"}),"\n",(0,i.jsx)(t.p,{children:"Simply uninstall them once you've migrated"}),"\n",(0,i.jsx)(t.h4,{id:"done-hopefully",children:"Done! (Hopefully)"}),"\n",(0,i.jsx)(t.h2,{id:"manually",children:"Manually"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Fact]"})," becomes ",(0,i.jsx)(t.code,{children:"[Test]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Theory]"})," becomes ",(0,i.jsx)(t.code,{children:"[Test]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Trait]"})," becomes ",(0,i.jsx)(t.code,{children:"[Property]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[InlineData]"})," becomes ",(0,i.jsx)(t.code,{children:"[Arguments]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[MemberData]"})," becomes ",(0,i.jsx)(t.code,{children:"[MethodDataSource]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[ClassData]"})," becomes ",(0,i.jsx)(t.code,{children:"[MethodDataSource]"})," and point to the GetEnumerator method. Objects will need to be converted from ",(0,i.jsx)(t.code,{children:"object"})," to their actual expected types"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[Collection]"})," becomes ",(0,i.jsx)(t.code,{children:"[ClassDataSource<>(Shared = SharedType.Keyed/PerTestSession)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"[AssemblyFixture]"})," becomes ",(0,i.jsx)(t.code,{children:"[ClassDataSource<>(Shared = SharedType.PerAssembly)]"})]}),"\n",(0,i.jsx)(t.p,{children:"Interfaces:"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"IClassFixture<>"})," becomes an attribute ",(0,i.jsx)(t.code,{children:"[ClassDataSource<>(Shared = SharedType.PerClass)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"IAsyncLifetime"})," on a test class becomes a method attributed with ",(0,i.jsx)(t.code,{children:"[Before(Test)]"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"IAsyncLifetime"})," on injected data becomes ",(0,i.jsx)(t.code,{children:"IAsyncInitializer"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"I(Async)Disposable"})," on a test class can remain, or be converted to a method attributed with ",(0,i.jsx)(t.code,{children:"[After(Test)]"})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(6540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);