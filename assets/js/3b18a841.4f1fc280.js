"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9885],{4691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"test-lifecycle/dependency-injection","title":"Dependency Injection","description":"Dependency Injection can be set up by leveraging the power of the Data Source Generators.","source":"@site/docs/test-lifecycle/dependency-injection.md","sourceDirName":"test-lifecycle","slug":"/test-lifecycle/dependency-injection","permalink":"/docs/test-lifecycle/dependency-injection","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Class Constructor Helpers","permalink":"/docs/test-lifecycle/class-constructors"},"next":{"title":"Retrying","permalink":"/docs/execution/retrying"}}');var r=t(4848),o=t(8453);const s={},i="Dependency Injection",a={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"})}),"\n",(0,r.jsx)(n.p,{children:"Dependency Injection can be set up by leveraging the power of the Data Source Generators."}),"\n",(0,r.jsx)(n.p,{children:"TUnit provides you an abstract class to handle most of the logic for you, you need to simply provide the implementation on how to create a DI Scope, and then how to get or create an object when given its type."}),"\n",(0,r.jsxs)(n.p,{children:["So create a new class that inherits from ",(0,r.jsx)(n.code,{children:"DependencyInjectionDataSourceAttribute<TScope>"})," and pass through the Scope type as the generic argument."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of that using the Microsoft.Extensions.DependencyInjection library:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MicrosoftDependencyInjectionDataSourceAttribute : DependencyInjectionDataSourceAttribute<IServiceScope>\n{\n    private static readonly IServiceProvider ServiceProvider = CreateSharedServiceProvider();\n\n    public override IServiceScope CreateScope(DataGeneratorMetadata dataGeneratorMetadata)\n    {\n        return ServiceProvider.CreateAsyncScope();\n    }\n\n    public override object? Create(IServiceScope scope, Type type)\n    {\n        return scope.ServiceProvider.GetService(type);\n    }\n    \n    private static IServiceProvider CreateSharedServiceProvider()\n    {\n        return new ServiceCollection()\n            .AddSingleton<SomeClass1>()\n            .AddSingleton<SomeClass2>()\n            .AddTransient<SomeClass3>()\n            .BuildServiceProvider();\n    }\n}\n\n[MicrosoftDependencyInjectionDataSource]\npublic class MyTestClass(SomeClass1 someClass1, SomeClass2 someClass2, SomeClass3 someClass3)\n{\n    [Test]\n    public async Task Test()\n    {\n        // ...\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var c=t(6540);const r={},o=c.createContext(r);function s(e){const n=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),c.createElement(o.Provider,{value:n},e.children)}}}]);