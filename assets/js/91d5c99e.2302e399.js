"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[570],{51:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"tutorial-assertions/scopes","title":"Assertion Scopes","description":"In TUnit you can create an assertion scope by calling Assert.Multiple(). This returns an IDisposable and so you should use that by encapsulating the returned value in a using block. This will make sure that any assertion exceptionss are aggregated together and thrown only after the scope is exited.","source":"@site/docs/tutorial-assertions/scopes.md","sourceDirName":"tutorial-assertions","slug":"/tutorial-assertions/scopes","permalink":"/docs/tutorial-assertions/scopes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"And Conditions","permalink":"/docs/tutorial-assertions/and-conditions"},"next":{"title":"Extensibility","permalink":"/docs/category/extensibility"}}');var i=t(4848),r=t(8453);const a={sidebar_position:3},o="Assertion Scopes",c={},l=[];function u(e){const s={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"assertion-scopes",children:"Assertion Scopes"})}),"\n",(0,i.jsxs)(s.p,{children:["In TUnit you can create an assertion scope by calling ",(0,i.jsx)(s.code,{children:"Assert.Multiple()"}),". This returns an ",(0,i.jsx)(s.code,{children:"IDisposable"})," and so you should use that by encapsulating the returned value in a ",(0,i.jsx)(s.code,{children:"using"})," block. This will make sure that any assertion exceptionss are aggregated together and thrown only after the scope is exited."]}),"\n",(0,i.jsx)(s.p,{children:"This is useful for asserting multiple properties and showing all errors at once, instead of having to fix > rerun > fix > rerun."}),"\n",(0,i.jsx)(s.p,{children:"Implicit Scope:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"[Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        using var _ = Assert.Multiple();\n\n        await Assert.That(result).IsPositive();\n        await Assert.That(result).IsEqualTo(3);\n    }\n"})}),"\n",(0,i.jsx)(s.p,{children:"Explicit Scope:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"[Test]\n    public async Task MyTest()\n    {\n        var result = Add(1, 2);\n\n        using (Assert.Multiple())\n        {\n            await Assert.That(result).IsPositive();\n            await Assert.That(result).IsEqualTo(3);\n        }\n    }\n"})})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var n=t(6540);const i={},r=n.createContext(i);function a(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);