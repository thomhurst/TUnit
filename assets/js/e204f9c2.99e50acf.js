"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5494],{4104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"test-lifecycle/property-injection","title":"Property Injection","description":"TUnit\'s AOT-compatible property injection system makes it easy to initialize properties on your test class with compile-time safety and excellent performance.","source":"@site/docs/test-lifecycle/property-injection.md","sourceDirName":"test-lifecycle","slug":"/test-lifecycle/property-injection","permalink":"/docs/test-lifecycle/property-injection","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Test Clean Ups","permalink":"/docs/test-lifecycle/cleanup"},"next":{"title":"Event Subscribing","permalink":"/docs/test-lifecycle/event-subscribing"}}');var i=n(4848),s=n(8453);const a={},o="Property Injection",c={},l=[{value:"AOT-Compatible Property Attributes",id:"aot-compatible-property-attributes",level:2},{value:"Async Property Initialization",id:"async-property-initialization",level:2},{value:"Basic Property Injection Examples",id:"basic-property-injection-examples",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"property-injection",children:"Property Injection"})}),"\n",(0,i.jsx)(t.p,{children:"TUnit's AOT-compatible property injection system makes it easy to initialize properties on your test class with compile-time safety and excellent performance."}),"\n",(0,i.jsxs)(t.p,{children:["Your properties must be marked with the ",(0,i.jsx)(t.code,{children:"required"})," keyword and then simply place a data attribute on it.\nThe required keyword keeps your code clean and correct. If a property isn't passed in, you'll get a compiler warning, so you know something has gone wrong. It also gets rid of any pesky nullability warnings."]}),"\n",(0,i.jsx)(t.h2,{id:"aot-compatible-property-attributes",children:"AOT-Compatible Property Attributes"}),"\n",(0,i.jsx)(t.p,{children:"Supported attributes for properties in AOT mode:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Argument"})," - Compile-time constant values"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"MethodDataSource"})," - Static method data sources"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"ClassDataSource"})," - Static class-based data sources"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"DataSourceGeneratorAttribute"})," - Source-generated data (first item only)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"DataSourceForProperty"})," - Dependency injection with service provider"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The AOT system generates strongly-typed property setters at compile time, eliminating reflection overhead and ensuring full Native AOT compatibility."}),"\n",(0,i.jsx)(t.h2,{id:"async-property-initialization",children:"Async Property Initialization"}),"\n",(0,i.jsxs)(t.p,{children:["Properties can implement ",(0,i.jsx)(t.code,{children:"IAsyncInitializable"})," for complex setup scenarios with automatic lifecycle management:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class AsyncPropertyExample : IAsyncInitializable, IAsyncDisposable\n{\n    public bool IsInitialized { get; private set; }\n    public string? ConnectionString { get; private set; }\n\n    public async Task InitializeAsync()\n    {\n        await Task.Delay(10); // Simulate async setup\n        ConnectionString = "Server=localhost;Database=test";\n        IsInitialized = true;\n    }\n\n    public async ValueTask DisposeAsync()\n    {\n        await Task.Delay(1); // Cleanup\n        IsInitialized = false;\n        ConnectionString = null;\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"basic-property-injection-examples",children:"Basic Property Injection Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class PropertySetterTests\n{\n    // Compile-time constant injection\n    [Arguments("1")]\n    public required string Property1 { get; init; }\n        \n    // Static method data source injection\n    [MethodDataSource(nameof(GetMethodData))]\n    public required string Property2 { get; init; }\n        \n    // Class-based data source injection\n    [ClassDataSource<InnerModel>]\n    public required InnerModel Property3 { get; init; }\n    \n    // Globally shared data source\n    [ClassDataSource<InnerModel>(Shared = SharedType.Globally)]\n    public required InnerModel Property4 { get; init; }\n    \n    // Class-scoped shared data source\n    [ClassDataSource<InnerModel>(Shared = SharedType.ForClass)]\n    public required InnerModel Property5 { get; init; }\n    \n    // Keyed shared data source\n    [ClassDataSource<InnerModel>(Shared = SharedType.Keyed, Key = "Key")]\n    public required InnerModel Property6 { get; init; }\n        \n    // Source-generated data injection\n    [DataSourceGeneratorTests.AutoFixtureGenerator<string>]\n    public required string Property7 { get; init; }\n\n    // Service provider dependency injection\n    [DataSourceForProperty<AsyncPropertyExample>]\n    public required AsyncPropertyExample AsyncService { get; init; }\n    \n    [Test]\n    public async Task Test()\n    {\n        // All properties are automatically initialized before this test runs\n        await Assert.That(Property1).IsEqualTo("1");\n        await Assert.That(Property2).IsNotNull();\n        await Assert.That(Property3).IsNotNull();\n        await Assert.That(AsyncService.IsInitialized).IsTrue();\n        \n        Console.WriteLine($"Property7: {Property7}");\n    }\n\n    // Static data source method for Property2\n    public static IEnumerable<string> GetMethodData()\n    {\n        yield return "method_data_1";\n        yield return "method_data_2";\n    }\n}\n\n// Example model for ClassDataSource\npublic class InnerModel\n{\n    public string Name { get; set; } = "";\n    public int Value { get; set; }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(6540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);