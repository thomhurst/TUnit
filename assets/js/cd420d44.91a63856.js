"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7084],{5204:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"assertions/extensibility/custom-assertions","title":"Custom Assertions","description":"The TUnit Assertions can be easily extended so that you can create your own assertions.","source":"@site/docs/assertions/extensibility/custom-assertions.md","sourceDirName":"assertions/extensibility","slug":"/assertions/extensibility/custom-assertions","permalink":"/docs/assertions/extensibility/custom-assertions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Type Checking","permalink":"/docs/assertions/type-checking"},"next":{"title":"Source Generator Assertions","permalink":"/docs/assertions/extensibility/source-generator-assertions"}}');var r=s(4848),i=s(8453);const o={sidebar_position:1},a="Custom Assertions",c={},l=[{value:"Creating a Custom Assertion",id:"creating-a-custom-assertion",level:2},{value:"Step 1: Create an Assertion Class",id:"step-1-create-an-assertion-class",level:3},{value:"Step 2: Create an Extension Method",id:"step-2-create-an-extension-method",level:3},{value:"Step 3: Use Your Custom Assertion",id:"step-3-use-your-custom-assertion",level:3},{value:"Chaining with And/Or",id:"chaining-with-andor",level:2},{value:"Key Points",id:"key-points",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"custom-assertions",children:"Custom Assertions"})}),"\n",(0,r.jsx)(n.p,{children:"The TUnit Assertions can be easily extended so that you can create your own assertions."}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-custom-assertion",children:"Creating a Custom Assertion"}),"\n",(0,r.jsx)(n.p,{children:"To create a custom assertion, you need to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create an Assertion Class"})," that inherits from ",(0,r.jsx)(n.code,{children:"Assertion<TValue>"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Implement the required methods"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create an extension method"})," on ",(0,r.jsx)(n.code,{children:"IAssertionSource<T>"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"step-1-create-an-assertion-class",children:"Step 1: Create an Assertion Class"}),"\n",(0,r.jsxs)(n.p,{children:["Your assertion class should inherit from ",(0,r.jsx)(n.code,{children:"Assertion<TValue>"})," where ",(0,r.jsx)(n.code,{children:"TValue"})," is the type being asserted."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using TUnit.Assertions.Core;\n\npublic class StringContainsAssertion : Assertion<string>\n{\n    private readonly string _expected;\n    private readonly StringComparison _comparison;\n\n    public StringContainsAssertion(\n        AssertionContext<string> context,\n        string expected,\n        StringComparison comparison = StringComparison.Ordinal)\n        : base(context)\n    {\n        _expected = expected ?? throw new ArgumentNullException(nameof(expected));\n        _comparison = comparison;\n    }\n\n    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<string> metadata)\n    {\n        var value = metadata.Value;\n        var exception = metadata.Exception;\n\n        if (exception != null)\n            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().Name}"));\n\n        if (value == null)\n            return Task.FromResult(AssertionResult.Failed("value was null"));\n\n        if (value.Contains(_expected, _comparison))\n            return Task.FromResult(AssertionResult.Passed);\n\n        return Task.FromResult(AssertionResult.Failed($"\'{value}\' does not contain \'{_expected}\'"));\n    }\n\n    protected override string GetExpectation()\n        => $"to contain \\"{_expected}\\"";\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-create-an-extension-method",children:"Step 2: Create an Extension Method"}),"\n",(0,r.jsxs)(n.p,{children:["Create an extension method on ",(0,r.jsx)(n.code,{children:"IAssertionSource<T>"})," that returns your custom assertion:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using System.Runtime.CompilerServices;\nusing TUnit.Assertions.Core;\n\npublic static class StringAssertionExtensions\n{\n    public static StringContainsAssertion ContainsIgnoreCase(\n        this IAssertionSource<string> source,\n        string expected,\n        [CallerArgumentExpression(nameof(expected))] string? expression = null)\n    {\n        source.Context.ExpressionBuilder.Append($".ContainsIgnoreCase({expression})");\n        return new StringContainsAssertion(\n            source.Context,\n            expected,\n            StringComparison.OrdinalIgnoreCase);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-use-your-custom-assertion",children:"Step 3: Use Your Custom Assertion"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'await Assert.That("Hello World")\n    .ContainsIgnoreCase("WORLD");  // Uses your custom assertion!\n'})}),"\n",(0,r.jsx)(n.h2,{id:"chaining-with-andor",children:"Chaining with And/Or"}),"\n",(0,r.jsxs)(n.p,{children:["Because your assertion returns an ",(0,r.jsx)(n.code,{children:"Assertion<T>"})," type, it automatically supports chaining with ",(0,r.jsx)(n.code,{children:".And"})," and ",(0,r.jsx)(n.code,{children:".Or"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'await Assert.That("Hello World")\n    .ContainsIgnoreCase("WORLD")\n    .And\n    .ContainsIgnoreCase("HELLO");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"key-points",children:"Key Points"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extension target"}),": Always extend ",(0,r.jsx)(n.code,{children:"IAssertionSource<T>"})," so your method works on assertions, And, and Or continuations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Append expression"}),": Call ",(0,r.jsx)(n.code,{children:"source.Context.ExpressionBuilder.Append(...)"})," to build helpful error messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return your assertion"}),": Return a new instance of your custom ",(0,r.jsx)(n.code,{children:"Assertion<T>"})," subclass"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Context sharing"}),": Pass ",(0,r.jsx)(n.code,{children:"source.Context"})," to your assertion constructor (it contains the evaluation context and expression builder)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CheckAsync parameter"}),": Use ",(0,r.jsx)(n.code,{children:"EvaluationMetadata<TValue> metadata"})," which contains both ",(0,r.jsx)(n.code,{children:"Value"})," and ",(0,r.jsx)(n.code,{children:"Exception"})," properties"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CallerArgumentExpression"}),": Use this attribute to capture parameter expressions for better error messages"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);