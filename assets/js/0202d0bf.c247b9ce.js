"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[399],{9922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"execution/retrying","title":"Retrying","description":"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating.","source":"@site/docs/execution/retrying.md","sourceDirName":"execution","slug":"/execution/retrying","permalink":"/docs/execution/retrying","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Dependency Injection","permalink":"/docs/test-lifecycle/dependency-injection"},"next":{"title":"Repeating","permalink":"/docs/execution/repeating"}}');var r=n(4848),i=n(8453);const o={sidebar_position:3},c="Retrying",a={},u=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"retrying",children:"Retrying"})}),"\n",(0,r.jsx)(t.p,{children:"Unfortunately sometimes our tests hit issues. It could be a blip on the network, but that could cause our entire test suite to fail which is frustrating."}),"\n",(0,r.jsxs)(t.p,{children:["If you want to retry a test, add a ",(0,r.jsx)(t.code,{children:"[RetryAttribute]"})," onto your test method or class. This takes an ",(0,r.jsx)(t.code,{children:"int"})," of how many times you'd like to retry."]}),"\n",(0,r.jsx)(t.p,{children:"This can be used on base classes and inherited to affect all tests in sub-classes."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test]\n    [Retry(3)]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The basic ",(0,r.jsx)(t.code,{children:"RetryAttribute"})," will retry on any exception."]}),"\n",(0,r.jsxs)(t.p,{children:["If you only want to retry on certain conditions, you can create your own attribute that inherits from ",(0,r.jsx)(t.code,{children:"RetryAttribute"}),". There's a ",(0,r.jsx)(t.code,{children:"ShouldRetry"})," method that can be overridden, where you can access the test information and the type of exception that was thrown."]}),"\n",(0,r.jsx)(t.p,{children:"If this method returns true, the test can be retried, otherwise it'll fail."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class RetryTransientHttpAttribute : RetryAttribute\n{\n    public RetryTransientHttpAttribute(int times) : base(times)\n    {\n    }\n\n    public override Task<bool> ShouldRetry(TestInformation testInformation, Exception exception)\n    {\n        if (exception is HttpRequestException requestException)\n        {\n            return Task.FromResult(requestException.StatusCode is\n                HttpStatusCode.BadGateway\n                or HttpStatusCode.TooManyRequests\n                or HttpStatusCode.GatewayTimeout\n                or HttpStatusCode.RequestTimeout);\n        }\n\n        return Task.FromResult(false);\n    }\n}\n\npublic class MyTestClass\n{\n    [Test]\n    [RetryTransientHttp(3)]\n    public async Task MyTest()\n    {\n        \n    }\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);