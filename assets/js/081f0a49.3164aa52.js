"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9398],{9806:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"execution/ci-cd-reporting","title":"CI/CD Reporting","description":"TUnit provides built-in integration with continuous integration and deployment platforms, automatically detecting and adapting to various CI environments.","source":"@site/docs/execution/ci-cd-reporting.md","sourceDirName":"execution","slug":"/execution/ci-cd-reporting","permalink":"/docs/execution/ci-cd-reporting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Engine Modes","permalink":"/docs/execution/engine-modes"},"next":{"title":"Not in Parallel","permalink":"/docs/parallelism/not-in-parallel"}}');var s=t(4848),l=t(8453);const r={},o="CI/CD Reporting",a={},d=[{value:"GitHub Actions Reporter",id:"github-actions-reporter",level:2},{value:"Automatic Detection",id:"automatic-detection",level:3},{value:"Reporter Styles",id:"reporter-styles",level:3},{value:"Collapsible Style (Default)",id:"collapsible-style-default",level:4},{value:"Full Style (Legacy)",id:"full-style-legacy",level:4},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Command Line",id:"command-line",level:4},{value:"Environment Variable",id:"environment-variable",level:4},{value:"GitHub Actions Workflow Example",id:"github-actions-workflow-example",level:3},{value:"Disabling the GitHub Reporter",id:"disabling-the-github-reporter",level:3},{value:"Via Environment Variable",id:"via-environment-variable",level:4},{value:"File Size Limitations",id:"file-size-limitations",level:3},{value:"Filtering Test Output",id:"filtering-test-output",level:3},{value:"Other CI Platforms",id:"other-ci-platforms",level:2},{value:"Azure DevOps",id:"azure-devops",level:3},{value:"Jenkins",id:"jenkins",level:3},{value:"GitLab CI",id:"gitlab-ci",level:3},{value:"Environment Detection",id:"environment-detection",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"GitHub Reporter Not Working",id:"github-reporter-not-working",level:3},{value:"Summary Not Appearing",id:"summary-not-appearing",level:3},{value:"Large Summary Files",id:"large-summary-files",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cicd-reporting",children:"CI/CD Reporting"})}),"\n",(0,s.jsx)(n.p,{children:"TUnit provides built-in integration with continuous integration and deployment platforms, automatically detecting and adapting to various CI environments."}),"\n",(0,s.jsx)(n.h2,{id:"github-actions-reporter",children:"GitHub Actions Reporter"}),"\n",(0,s.jsxs)(n.p,{children:["When running in GitHub Actions, TUnit automatically generates a test summary that appears in the workflow run summary. This feature activates when the ",(0,s.jsx)(n.code,{children:"GITHUB_ACTIONS"})," environment variable is detected."]}),"\n",(0,s.jsx)(n.h3,{id:"automatic-detection",children:"Automatic Detection"}),"\n",(0,s.jsx)(n.p,{children:"The GitHub reporter automatically enables when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"GITHUB_ACTIONS"})," environment variable is set"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"GITHUB_STEP_SUMMARY"})," environment variable points to a valid file"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"No additional configuration is required for basic functionality."}),"\n",(0,s.jsx)(n.h3,{id:"reporter-styles",children:"Reporter Styles"}),"\n",(0,s.jsx)(n.p,{children:"TUnit's GitHub reporter supports two output styles:"}),"\n",(0,s.jsx)(n.h4,{id:"collapsible-style-default",children:"Collapsible Style (Default)"}),"\n",(0,s.jsx)(n.p,{children:"The collapsible style provides a clean, concise summary with expandable details:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"### TestAssembly (.NET 9.0)\n\n| Test Count | Status |\n| --- | --- |\n| 95 | Passed |\n| 5 | Failed |\n\n<details>\n<summary>\ud83d\udcca Test Details (click to expand)</summary>\n\n### Details\n| Test | Status | Details | Duration |\n| --- | --- | --- | --- |\n| MyTest.ShouldFail | Failed | Expected: true, Actual: false | 123ms |\n| ... | ... | ... | ... |\n\n</details>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is the ",(0,s.jsx)(n.strong,{children:"default style"})," as of TUnit v1.0.0, designed to:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep workflow summaries clean and navigable"}),"\n",(0,s.jsx)(n.li,{children:"Allow quick overview of test results"}),"\n",(0,s.jsx)(n.li,{children:"Provide full details on demand"}),"\n",(0,s.jsx)(n.li,{children:"Work well with large test suites"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"full-style-legacy",children:"Full Style (Legacy)"}),"\n",(0,s.jsx)(n.p,{children:"The full style displays all test details directly in the summary:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"### TestAssembly (.NET 9.0)\n\n| Test Count | Status |\n| --- | --- |\n| 95 | Passed |\n| 5 | Failed |\n\n### Details\n| Test | Status | Details | Duration |\n| --- | --- | --- | --- |\n| MyTest.ShouldFail | Failed | Expected: true, Actual: false | 123ms |\n| ... | ... | ... | ... |\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.p,{children:"You can control the GitHub reporter style using either command-line arguments or environment variables:"}),"\n",(0,s.jsx)(n.h4,{id:"command-line",children:"Command Line"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use collapsible style (default)\ndotnet test -- --github-reporter-style collapsible\n\n# Use full style (legacy behavior)\ndotnet test -- --github-reporter-style full\n"})}),"\n",(0,s.jsx)(n.h4,{id:"environment-variable",children:"Environment Variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Set reporter style via environment variable\nexport TUNIT_GITHUB_REPORTER_STYLE=collapsible  # or 'full'\ndotnet test\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# In GitHub Actions workflow\n- name: Run Tests\n  env:\n    TUNIT_GITHUB_REPORTER_STYLE: collapsible\n  run: dotnet test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"github-actions-workflow-example",children:"GitHub Actions Workflow Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: Test\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup .NET\n      uses: actions/setup-dotnet@v3\n      with:\n        dotnet-version: '9.0.x'\n    \n    - name: Run Tests with Collapsible Reporter\n      run: dotnet test --logger \"console;verbosity=normal\"\n      # GitHub reporter auto-detects and uses collapsible style by default\n    \n    - name: Run Tests with Full Reporter\n      run: dotnet test -- --github-reporter-style full\n      # Explicitly use full style for all details\n"})}),"\n",(0,s.jsx)(n.h3,{id:"disabling-the-github-reporter",children:"Disabling the GitHub Reporter"}),"\n",(0,s.jsx)(n.p,{children:"If you need to disable the GitHub reporter entirely:"}),"\n",(0,s.jsx)(n.h4,{id:"via-environment-variable",children:"Via Environment Variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export TUNIT_DISABLE_GITHUB_REPORTER=true\n# or\nexport DISABLE_GITHUB_REPORTER=true\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# In GitHub Actions workflow\n- name: Run Tests Without GitHub Reporter\n  env:\n    TUNIT_DISABLE_GITHUB_REPORTER: true\n  run: dotnet test\n"})}),"\n",(0,s.jsx)(n.h3,{id:"file-size-limitations",children:"File Size Limitations"}),"\n",(0,s.jsx)(n.p,{children:"The GitHub reporter respects GitHub's file size limits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Maximum summary file size: 1MB"}),"\n",(0,s.jsx)(n.li,{children:"If the output would exceed this limit, the reporter will skip writing to prevent errors"}),"\n",(0,s.jsx)(n.li,{children:"Consider using the collapsible style for large test suites to reduce summary size"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"filtering-test-output",children:"Filtering Test Output"}),"\n",(0,s.jsx)(n.p,{children:"When using the GitHub reporter, only non-passing tests are included in the details section:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Failed tests"}),"\n",(0,s.jsx)(n.li,{children:"Skipped tests"}),"\n",(0,s.jsx)(n.li,{children:"Timed out tests"}),"\n",(0,s.jsx)(n.li,{children:"Cancelled tests"}),"\n",(0,s.jsx)(n.li,{children:"Tests that never completed (in progress)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Passed tests are counted but not listed in details to keep the summary focused on actionable items."}),"\n",(0,s.jsx)(n.h2,{id:"other-ci-platforms",children:"Other CI Platforms"}),"\n",(0,s.jsx)(n.p,{children:"While TUnit currently provides specialized support for GitHub Actions, it works with all CI/CD platforms through standard test output formats:"}),"\n",(0,s.jsx)(n.h3,{id:"azure-devops",children:"Azure DevOps"}),"\n",(0,s.jsx)(n.p,{children:"Use TRX reporting for Azure DevOps integration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet test --report-trx --report-trx-filename TestResults.trx\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jenkins",children:"Jenkins"}),"\n",(0,s.jsx)(n.p,{children:"Jenkins can consume various test output formats:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Generate TRX report for Jenkins\ndotnet test --report-trx\n\n# Or use console output with appropriate verbosity\ndotnet test --logger "console;verbosity=detailed"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"gitlab-ci",children:"GitLab CI"}),"\n",(0,s.jsx)(n.p,{children:"GitLab can parse test results in various formats:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"test:\n  script:\n    - dotnet test --report-trx\n  artifacts:\n    reports:\n      junit:\n        - TestResults/*.trx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"environment-detection",children:"Environment Detection"}),"\n",(0,s.jsx)(n.p,{children:"TUnit automatically detects common CI environments through environment variables:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Platform"}),(0,s.jsx)(n.th,{children:"Detection Variables"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GitHub Actions"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GITHUB_ACTIONS"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Azure DevOps"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AZURE_PIPELINES"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Jenkins"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"JENKINS_URL"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GitLab CI"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"GITLAB_CI"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CircleCI"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CIRCLECI"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Travis CI"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TRAVIS"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"AppVeyor"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"APPVEYOR"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"TeamCity"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TEAMCITY_VERSION"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Generic CI"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"CI"}),", ",(0,s.jsx)(n.code,{children:"CONTINUOUS_INTEGRATION"})]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"This detection helps TUnit optimize its behavior for each platform."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Collapsible Style for Large Test Suites"}),": The default collapsible style keeps summaries manageable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filter Tests in CI"}),": Use ",(0,s.jsx)(n.code,{children:"--treenode-filter"})," to run specific test subsets in different CI jobs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set Appropriate Timeouts"}),": Use ",(0,s.jsx)(n.code,{children:"--timeout"})," to prevent hanging builds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable Fail-Fast for Quick Feedback"}),": Use ",(0,s.jsx)(n.code,{children:"--fail-fast"})," in PR validation builds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Customize Verbosity"}),": Adjust ",(0,s.jsx)(n.code,{children:"--output"})," based on your debugging needs"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"github-reporter-not-working",children:"GitHub Reporter Not Working"}),"\n",(0,s.jsx)(n.p,{children:"If the GitHub reporter isn't generating summaries:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check Environment Variables"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"echo $GITHUB_ACTIONS  # Should output 'true'\necho $GITHUB_STEP_SUMMARY  # Should point to a file\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Verify Not Disabled"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Ensure these are not set\necho $TUNIT_DISABLE_GITHUB_REPORTER\necho $DISABLE_GITHUB_REPORTER\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check File Permissions"}),": Ensure the process can write to ",(0,s.jsx)(n.code,{children:"GITHUB_STEP_SUMMARY"})," file"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Review Test Output"}),": Run with ",(0,s.jsx)(n.code,{children:"--diagnostic"})," to see detailed logs"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"summary-not-appearing",children:"Summary Not Appearing"}),"\n",(0,s.jsx)(n.p,{children:"If tests run but no summary appears:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check if all tests passed (summaries may be minimal for all-passing runs)"}),"\n",(0,s.jsx)(n.li,{children:"Verify the workflow has completed (summaries appear after job completion)"}),"\n",(0,s.jsx)(n.li,{children:'Check the "Summary" section of the GitHub Actions run page'}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"large-summary-files",children:"Large Summary Files"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter file size issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Switch to collapsible style: ",(0,s.jsx)(n.code,{children:"--github-reporter-style collapsible"})]}),"\n",(0,s.jsxs)(n.li,{children:["Filter tests to reduce output: ",(0,s.jsx)(n.code,{children:'--treenode-filter "critical-tests"'})]}),"\n",(0,s.jsx)(n.li,{children:"Run tests in separate jobs with focused test subsets"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);