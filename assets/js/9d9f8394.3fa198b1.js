"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9013],{7309:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting Guide","description":"This guide covers common issues you might encounter when using TUnit and their solutions.","source":"@site/docs/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/docs/troubleshooting","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var t=s(4848),l=s(8453);const r={},o="Troubleshooting Guide",c={},a=[{value:"Test Discovery Issues",id:"test-discovery-issues",level:2},{value:"Tests Not Being Discovered",id:"tests-not-being-discovered",level:3},{value:"1. Missing TUnit Package",id:"1-missing-tunit-package",level:4},{value:"2. Microsoft.NET.Test.Sdk Conflict",id:"2-microsoftnettestsdk-conflict",level:4},{value:"3. Missing Test Attribute",id:"3-missing-test-attribute",level:4},{value:"4. Non-Public Test Methods",id:"4-non-public-test-methods",level:4},{value:"5. Static Test Methods",id:"5-static-test-methods",level:4},{value:"AOT Compilation Errors",id:"aot-compilation-errors",level:3},{value:"1. Enable AOT-Compatible Mode",id:"1-enable-aot-compatible-mode",level:4},{value:"2. Use AOT-Compatible Data Sources",id:"2-use-aot-compatible-data-sources",level:4},{value:"Test Execution Issues",id:"test-execution-issues",level:2},{value:"Tests Hanging or Deadlocking",id:"tests-hanging-or-deadlocking",level:3},{value:"1. Async Deadlocks",id:"1-async-deadlocks",level:4},{value:"2. Parallel Execution Conflicts",id:"2-parallel-execution-conflicts",level:4},{value:"3. Circular Dependencies",id:"3-circular-dependencies",level:4},{value:"Timeout Exceptions",id:"timeout-exceptions",level:3},{value:"1. Increase Timeout",id:"1-increase-timeout",level:4},{value:"2. Global Timeout Configuration",id:"2-global-timeout-configuration",level:4},{value:"3. Check for Infinite Loops",id:"3-check-for-infinite-loops",level:4},{value:"Assertion Failures",id:"assertion-failures",level:2},{value:"Confusing Assertion Messages",id:"confusing-assertion-messages",level:3},{value:"1. Use Descriptive Assertions",id:"1-use-descriptive-assertions",level:4},{value:"2. Multiple Assertions",id:"2-multiple-assertions",level:4},{value:"Floating Point Comparison Issues",id:"floating-point-comparison-issues",level:3},{value:"Dependency Injection Issues",id:"dependency-injection-issues",level:2},{value:"Services Not Available",id:"services-not-available",level:3},{value:"1. Ensure Services Are Registered",id:"1-ensure-services-are-registered",level:4},{value:"2. Check Service Lifetime",id:"2-check-service-lifetime",level:4},{value:"Data-Driven Test Issues",id:"data-driven-test-issues",level:2},{value:"Data Source Timeout",id:"data-source-timeout",level:3},{value:"1. Optimize Data Generation",id:"1-optimize-data-generation",level:4},{value:"2. Increase Data Source Timeout",id:"2-increase-data-source-timeout",level:4},{value:"Matrix Test Explosion",id:"matrix-test-explosion",level:3},{value:"Memory and Performance Issues",id:"memory-and-performance-issues",level:2},{value:"High Memory Usage",id:"high-memory-usage",level:3},{value:"1. Dispose Resources Properly",id:"1-dispose-resources-properly",level:4},{value:"2. Limit Parallel Execution",id:"2-limit-parallel-execution",level:4},{value:"3. Clear Test Data Between Runs",id:"3-clear-test-data-between-runs",level:4},{value:"Hook and Lifecycle Issues",id:"hook-and-lifecycle-issues",level:2},{value:"Hooks Not Executing",id:"hooks-not-executing",level:3},{value:"1. Check Hook Scope",id:"1-check-hook-scope",level:4},{value:"2. Verify Hook Order",id:"2-verify-hook-order",level:4},{value:"Async Initialization Issues",id:"async-initialization-issues",level:3},{value:"IDE Integration Issues",id:"ide-integration-issues",level:2},{value:"Visual Studio Test Explorer Issues",id:"visual-studio-test-explorer-issues",level:3},{value:"VS Code Test Explorer Issues",id:"vs-code-test-explorer-issues",level:3},{value:"Platform-Specific Issues",id:"platform-specific-issues",level:2},{value:"Linux/macOS File Path Issues",id:"linuxmacos-file-path-issues",level:3},{value:"Line Ending Issues",id:"line-ending-issues",level:3},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"Enable Diagnostic Logging",id:"enable-diagnostic-logging",level:3},{value:"Attach Debugger to Test",id:"attach-debugger-to-test",level:3},{value:"Capture Test Output",id:"capture-test-output",level:3},{value:"Getting Help",id:"getting-help",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,t.jsx)(n.p,{children:"This guide covers common issues you might encounter when using TUnit and their solutions."}),"\n",(0,t.jsx)(n.h2,{id:"test-discovery-issues",children:"Test Discovery Issues"}),"\n",(0,t.jsx)(n.h3,{id:"tests-not-being-discovered",children:"Tests Not Being Discovered"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No tests appear in test explorer"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dotnet test"})," reports 0 tests"]}),"\n",(0,t.jsx)(n.li,{children:"IDE doesn't show test indicators"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Common Causes and Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-missing-tunit-package",children:"1. Missing TUnit Package"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- Ensure TUnit is installed --\x3e\n<PackageReference Include="TUnit" Version="*" />\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-microsoftnettestsdk-conflict",children:"2. Microsoft.NET.Test.Sdk Conflict"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- Remove this package - it conflicts with TUnit --\x3e\n\x3c!-- <PackageReference Include="Microsoft.NET.Test.Sdk" /> --\x3e\n'})}),"\n",(0,t.jsx)(n.h4,{id:"3-missing-test-attribute",children:"3. Missing Test Attribute"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Won't be discovered\npublic void MyTest() { }\n\n// \u2705 Will be discovered\n[Test]\npublic void MyTest() { }\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-non-public-test-methods",children:"4. Non-Public Test Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Private methods won't be discovered\n[Test]\nprivate void MyTest() { }\n\n// \u2705 Public methods will be discovered\n[Test]\npublic void MyTest() { }\n"})}),"\n",(0,t.jsx)(n.h4,{id:"5-static-test-methods",children:"5. Static Test Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Static methods aren't supported\n[Test]\npublic static void MyTest() { }\n\n// \u2705 Instance methods are supported\n[Test]\npublic void MyTest() { }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"aot-compilation-errors",children:"AOT Compilation Errors"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Build errors mentioning "trim warnings"'}),"\n",(0,t.jsx)(n.li,{children:"Runtime errors about missing metadata"}),"\n",(0,t.jsx)(n.li,{children:'"Source generator did not generate" errors'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-enable-aot-compatible-mode",children:"1. Enable AOT-Compatible Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n    <IsAotCompatible>true</IsAotCompatible>\n    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>\n</PropertyGroup>\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-use-aot-compatible-data-sources",children:"2. Use AOT-Compatible Data Sources"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Reflection-based (may cause AOT issues)\n[MethodDataSource(typeof(DataClass), "GetData")]\n\n// \u2705 AOT-friendly generic version\n[MethodDataSource<DataClass>(nameof(DataClass.GetData))]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"test-execution-issues",children:"Test Execution Issues"}),"\n",(0,t.jsx)(n.h3,{id:"tests-hanging-or-deadlocking",children:"Tests Hanging or Deadlocking"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests never complete"}),"\n",(0,t.jsx)(n.li,{children:"IDE becomes unresponsive during test runs"}),"\n",(0,t.jsx)(n.li,{children:"Timeout errors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Common Causes and Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-async-deadlocks",children:"1. Async Deadlocks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Can cause deadlock\n[Test]\npublic void BadAsyncTest()\n{\n    var result = AsyncMethod().Result; // Blocking on async\n}\n\n// \u2705 Proper async handling\n[Test]\npublic async Task GoodAsyncTest()\n{\n    var result = await AsyncMethod();\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-parallel-execution-conflicts",children:"2. Parallel Execution Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// If tests access shared resources, prevent parallel execution\n[NotInParallel("SharedResource")]\npublic class DatabaseTests\n{\n    // Tests in this class won\'t run in parallel with others\n    // that have the same constraint\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"3-circular-dependencies",children:"3. Circular Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Circular dependency causes deadlock\n[Test, DependsOn(nameof(Test2))]\npublic void Test1() { }\n\n[Test, DependsOn(nameof(Test1))]\npublic void Test2() { }\n\n// \u2705 Linear dependencies\n[Test]\npublic void Test1() { }\n\n[Test, DependsOn(nameof(Test1))]\npublic void Test2() { }\n"})}),"\n",(0,t.jsx)(n.h3,{id:"timeout-exceptions",children:"Timeout Exceptions"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TimeoutException"})," thrown"]}),"\n",(0,t.jsx)(n.li,{children:"Tests fail after specific duration"}),"\n",(0,t.jsx)(n.li,{children:'"Test execution timed out" messages'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-increase-timeout",children:"1. Increase Timeout"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\n[Timeout(30000)] // 30 seconds\npublic async Task LongRunningTest()\n{\n    await LongOperation();\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-global-timeout-configuration",children:"2. Global Timeout Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet test --timeout 60s\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-check-for-infinite-loops",children:"3. Check for Infinite Loops"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Review your test logic for potential infinite loops\n[Test]\npublic async Task PotentiallyInfiniteTest()\n{\n    while (condition) // Ensure condition can become false\n    {\n        await Task.Delay(100);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"assertion-failures",children:"Assertion Failures"}),"\n",(0,t.jsx)(n.h3,{id:"confusing-assertion-messages",children:"Confusing Assertion Messages"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Assertion messages don't clearly indicate the problem"}),"\n",(0,t.jsx)(n.li,{children:"Expected vs actual values are unclear"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-use-descriptive-assertions",children:"1. Use Descriptive Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Generic assertion\nawait Assert.That(result).IsTrue();\n\n// \u2705 Specific assertion with context\nawait Assert.That(user.IsActive)\n    .IsTrue()\n    .Because("User should be active after registration");\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-multiple-assertions",children:"2. Multiple Assertions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// Group related assertions for better error reporting\nusing (Assert.Multiple())\n{\n    await Assert.That(user.Name).IsEqualTo("John");\n    await Assert.That(user.Email).Contains("@");\n    await Assert.That(user.Age).IsGreaterThan(0);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"floating-point-comparison-issues",children:"Floating Point Comparison Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests fail due to floating point precision"}),"\n",(0,t.jsx)(n.li,{children:"Decimal comparisons unexpectedly fail"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Direct comparison can fail\nawait Assert.That(0.1 + 0.2).IsEqualTo(0.3);\n\n// \u2705 Use tolerance\nawait Assert.That(0.1 + 0.2).IsEqualTo(0.3).Within(0.0001);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"dependency-injection-issues",children:"Dependency Injection Issues"}),"\n",(0,t.jsx)(n.h3,{id:"services-not-available",children:"Services Not Available"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetRequiredService"})," throws exceptions"]}),"\n",(0,t.jsx)(n.li,{children:"Null reference exceptions in tests"}),"\n",(0,t.jsx)(n.li,{children:'"No service registered" errors'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-ensure-services-are-registered",children:"1. Ensure Services Are Registered"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// In your test setup or configuration\n[Before(HookType.Assembly)]\npublic static void ConfigureServices()\n{\n    var services = new ServiceCollection();\n    services.AddSingleton<IMyService, MyService>();\n    // Register services...\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-check-service-lifetime",children:"2. Check Service Lifetime"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic void ServiceLifetimeTest()\n{\n    // Scoped services need proper scope handling\n    using var scope = ServiceProvider.CreateScope();\n    var service = scope.ServiceProvider.GetRequiredService<IScopedService>();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-driven-test-issues",children:"Data-Driven Test Issues"}),"\n",(0,t.jsx)(n.h3,{id:"data-source-timeout",children:"Data Source Timeout"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Data source timed out" errors'}),"\n",(0,t.jsx)(n.li,{children:"Tests fail before execution"}),"\n",(0,t.jsx)(n.li,{children:"Discovery phase hangs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-optimize-data-generation",children:"1. Optimize Data Generation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Slow data generation\npublic static IEnumerable<User> GetUsers()\n{\n    return DatabaseQuery.GetAllUsers(); // Expensive operation\n}\n\n// \u2705 Lightweight data generation\npublic static IEnumerable<User> GetUsers()\n{\n    yield return new User { Id = 1, Name = "Test1" };\n    yield return new User { Id = 2, Name = "Test2" };\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-increase-data-source-timeout",children:"2. Increase Data Source Timeout"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Configure in test assembly attributes or configuration\n[assembly: DataSourceTimeout(30000)] // 30 seconds\n"})}),"\n",(0,t.jsx)(n.h3,{id:"matrix-test-explosion",children:"Matrix Test Explosion"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Thousands of test combinations generated"}),"\n",(0,t.jsx)(n.li,{children:"Test discovery takes forever"}),"\n",(0,t.jsx)(n.li,{children:"Out of memory errors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Explosive combination\n[Test]\n[Arguments(1, 2, 3, 4, 5)]\n[Arguments("a", "b", "c", "d", "e")]\n[Arguments(true, false)]\n// Creates 5 \xd7 5 \xd7 2 = 50 combinations!\n\n// \u2705 Use specific combinations\n[Test]\n[Arguments(1, "a", true)]\n[Arguments(2, "b", false)]\n[Arguments(3, "c", true)]\n// Only 3 specific test cases\n'})}),"\n",(0,t.jsx)(n.h2,{id:"memory-and-performance-issues",children:"Memory and Performance Issues"}),"\n",(0,t.jsx)(n.h3,{id:"high-memory-usage",children:"High Memory Usage"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Out of memory exceptions"}),"\n",(0,t.jsx)(n.li,{children:"Slow test execution"}),"\n",(0,t.jsx)(n.li,{children:"System becomes unresponsive"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-dispose-resources-properly",children:"1. Dispose Resources Properly"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task ResourceIntensiveTest()\n{\n    using var largeResource = new LargeResource();\n    // Test logic\n    // Resource automatically disposed\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-limit-parallel-execution",children:"2. Limit Parallel Execution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[ParallelLimiter<Conservative>]\npublic class MemoryIntensiveTests\n{\n    // Limit concurrent execution\n}\n\npublic class Conservative : IParallelLimit\n{\n    public int Limit => 2; // Max 2 tests in parallel\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-clear-test-data-between-runs",children:"3. Clear Test Data Between Runs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[After(HookType.Test)]\npublic void Cleanup()\n{\n    GC.Collect(); // Force garbage collection if needed\n    _testData.Clear();\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"hook-and-lifecycle-issues",children:"Hook and Lifecycle Issues"}),"\n",(0,t.jsx)(n.h3,{id:"hooks-not-executing",children:"Hooks Not Executing"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Setup/cleanup code not running"}),"\n",(0,t.jsx)(n.li,{children:"Database not initialized"}),"\n",(0,t.jsx)(n.li,{children:"Resources not cleaned up"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsx)(n.h4,{id:"1-check-hook-scope",children:"1. Check Hook Scope"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// \u274c Instance method for class-level hook\n[Before(HookType.Class)]\npublic void ClassSetup() { } // Won't work!\n\n// \u2705 Static method for class-level hook\n[Before(HookType.Class)]\npublic static void ClassSetup() { } // Works!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-verify-hook-order",children:"2. Verify Hook Order"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Hooks execute in this order:\n// 1. Assembly Before\n// 2. Class Before\n// 3. Test Before\n// 4. TEST EXECUTION\n// 5. Test After\n// 6. Class After (after all tests in class)\n// 7. Assembly After (after all tests)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"async-initialization-issues",children:"Async Initialization Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Cannot await in constructor" errors'}),"\n",(0,t.jsx)(n.li,{children:"Resources not ready when test starts"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class DatabaseTests : IAsyncInitializer\n{\n    private DatabaseConnection _connection;\n    \n    // Async initialization\n    public async Task InitializeAsync()\n    {\n        _connection = await DatabaseConnection.CreateAsync();\n    }\n    \n    [Test]\n    public async Task TestDatabase()\n    {\n        // _connection is guaranteed to be initialized\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ide-integration-issues",children:"IDE Integration Issues"}),"\n",(0,t.jsx)(n.h3,{id:"visual-studio-test-explorer-issues",children:"Visual Studio Test Explorer Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests not showing in Test Explorer"}),"\n",(0,t.jsx)(n.li,{children:'"Run Test" option missing'}),"\n",(0,t.jsx)(n.li,{children:"Test status not updating"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Clean and Rebuild"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dotnet clean\ndotnet build\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Clear Test Cache"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Close Visual Studio"}),"\n",(0,t.jsxs)(n.li,{children:["Delete ",(0,t.jsx)(n.code,{children:".vs"})," folder"]}),"\n",(0,t.jsx)(n.li,{children:"Reopen and rebuild"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Update Test Platform"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.TestPlatform" Version="*" />\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"vs-code-test-explorer-issues",children:"VS Code Test Explorer Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Install C# Dev Kit"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure latest version is installed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configure Test Settings"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "dotnetCoreExplorer.testProjectPath": "**/*.csproj"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"platform-specific-issues",children:"Platform-Specific Issues"}),"\n",(0,t.jsx)(n.h3,{id:"linuxmacos-file-path-issues",children:"Linux/macOS File Path Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Symptoms:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests fail on Linux/macOS but pass on Windows"}),"\n",(0,t.jsx)(n.li,{children:'"File not found" errors'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Windows-specific paths\nvar path = @"C:\\TestData\\file.txt";\n\n// \u2705 Cross-platform paths\nvar path = Path.Combine("TestData", "file.txt");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"line-ending-issues",children:"Line Ending Issues"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// \u274c Hard-coded line endings\nvar expected = "Line1\\r\\nLine2";\n\n// \u2705 Platform-agnostic\nvar expected = $"Line1{Environment.NewLine}Line2";\n'})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,t.jsx)(n.h3,{id:"enable-diagnostic-logging",children:"Enable Diagnostic Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Run with diagnostic output\ndotnet test --logger "console;verbosity=detailed"\n\n# Enable TUnit diagnostics\ndotnet test -- --diagnostic\n'})}),"\n",(0,t.jsx)(n.h3,{id:"attach-debugger-to-test",children:"Attach Debugger to Test"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic void DebuggableTest()\n{\n    #if DEBUG\n    Debugger.Launch(); // Prompts to attach debugger\n    #endif\n    \n    // Test logic\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"capture-test-output",children:"Capture Test Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task TestWithOutput()\n{\n    TestContext.Current?.WriteLine("Debug: Starting test");\n    \n    var result = await Operation();\n    \n    TestContext.Current?.WriteLine($"Debug: Result = {result}");\n    \n    await Assert.That(result).IsNotNull();\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,t.jsx)(n.p,{children:"If you're still experiencing issues:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check the Documentation"}),": Review relevant sections of the TUnit documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search Issues"}),": Check ",(0,t.jsx)(n.a,{href:"https://github.com/thomhurst/TUnit/issues",children:"GitHub Issues"})," for similar problems"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enable Diagnostics"}),": Run with ",(0,t.jsx)(n.code,{children:"--diagnostic"})," flag for detailed logs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create Minimal Reproduction"}),": Isolate the issue in a small test project"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Report Issue"}),": If it's a bug, report it with:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"TUnit version"}),"\n",(0,t.jsx)(n.li,{children:".NET version"}),"\n",(0,t.jsx)(n.li,{children:"Minimal code to reproduce"}),"\n",(0,t.jsx)(n.li,{children:"Full error messages and stack traces"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Remember to check for updates - many issues are resolved in newer versions of TUnit."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},l=i.createContext(t);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);