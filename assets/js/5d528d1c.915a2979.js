"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9865],{9014:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"customization-extensibility/display-names","title":"Display Names","description":"If you want simple control over the name of a test, you can use the [DisplayName(...)] attribute.","source":"@site/docs/customization-extensibility/display-names.md","sourceDirName":"customization-extensibility","slug":"/customization-extensibility/display-names","permalink":"/docs/customization-extensibility/display-names","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Logging","permalink":"/docs/customization-extensibility/logging"},"next":{"title":"Libraries","permalink":"/docs/customization-extensibility/libraries"}}');var i=s(4848),a=s(8453);const o={},r="Display Names",l={},c=[{value:"Custom Logic",id:"custom-logic",level:2}];function u(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"display-names",children:"Display Names"})}),"\n",(0,i.jsxs)(t.p,{children:["If you want simple control over the name of a test, you can use the ",(0,i.jsx)(t.code,{children:"[DisplayName(...)]"})," attribute."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'    [Test]\n    [DisplayName("My first test!")]\n    public async Task Test()\n    {\n        ...\n    }\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You can reference test parameters in the display name by using ",(0,i.jsx)(t.code,{children:"$parameterName"})," within the attribute string. At runtime, these will be replaced with the actual argument values for each test case."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'    [Test]\n    [Arguments("foo", 1, true)]\n    [Arguments("bar", 2, false)]\n    [DisplayName("Test with: $value1 $value2 $value3!")]\n    public async Task Test3(string value1, int value2, bool value3)\n    {\n        ...\n    }\n'})}),"\n",(0,i.jsx)(t.p,{children:"The above would generate two test cases with their respective display name as:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'"Test with: foo 1 True"'}),"\n",(0,i.jsx)(t.li,{children:'"Test with: bar 2 False"'}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["If you have custom classes, you can combine this with ",(0,i.jsx)(t.a,{href:"/docs/customization-extensibility/argument-formatters",children:"Argument Formatters"})," to specify how to show them."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["If you want to include a literal ",(0,i.jsx)(t.code,{children:"$"})," in your display name, escape it as ",(0,i.jsx)(t.code,{children:"$$"}),".",(0,i.jsx)(t.br,{}),"\n","For example: ",(0,i.jsx)(t.code,{children:'[DisplayName("Total cost: $$100")]'}),' will display as "Total cost: $100".']})}),"\n",(0,i.jsx)(t.h2,{id:"custom-logic",children:"Custom Logic"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to have more control over how your test names are, you can create an attribute that inherits from ",(0,i.jsx)(t.code,{children:"DisplayNameFormatterAttribute"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["There you will find a method that you must override: ",(0,i.jsx)(t.code,{children:"FormatDisplayName"}),".\nHere you have access to all the arguments and test details via the ",(0,i.jsx)(t.code,{children:"TestContext"})," parameter."]}),"\n",(0,i.jsx)(t.p,{children:"Then simply add that custom attribute to your test."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(6540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);