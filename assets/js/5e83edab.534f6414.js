"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7796],{8783:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"assertions/dictionaries","title":"Dictionary Assertions","description":"TUnit provides specialized assertions for testing dictionaries (IReadOnlyDictionary), including key and value membership checks. Dictionaries also inherit all collection assertions.","source":"@site/docs/assertions/dictionaries.md","sourceDirName":"assertions","slug":"/assertions/dictionaries","permalink":"/docs/assertions/dictionaries","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6.8,"frontMatter":{"sidebar_position":6.8},"sidebar":"docs","previous":{"title":"Collection Assertions","permalink":"/docs/assertions/collections"},"next":{"title":"DateTime and Time Assertions","permalink":"/docs/assertions/datetime"}}');var s=a(4848),t=a(8453);const r={sidebar_position:6.8},c="Dictionary Assertions",l={},o=[{value:"Key Assertions",id:"key-assertions",level:2},{value:"ContainsKey",id:"containskey",level:3},{value:"With Custom Comparer",id:"with-custom-comparer",level:4},{value:"DoesNotContainKey",id:"doesnotcontainkey",level:3},{value:"Value Assertions",id:"value-assertions",level:2},{value:"ContainsValue",id:"containsvalue",level:3},{value:"Collection Assertions on Dictionaries",id:"collection-assertions-on-dictionaries",level:2},{value:"Count",id:"count",level:3},{value:"IsEmpty / IsNotEmpty",id:"isempty--isnotempty",level:3},{value:"Contains (KeyValuePair)",id:"contains-keyvaluepair",level:3},{value:"All Pairs Match Condition",id:"all-pairs-match-condition",level:3},{value:"Any Pair Matches Condition",id:"any-pair-matches-condition",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Configuration Validation",id:"configuration-validation",level:3},{value:"HTTP Headers Validation",id:"http-headers-validation",level:3},{value:"Lookup Table Validation",id:"lookup-table-validation",level:3},{value:"Cache Validation",id:"cache-validation",level:3},{value:"Dictionary Key/Value Operations",id:"dictionary-keyvalue-operations",level:2},{value:"Accessing Values After Key Check",id:"accessing-values-after-key-check",level:3},{value:"TryGetValue Pattern",id:"trygetvalue-pattern",level:3},{value:"Working with Dictionary Keys and Values",id:"working-with-dictionary-keys-and-values",level:2},{value:"Keys Collection",id:"keys-collection",level:3},{value:"Values Collection",id:"values-collection",level:3},{value:"Equivalency Checks",id:"equivalency-checks",level:2},{value:"Same Key-Value Pairs",id:"same-key-value-pairs",level:3},{value:"Chaining Dictionary Assertions",id:"chaining-dictionary-assertions",level:2},{value:"Specialized Dictionary Types",id:"specialized-dictionary-types",level:2},{value:"ConcurrentDictionary",id:"concurrentdictionary",level:3},{value:"ReadOnlyDictionary",id:"readonlydictionary",level:3},{value:"SortedDictionary",id:"sorteddictionary",level:3},{value:"Null Checks",id:"null-checks",level:2},{value:"Null Dictionary",id:"null-dictionary",level:3},{value:"Empty vs Null",id:"empty-vs-null",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Required Configuration Keys",id:"required-configuration-keys",level:3},{value:"Metadata Validation",id:"metadata-validation",level:3},{value:"Feature Flags",id:"feature-flags",level:3},{value:"See Also",id:"see-also",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"dictionary-assertions",children:"Dictionary Assertions"})}),"\n",(0,s.jsxs)(e.p,{children:["TUnit provides specialized assertions for testing dictionaries (",(0,s.jsx)(e.code,{children:"IReadOnlyDictionary<TKey, TValue>"}),"), including key and value membership checks. Dictionaries also inherit all collection assertions."]}),"\n",(0,s.jsx)(e.h2,{id:"key-assertions",children:"Key Assertions"}),"\n",(0,s.jsx)(e.h3,{id:"containskey",children:"ContainsKey"}),"\n",(0,s.jsx)(e.p,{children:"Tests that a dictionary contains a specific key:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Contains_Key()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2,\n        ["cherry"] = 3\n    };\n\n    await Assert.That(dict).ContainsKey("apple");\n    await Assert.That(dict).ContainsKey("banana");\n}\n'})}),"\n",(0,s.jsx)(e.h4,{id:"with-custom-comparer",children:"With Custom Comparer"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Contains_Key_With_Comparer()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["Apple"] = 1,\n        ["Banana"] = 2\n    };\n\n    await Assert.That(dict)\n        .ContainsKey("apple")\n        .Using(StringComparer.OrdinalIgnoreCase);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"doesnotcontainkey",children:"DoesNotContainKey"}),"\n",(0,s.jsx)(e.p,{children:"Tests that a dictionary does not contain a specific key:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Does_Not_Contain_Key()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2\n    };\n\n    await Assert.That(dict).DoesNotContainKey("cherry");\n    await Assert.That(dict).DoesNotContainKey("orange");\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"value-assertions",children:"Value Assertions"}),"\n",(0,s.jsx)(e.h3,{id:"containsvalue",children:"ContainsValue"}),"\n",(0,s.jsx)(e.p,{children:"Tests that a dictionary contains a specific value:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Contains_Value()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2,\n        ["cherry"] = 3\n    };\n\n    await Assert.That(dict).ContainsValue(2);\n    await Assert.That(dict).ContainsValue(3);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"collection-assertions-on-dictionaries",children:"Collection Assertions on Dictionaries"}),"\n",(0,s.jsxs)(e.p,{children:["Dictionaries inherit all collection assertions since they implement ",(0,s.jsx)(e.code,{children:"IEnumerable<KeyValuePair<TKey, TValue>>"}),":"]}),"\n",(0,s.jsx)(e.h3,{id:"count",children:"Count"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Count()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["a"] = 1,\n        ["b"] = 2,\n        ["c"] = 3\n    };\n\n    await Assert.That(dict).HasCount(3);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"isempty--isnotempty",children:"IsEmpty / IsNotEmpty"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Empty()\n{\n    var empty = new Dictionary<string, int>();\n    var populated = new Dictionary<string, int> { ["key"] = 1 };\n\n    await Assert.That(empty).IsEmpty();\n    await Assert.That(populated).IsNotEmpty();\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"contains-keyvaluepair",children:"Contains (KeyValuePair)"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Contains_Pair()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2\n    };\n\n    await Assert.That(dict).Contains(new KeyValuePair<string, int>("apple", 1));\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"all-pairs-match-condition",children:"All Pairs Match Condition"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task All_Values_Positive()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["a"] = 1,\n        ["b"] = 2,\n        ["c"] = 3\n    };\n\n    await Assert.That(dict).All(kvp => kvp.Value > 0);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"any-pair-matches-condition",children:"Any Pair Matches Condition"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Any_Key_Starts_With()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2,\n        ["cherry"] = 3\n    };\n\n    await Assert.That(dict).Any(kvp => kvp.Key.StartsWith("b"));\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,s.jsx)(e.h3,{id:"configuration-validation",children:"Configuration Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Configuration_Has_Required_Keys()\n{\n    var config = LoadConfiguration();\n\n    await using (Assert.Multiple())\n    {\n        await Assert.That(config).ContainsKey("DatabaseConnection");\n        await Assert.That(config).ContainsKey("ApiKey");\n        await Assert.That(config).ContainsKey("Environment");\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"http-headers-validation",children:"HTTP Headers Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Response_Headers()\n{\n    var headers = new Dictionary<string, string>\n    {\n        ["Content-Type"] = "application/json",\n        ["Cache-Control"] = "no-cache"\n    };\n\n    await Assert.That(headers)\n        .ContainsKey("Content-Type")\n        .And.ContainsValue("application/json");\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"lookup-table-validation",children:"Lookup Table Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Lookup_Table()\n{\n    var statusCodes = new Dictionary<int, string>\n    {\n        [200] = "OK",\n        [404] = "Not Found",\n        [500] = "Internal Server Error"\n    };\n\n    await Assert.That(statusCodes)\n        .HasCount(3)\n        .And.ContainsKey(200)\n        .And.ContainsValue("OK");\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"cache-validation",children:"Cache Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Cache_Contains_Entry()\n{\n    var cache = new Dictionary<string, object>\n    {\n        ["user:123"] = new User { Id = 123 },\n        ["user:456"] = new User { Id = 456 }\n    };\n\n    await Assert.That(cache)\n        .ContainsKey("user:123")\n        .And.HasCount(2)\n        .And.IsNotEmpty();\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"dictionary-keyvalue-operations",children:"Dictionary Key/Value Operations"}),"\n",(0,s.jsx)(e.h3,{id:"accessing-values-after-key-check",children:"Accessing Values After Key Check"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Get_Value_After_Key_Check()\n{\n    var dict = new Dictionary<string, User>\n    {\n        ["alice"] = new User { Name = "Alice", Age = 30 }\n    };\n\n    // First verify key exists\n    await Assert.That(dict).ContainsKey("alice");\n\n    // Then safely access\n    var user = dict["alice"];\n    await Assert.That(user.Age).IsEqualTo(30);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"trygetvalue-pattern",children:"TryGetValue Pattern"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task TryGetValue_Pattern()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["count"] = 42\n    };\n\n    var found = dict.TryGetValue("count", out var value);\n\n    await Assert.That(found).IsTrue();\n    await Assert.That(value).IsEqualTo(42);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"working-with-dictionary-keys-and-values",children:"Working with Dictionary Keys and Values"}),"\n",(0,s.jsx)(e.h3,{id:"keys-collection",children:"Keys Collection"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Keys()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["a"] = 1,\n        ["b"] = 2,\n        ["c"] = 3\n    };\n\n    var keys = dict.Keys;\n\n    await Assert.That(keys)\n        .HasCount(3)\n        .And.Contains("a")\n        .And.Contains("b")\n        .And.Contains("c");\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"values-collection",children:"Values Collection"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionary_Values()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["a"] = 1,\n        ["b"] = 2,\n        ["c"] = 3\n    };\n\n    var values = dict.Values;\n\n    await Assert.That(values)\n        .HasCount(3)\n        .And.Contains(1)\n        .And.Contains(2)\n        .And.All(v => v > 0);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"equivalency-checks",children:"Equivalency Checks"}),"\n",(0,s.jsx)(e.h3,{id:"same-key-value-pairs",children:"Same Key-Value Pairs"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Dictionaries_Are_Equivalent()\n{\n    var dict1 = new Dictionary<string, int>\n    {\n        ["a"] = 1,\n        ["b"] = 2\n    };\n\n    var dict2 = new Dictionary<string, int>\n    {\n        ["b"] = 2,\n        ["a"] = 1\n    };\n\n    // Dictionaries are equivalent (same pairs, order doesn\'t matter)\n    await Assert.That(dict1).IsEquivalentTo(dict2);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"chaining-dictionary-assertions",children:"Chaining Dictionary Assertions"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Chained_Dictionary_Assertions()\n{\n    var dict = new Dictionary<string, int>\n    {\n        ["apple"] = 1,\n        ["banana"] = 2,\n        ["cherry"] = 3\n    };\n\n    await Assert.That(dict)\n        .IsNotEmpty()\n        .And.HasCount(3)\n        .And.ContainsKey("apple")\n        .And.ContainsKey("banana")\n        .And.ContainsValue(2)\n        .And.All(kvp => kvp.Value > 0);\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"specialized-dictionary-types",children:"Specialized Dictionary Types"}),"\n",(0,s.jsx)(e.h3,{id:"concurrentdictionary",children:"ConcurrentDictionary"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Concurrent_Dictionary()\n{\n    var concurrent = new ConcurrentDictionary<string, int>();\n    concurrent.TryAdd("a", 1);\n    concurrent.TryAdd("b", 2);\n\n    await Assert.That(concurrent)\n        .HasCount(2)\n        .And.ContainsKey("a");\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"readonlydictionary",children:"ReadOnlyDictionary"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task ReadOnly_Dictionary()\n{\n    var dict = new Dictionary<string, int> { ["a"] = 1 };\n    var readOnly = new ReadOnlyDictionary<string, int>(dict);\n\n    await Assert.That(readOnly)\n        .HasCount(1)\n        .And.ContainsKey("a");\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"sorteddictionary",children:"SortedDictionary"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Sorted_Dictionary()\n{\n    var sorted = new SortedDictionary<int, string>\n    {\n        [3] = "three",\n        [1] = "one",\n        [2] = "two"\n    };\n\n    var keys = sorted.Keys.ToArray();\n\n    await Assert.That(keys).IsInOrder();\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"null-checks",children:"Null Checks"}),"\n",(0,s.jsx)(e.h3,{id:"null-dictionary",children:"Null Dictionary"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task Null_Dictionary()\n{\n    Dictionary<string, int>? dict = null;\n\n    await Assert.That(dict).IsNull();\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"empty-vs-null",children:"Empty vs Null"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"[Test]\npublic async Task Empty_vs_Null_Dictionary()\n{\n    Dictionary<string, int>? nullDict = null;\n    var emptyDict = new Dictionary<string, int>();\n\n    await Assert.That(nullDict).IsNull();\n    await Assert.That(emptyDict).IsNotNull();\n    await Assert.That(emptyDict).IsEmpty();\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,s.jsx)(e.h3,{id:"required-configuration-keys",children:"Required Configuration Keys"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task All_Required_Keys_Present()\n{\n    var config = LoadConfiguration();\n    var requiredKeys = new[] { "ApiKey", "Database", "Environment" };\n\n    foreach (var key in requiredKeys)\n    {\n        await Assert.That(config).ContainsKey(key);\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Or with ",(0,s.jsx)(e.code,{children:"Assert.Multiple"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task All_Required_Keys_Present_Multiple()\n{\n    var config = LoadConfiguration();\n    var requiredKeys = new[] { "ApiKey", "Database", "Environment" };\n\n    await using (Assert.Multiple())\n    {\n        foreach (var key in requiredKeys)\n        {\n            await Assert.That(config).ContainsKey(key);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"metadata-validation",children:"Metadata Validation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_Metadata()\n{\n    var metadata = GetFileMetadata();\n\n    await Assert.That(metadata)\n        .ContainsKey("ContentType")\n        .And.ContainsKey("Size")\n        .And.ContainsKey("LastModified")\n        .And.All(kvp => kvp.Value != null);\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"feature-flags",children:"Feature Flags"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'[Test]\npublic async Task Feature_Flags()\n{\n    var features = new Dictionary<string, bool>\n    {\n        ["NewUI"] = true,\n        ["BetaFeature"] = false,\n        ["ExperimentalApi"] = true\n    };\n\n    await Assert.That(features)\n        .ContainsKey("NewUI")\n        .And.ContainsValue(true);\n\n    var newUiEnabled = features["NewUI"];\n    await Assert.That(newUiEnabled).IsTrue();\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/assertions/collections",children:"Collections"})," - General collection assertions"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - Comparing dictionary values"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"/docs/assertions/string",children:"Strings"})," - String key comparisons"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>c});var i=a(6540);const s={},t=i.createContext(s);function r(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);