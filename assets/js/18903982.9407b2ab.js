"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[3897],{7633:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"assertions/member-assertions","title":"Member Assertions","description":"The .Member() method allows you to assert on object properties while maintaining the parent object\'s context for chaining. This is useful when you need to validate multiple properties of the same object.","source":"@site/docs/assertions/member-assertions.md","sourceDirName":"assertions","slug":"/assertions/member-assertions","permalink":"/docs/assertions/member-assertions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=n(4848),a=n(8453);const o={},i="Member Assertions",c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Why Use Member Assertions?",id:"why-use-member-assertions",level:2},{value:"Nested Properties",id:"nested-properties",level:2},{value:"Complex Assertions on Members",id:"complex-assertions-on-members",level:2},{value:"Using Or Logic",id:"using-or-logic",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Nested Object Assertions",id:"nested-object-assertions",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"member-assertions",children:"Member Assertions"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:".Member()"})," method allows you to assert on object properties while maintaining the parent object's context for chaining. This is useful when you need to validate multiple properties of the same object."]}),"\n",(0,r.jsx)(s.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task BasicMemberAssertions()\n{\n    var user = await GetUserAsync();\n\n    // Assert on a single property\n    await Assert.That(user)\n        .Member(u => u.Email, email => email.IsEqualTo("user@example.com"));\n\n    // Chain multiple property assertions\n    await Assert.That(user)\n        .Member(u => u.FirstName, name => name.IsEqualTo("John"))\n        .And.Member(u => u.LastName, name => name.IsEqualTo("Doe"))\n        .And.Member(u => u.Age, age => age.IsGreaterThan(18));\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"why-use-member-assertions",children:"Why Use Member Assertions?"}),"\n",(0,r.jsxs)(s.p,{children:["The key advantage of ",(0,r.jsx)(s.code,{children:".Member()"})," is that it returns to the parent context after each assertion, allowing you to chain multiple property checks:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task MemberAssertionsWithFullContext()\n{\n    var order = await GetOrderAsync();\n\n    // Each .Member() call works on the order object\n    await Assert.That(order)\n        .IsNotNull()\n        .And.Member(o => o.OrderId, id => id.IsGreaterThan(0))\n        .And.Member(o => o.Status, status => status.IsEqualTo(OrderStatus.Pending))\n        .And.Member(o => o.Total, total => total.IsGreaterThan(0));\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"nested-properties",children:"Nested Properties"}),"\n",(0,r.jsx)(s.p,{children:"Member assertions support nested properties:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task NestedPropertyAssertions()\n{\n    var customer = await GetCustomerAsync();\n\n    // Access nested properties directly\n    await Assert.That(customer)\n        .Member(c => c.Address.Street, street => street.IsNotNull())\n        .And.Member(c => c.Address.City, city => city.IsEqualTo("Seattle"))\n        .And.Member(c => c.Address.ZipCode, zip => zip.Matches(@"^\\d{5}$"));\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"complex-assertions-on-members",children:"Complex Assertions on Members"}),"\n",(0,r.jsx)(s.p,{children:"You can perform complex assertions on member values, including collections:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task ComplexMemberAssertions()\n{\n    var team = await GetTeamAsync();\n\n    await Assert.That(team)\n        .Member(t => t.Name, name => name.StartsWith("Team"))\n        .And.Member(t => t.Members, members => members\n            .HasCount().IsGreaterThan(0)\n            .And.All(m => m.IsActive)\n            .And.Any(m => m.Role == "Lead"))\n        .And.Member(t => t.CreatedDate, date => date\n            .IsGreaterThan(DateTime.UtcNow.AddYears(-1)));\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"using-or-logic",children:"Using Or Logic"}),"\n",(0,r.jsxs)(s.p,{children:["Member assertions work with both ",(0,r.jsx)(s.code,{children:".And"})," and ",(0,r.jsx)(s.code,{children:".Or"})," combinators:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task MemberAssertionsWithOrLogic()\n{\n    var product = await GetProductAsync();\n\n    // Use Or to check alternative conditions\n    await Assert.That(product)\n        .Member(p => p.Status, status => status.IsEqualTo(ProductStatus.Active))\n        .Or.Member(p => p.Status, status => status.IsEqualTo(ProductStatus.Preview));\n\n    // Mix And and Or for complex logic\n    await Assert.That(product)\n        .Member(p => p.Price, price => price.IsGreaterThan(0))\n        .And.Member(p => p.Stock, stock => stock.IsGreaterThan(0))\n        .Or.Member(p => p.BackorderAllowed, allowed => allowed.IsTrue());\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task ComplexObjectValidation()\n{\n    var user = await GetUserAsync("john.doe");\n\n    // Chain multiple member assertions\n    await Assert.That(user)\n        .IsNotNull()\n        .And.Member(u => u.Email, email => email.IsEqualTo("john.doe@example.com"))\n        .And.Member(u => u.Age, age => age.IsGreaterThan(18))\n        .And.Member(u => u.Roles, roles => roles.Contains("Admin"));\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"nested-object-assertions",children:"Nested Object Assertions"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task NestedObjectAssertions()\n{\n    var company = await GetCompanyAsync();\n\n    await Assert.That(company)\n        .IsNotNull()\n        .And.Member(c => c.Name, name => name.IsEqualTo("TechCorp"))\n        .And.Member(c => c.Address.City, city => city.IsEqualTo("Seattle"))\n        .And.Member(c => c.Address.ZipCode, zip => zip.Matches(@"^\\d{5}$"))\n        .And.Member(c => c.Employees, employees => employees\n            .HasCount().IsBetween(100, 500)\n            .And.All(e => e.Email.EndsWith("@techcorp.com")));\n}\n'})})]})}function m(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>i});var t=n(6540);const r={},a=t.createContext(r);function o(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);