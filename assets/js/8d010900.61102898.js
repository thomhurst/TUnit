"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5235],{2501:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"assertions/exceptions","title":"Exception Assertions","description":"TUnit provides comprehensive assertions for testing that code throws (or doesn\'t throw) exceptions, with rich support for validating exception types, messages, and properties.","source":"@site/docs/assertions/exceptions.md","sourceDirName":"assertions","slug":"/assertions/exceptions","permalink":"/docs/assertions/exceptions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docs","previous":{"title":"DateTime and Time Assertions","permalink":"/docs/assertions/datetime"},"next":{"title":"Type Assertions","permalink":"/docs/assertions/types"}}');var i=s(4848),a=s(8453);const r={sidebar_position:8},c="Exception Assertions",o={},l=[{value:"Basic Exception Assertions",id:"basic-exception-assertions",level:2},{value:"Throws&lt;TException&gt;",id:"throwstexception",level:3},{value:"ThrowsExactly&lt;TException&gt;",id:"throwsexactlytexception",level:3},{value:"Throws (Runtime Type)",id:"throws-runtime-type",level:3},{value:"ThrowsNothing",id:"throwsnothing",level:3},{value:"Async Exception Assertions",id:"async-exception-assertions",level:2},{value:"Exception Message Assertions",id:"exception-message-assertions",level:2},{value:"WithMessage",id:"withmessage",level:3},{value:"WithMessageContaining",id:"withmessagecontaining",level:3},{value:"Case-Insensitive",id:"case-insensitive",level:4},{value:"WithMessageNotContaining",id:"withmessagenotcontaining",level:3},{value:"WithMessageMatching",id:"withmessagematching",level:3},{value:"ArgumentException Specific",id:"argumentexception-specific",level:2},{value:"WithParameterName",id:"withparametername",level:3},{value:"Inner Exception Assertions",id:"inner-exception-assertions",level:2},{value:"WithInnerException",id:"withinnerexception",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Validation Exceptions",id:"validation-exceptions",level:3},{value:"Null Argument Checks",id:"null-argument-checks",level:3},{value:"File Operations",id:"file-operations",level:3},{value:"Network Operations",id:"network-operations",level:3},{value:"Database Operations",id:"database-operations",level:3},{value:"Division by Zero",id:"division-by-zero",level:3},{value:"Index Out of Range",id:"index-out-of-range",level:3},{value:"Invalid Cast",id:"invalid-cast",level:3},{value:"Custom Exceptions",id:"custom-exceptions",level:3},{value:"Testing Multiple Operations",id:"testing-multiple-operations",level:2},{value:"Using Assert.Multiple",id:"using-assertmultiple",level:3},{value:"Exception Inheritance",id:"exception-inheritance",level:2},{value:"Aggregate Exceptions",id:"aggregate-exceptions",level:2},{value:"Chaining Exception Assertions",id:"chaining-exception-assertions",level:2},{value:"Testing that No Exception is Thrown",id:"testing-that-no-exception-is-thrown",level:2},{value:"ThrowsNothing vs Try-Catch",id:"throwsnothing-vs-try-catch",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Expected Failures",id:"expected-failures",level:3},{value:"Defensive Programming",id:"defensive-programming",level:3},{value:"State Validation",id:"state-validation",level:3},{value:"Configuration Errors",id:"configuration-errors",level:3},{value:"Timeout Exceptions",id:"timeout-exceptions",level:2},{value:"Re-throwing Exceptions",id:"re-throwing-exceptions",level:2},{value:"Exception Assertions with Async/Await",id:"exception-assertions-with-asyncawait",level:2},{value:"See Also",id:"see-also",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"exception-assertions",children:"Exception Assertions"})}),"\n",(0,i.jsx)(n.p,{children:"TUnit provides comprehensive assertions for testing that code throws (or doesn't throw) exceptions, with rich support for validating exception types, messages, and properties."}),"\n",(0,i.jsx)(n.h2,{id:"basic-exception-assertions",children:"Basic Exception Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"throwstexception",children:"Throws<TException>"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a delegate throws a specific exception type (or a subclass):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Code_Throws_Exception()\n{\n    await Assert.That(() => int.Parse("not a number"))\n        .Throws<FormatException>();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Works with any exception type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Various_Exception_Types()\n{\n    await Assert.That(() => throw new InvalidOperationException())\n        .Throws<InvalidOperationException>();\n\n    await Assert.That(() => throw new ArgumentNullException())\n        .Throws<ArgumentNullException>();\n\n    await Assert.That(() => File.ReadAllText("nonexistent.txt"))\n        .Throws<FileNotFoundException>();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"throwsexactlytexception",children:"ThrowsExactly<TException>"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a delegate throws the exact exception type (not a subclass):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Throws_Exact_Type()\n{\n    await Assert.That(() => throw new ArgumentNullException())\n        .ThrowsExactly<ArgumentNullException>();\n\n    // This would fail - ArgumentNullException is a subclass of ArgumentException\n    // await Assert.That(() => throw new ArgumentNullException())\n    //     .ThrowsExactly<ArgumentException>();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"throws-runtime-type",children:"Throws (Runtime Type)"}),"\n",(0,i.jsx)(n.p,{children:"Use when the exception type is only known at runtime:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Throws_Runtime_Type()\n{\n    Type exceptionType = typeof(InvalidOperationException);\n\n    await Assert.That(() => throw new InvalidOperationException())\n        .Throws(exceptionType);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"throwsnothing",children:"ThrowsNothing"}),"\n",(0,i.jsx)(n.p,{children:"Tests that code does not throw any exception:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Code_Does_Not_Throw()\n{\n    await Assert.That(() => int.Parse("42"))\n        .ThrowsNothing();\n\n    await Assert.That(() => ValidateInput("valid"))\n        .ThrowsNothing();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"async-exception-assertions",children:"Async Exception Assertions"}),"\n",(0,i.jsx)(n.p,{children:"For async operations, use async delegates:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Async_Throws_Exception()\n{\n    await Assert.That(async () => await FailingOperationAsync())\n        .Throws<HttpRequestException>();\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Async_Does_Not_Throw()\n{\n    await Assert.That(async () => await SuccessfulOperationAsync())\n        .ThrowsNothing();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"exception-message-assertions",children:"Exception Message Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"withmessage",children:"WithMessage"}),"\n",(0,i.jsx)(n.p,{children:"Tests that the exception has an exact message:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Exception_With_Exact_Message()\n{\n    await Assert.That(() => throw new InvalidOperationException("Operation failed"))\n        .Throws<InvalidOperationException>()\n        .WithMessage("Operation failed");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"withmessagecontaining",children:"WithMessageContaining"}),"\n",(0,i.jsx)(n.p,{children:"Tests that the exception message contains a substring:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Exception_Message_Contains()\n{\n    await Assert.That(() => throw new ArgumentException("The parameter \'userId\' is invalid"))\n        .Throws<ArgumentException>()\n        .WithMessageContaining("userId");\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"case-insensitive",children:"Case-Insensitive"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Message_Contains_Ignoring_Case()\n{\n    await Assert.That(() => throw new Exception("ERROR: Failed"))\n        .Throws<Exception>()\n        .WithMessageContaining("error")\n        .IgnoringCase();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"withmessagenotcontaining",children:"WithMessageNotContaining"}),"\n",(0,i.jsx)(n.p,{children:"Tests that the exception message does not contain a substring:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Message_Does_Not_Contain()\n{\n    await Assert.That(() => throw new Exception("User error"))\n        .Throws<Exception>()\n        .WithMessageNotContaining("system");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"withmessagematching",children:"WithMessageMatching"}),"\n",(0,i.jsx)(n.p,{children:"Tests that the exception message matches a pattern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Message_Matches_Pattern()\n{\n    await Assert.That(() => throw new Exception("Error code: 12345"))\n        .Throws<Exception>()\n        .WithMessageMatching("Error code: *");\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Or with a ",(0,i.jsx)(n.code,{children:"StringMatcher"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Message_Matches_With_Matcher()\n{\n    var matcher = new StringMatcher("Error * occurred", caseSensitive: false);\n\n    await Assert.That(() => throw new Exception("Error 500 occurred"))\n        .Throws<Exception>()\n        .WithMessageMatching(matcher);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"argumentexception-specific",children:"ArgumentException Specific"}),"\n",(0,i.jsx)(n.h3,{id:"withparametername",children:"WithParameterName"}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.code,{children:"ArgumentException"})," and its subclasses, you can assert on the parameter name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task ArgumentException_With_Parameter_Name()\n{\n    await Assert.That(() => ValidateUser(null!))\n        .Throws<ArgumentNullException>()\n        .WithParameterName("user");\n}\n\nvoid ValidateUser(User user)\n{\n    if (user == null)\n        throw new ArgumentNullException(nameof(user));\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Combine with message assertions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task ArgumentException_Parameter_And_Message()\n{\n    await Assert.That(() => SetAge(-1))\n        .Throws<ArgumentOutOfRangeException>()\n        .WithParameterName("age")\n        .WithMessageContaining("must be positive");\n}\n\nvoid SetAge(int age)\n{\n    if (age < 0)\n        throw new ArgumentOutOfRangeException(nameof(age), "Age must be positive");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"inner-exception-assertions",children:"Inner Exception Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"withinnerexception",children:"WithInnerException"}),"\n",(0,i.jsx)(n.p,{children:"Assert on the inner exception:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Exception_With_Inner_Exception()\n{\n    await Assert.That(() => {\n        try\n        {\n            int.Parse("not a number");\n        }\n        catch (Exception ex)\n        {\n            throw new InvalidOperationException("Processing failed", ex);\n        }\n    })\n    .Throws<InvalidOperationException>()\n    .WithInnerException();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Chain to assert on the inner exception type:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Inner_Exception_Type()\n{\n    await Assert.That(() => ThrowWithInner())\n        .Throws<InvalidOperationException>()\n        .WithInnerException()\n        .Throws<FormatException>();\n}\n\nvoid ThrowWithInner()\n{\n    try\n    {\n        int.Parse("abc");\n    }\n    catch (Exception ex)\n    {\n        throw new InvalidOperationException("Outer", ex);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,i.jsx)(n.h3,{id:"validation-exceptions",children:"Validation Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Validate_Email_Throws()\n{\n    await Assert.That(() => ValidateEmail("invalid-email"))\n        .Throws<ArgumentException>()\n        .WithParameterName("email")\n        .WithMessageContaining("valid email");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"null-argument-checks",children:"Null Argument Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Null_Argument_Throws()\n{\n    await Assert.That(() => ProcessData(null!))\n        .Throws<ArgumentNullException>()\n        .WithParameterName("data");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"file-operations",children:"File Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task File_Not_Found()\n{\n    await Assert.That(() => File.ReadAllText("nonexistent.txt"))\n        .Throws<FileNotFoundException>()\n        .WithMessageContaining("nonexistent.txt");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"network-operations",children:"Network Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task HTTP_Request_Fails()\n{\n    await Assert.That(async () => await _client.GetAsync("http://invalid-url"))\n        .Throws<HttpRequestException>();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"database-operations",children:"Database Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Duplicate_Key_Violation()\n{\n    await Assert.That(async () => await InsertDuplicateAsync())\n        .Throws<DbUpdateException>()\n        .WithMessageContaining("duplicate key");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"division-by-zero",children:"Division by Zero"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Division_By_Zero()\n{\n    await Assert.That(() => {\n        int a = 10;\n        int b = 0;\n        return a / b;\n    })\n    .Throws<DivideByZeroException>();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"index-out-of-range",children:"Index Out of Range"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Array_Index_Out_Of_Range()\n{\n    var array = new[] { 1, 2, 3 };\n\n    await Assert.That(() => array[10])\n        .Throws<IndexOutOfRangeException>();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"invalid-cast",children:"Invalid Cast"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Invalid_Cast()\n{\n    object obj = "string";\n\n    await Assert.That(() => (int)obj)\n        .Throws<InvalidCastException>();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-exceptions",children:"Custom Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class BusinessRuleException : Exception\n{\n    public string RuleCode { get; }\n\n    public BusinessRuleException(string ruleCode, string message)\n        : base(message)\n    {\n        RuleCode = ruleCode;\n    }\n}\n\n[Test]\npublic async Task Custom_Exception_With_Properties()\n{\n    var exception = await Assert.That(() =>\n        throw new BusinessRuleException("BR001", "Business rule violated"))\n        .Throws<BusinessRuleException>();\n\n    // Can\'t directly assert on exception properties yet, but you can access them\n    await Assert.That(exception.RuleCode).IsEqualTo("BR001");\n    await Assert.That(exception.Message).Contains("Business rule");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-multiple-operations",children:"Testing Multiple Operations"}),"\n",(0,i.jsx)(n.h3,{id:"using-assertmultiple",children:"Using Assert.Multiple"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Multiple_Exception_Scenarios()\n{\n    await using (Assert.Multiple())\n    {\n        await Assert.That(() => int.Parse("abc"))\n            .Throws<FormatException>();\n\n        await Assert.That(() => int.Parse("999999999999999999999"))\n            .Throws<OverflowException>();\n\n        await Assert.That(() => int.Parse("42"))\n            .ThrowsNothing();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"exception-inheritance",children:"Exception Inheritance"}),"\n",(0,i.jsxs)(n.p,{children:["When using ",(0,i.jsx)(n.code,{children:"Throws<T>()"}),", subclasses are accepted:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Exception_Inheritance()\n{\n    // ArgumentNullException inherits from ArgumentException\n    await Assert.That(() => throw new ArgumentNullException())\n        .Throws<ArgumentException>(); // \u2705 Passes\n\n    await Assert.That(() => throw new ArgumentNullException())\n        .Throws<ArgumentNullException>(); // \u2705 Also passes\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"ThrowsExactly<T>()"})," if you need the exact type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Exact_Exception_Type()\n{\n    // This fails - ArgumentNullException is not exactly ArgumentException\n    // await Assert.That(() => throw new ArgumentNullException())\n    //     .ThrowsExactly<ArgumentException>();\n\n    await Assert.That(() => throw new ArgumentException())\n        .ThrowsExactly<ArgumentException>(); // \u2705 Passes\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"aggregate-exceptions",children:"Aggregate Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Aggregate_Exception()\n{\n    await Assert.That(() => {\n        var task1 = Task.Run(() => throw new InvalidOperationException());\n        var task2 = Task.Run(() => throw new ArgumentException());\n        Task.WaitAll(task1, task2);\n    })\n    .Throws<AggregateException>();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"chaining-exception-assertions",children:"Chaining Exception Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Chained_Exception_Assertions()\n{\n    await Assert.That(() => ValidateInput(""))\n        .Throws<ArgumentException>()\n        .WithParameterName("input")\n        .WithMessageContaining("cannot be empty")\n        .WithMessageNotContaining("null");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-that-no-exception-is-thrown",children:"Testing that No Exception is Thrown"}),"\n",(0,i.jsx)(n.h3,{id:"throwsnothing-vs-try-catch",children:"ThrowsNothing vs Try-Catch"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Explicit_No_Exception()\n{\n    // Using ThrowsNothing\n    await Assert.That(() => SafeOperation())\n        .ThrowsNothing();\n\n    // Alternative: just call it\n    SafeOperation(); // If it throws, the test fails\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"expected-failures",children:"Expected Failures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Expected_Validation_Failure()\n{\n    var invalidUser = new User { Age = -1 };\n\n    await Assert.That(() => ValidateUser(invalidUser))\n        .Throws<ValidationException>()\n        .WithMessageContaining("Age");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"defensive-programming",children:"Defensive Programming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Guard_Clause_Validation()\n{\n    await Assert.That(() => new Service(null!))\n        .Throws<ArgumentNullException>()\n        .WithParameterName("dependency");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"state-validation",children:"State Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Invalid_State_Operation()\n{\n    var connection = new Connection();\n    // Don\'t connect\n\n    await Assert.That(() => connection.SendData("test"))\n        .Throws<InvalidOperationException>()\n        .WithMessageContaining("not connected");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-errors",children:"Configuration Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Missing_Configuration()\n{\n    await Assert.That(() => LoadConfiguration("invalid.json"))\n        .Throws<ConfigurationException>()\n        .WithMessageContaining("invalid.json");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"timeout-exceptions",children:"Timeout Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Operation_Timeout()\n{\n    using var cts = new CancellationTokenSource(TimeSpan.FromMilliseconds(100));\n\n    await Assert.That(async () => await LongRunningOperationAsync(cts.Token))\n        .Throws<TaskCanceledException>();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"re-throwing-exceptions",children:"Re-throwing Exceptions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Wrapper_Exception()\n{\n    await Assert.That(() => {\n        try\n        {\n            RiskyOperation();\n        }\n        catch (Exception ex)\n        {\n            throw new ApplicationException("Operation failed", ex);\n        }\n    })\n    .Throws<ApplicationException>()\n    .WithInnerException();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"exception-assertions-with-asyncawait",children:"Exception Assertions with Async/Await"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[Test]\npublic async Task Async_Exception_Handling()\n{\n    await Assert.That(async () => {\n        await Task.Delay(10);\n        throw new InvalidOperationException("Async failure");\n    })\n    .Throws<InvalidOperationException>()\n    .WithMessageContaining("Async failure");\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/tasks-and-async",children:"Tasks & Async"})," - Testing async operations and task state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/types",children:"Types"})," - Type checking for exception types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/string",children:"Strings"})," - String assertions for exception messages"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);