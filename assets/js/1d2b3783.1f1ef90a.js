"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[7873],{9948:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"assertions/numeric","title":"Numeric Assertions","description":"TUnit provides comprehensive assertions for testing numeric values, including specialized assertions for positive/negative values and comparison assertions with tolerance support.","source":"@site/docs/assertions/numeric.md","sourceDirName":"assertions","slug":"/assertions/numeric","permalink":"/docs/assertions/numeric","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4.5,"frontMatter":{"sidebar_position":4.5},"sidebar":"docs","previous":{"title":"Boolean Assertions","permalink":"/docs/assertions/boolean"},"next":{"title":"String Assertions","permalink":"/docs/assertions/string"}}');var i=a(4848),t=a(8453);const l={sidebar_position:4.5},r="Numeric Assertions",o={},c=[{value:"Sign Assertions",id:"sign-assertions",level:2},{value:"IsPositive",id:"ispositive",level:3},{value:"IsNegative",id:"isnegative",level:3},{value:"Zero is Neither Positive Nor Negative",id:"zero-is-neither-positive-nor-negative",level:3},{value:"Comparison Assertions",id:"comparison-assertions",level:2},{value:"Quick Reference",id:"quick-reference",level:3},{value:"Tolerance for Floating-Point Numbers",id:"tolerance-for-floating-point-numbers",level:2},{value:"Double Tolerance",id:"double-tolerance",level:3},{value:"Float Tolerance",id:"float-tolerance",level:3},{value:"Decimal Tolerance",id:"decimal-tolerance",level:3},{value:"Long Tolerance",id:"long-tolerance",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Financial Calculations",id:"financial-calculations",level:3},{value:"Temperature Conversions",id:"temperature-conversions",level:3},{value:"Percentage Calculations",id:"percentage-calculations",level:3},{value:"Statistical Calculations",id:"statistical-calculations",level:3},{value:"Range Validation",id:"range-validation",level:2},{value:"Valid Range Checks",id:"valid-range-checks",level:3},{value:"Percentage Range",id:"percentage-range",level:3},{value:"Score Validation",id:"score-validation",level:3},{value:"Mathematical Operations",id:"mathematical-operations",level:2},{value:"Addition",id:"addition",level:3},{value:"Subtraction",id:"subtraction",level:3},{value:"Multiplication",id:"multiplication",level:3},{value:"Division",id:"division",level:3},{value:"Modulo",id:"modulo",level:3},{value:"Working with Math Library",id:"working-with-math-library",level:2},{value:"Rounding",id:"rounding",level:3},{value:"Ceiling and Floor",id:"ceiling-and-floor",level:3},{value:"Absolute Value",id:"absolute-value",level:3},{value:"Power and Square Root",id:"power-and-square-root",level:3},{value:"Trigonometry",id:"trigonometry",level:3},{value:"Increment and Decrement",id:"increment-and-decrement",level:2},{value:"Chaining Numeric Assertions",id:"chaining-numeric-assertions",level:2},{value:"Nullable Numeric Types",id:"nullable-numeric-types",level:2},{value:"Special Floating-Point Values",id:"special-floating-point-values",level:2},{value:"Infinity",id:"infinity",level:3},{value:"NaN (Not a Number)",id:"nan-not-a-number",level:3},{value:"Performance Metrics",id:"performance-metrics",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Boundary Testing",id:"boundary-testing",level:3},{value:"Growth Rate Validation",id:"growth-rate-validation",level:3},{value:"Ratio Calculations",id:"ratio-calculations",level:3},{value:"See Also",id:"see-also",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"numeric-assertions",children:"Numeric Assertions"})}),"\n",(0,i.jsx)(n.p,{children:"TUnit provides comprehensive assertions for testing numeric values, including specialized assertions for positive/negative values and comparison assertions with tolerance support."}),"\n",(0,i.jsx)(n.h2,{id:"sign-assertions",children:"Sign Assertions"}),"\n",(0,i.jsx)(n.h3,{id:"ispositive",children:"IsPositive"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a numeric value is greater than zero:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Positive_Values()\n{\n    var profit = 1500m;\n    await Assert.That(profit).IsPositive();\n\n    var count = 5;\n    await Assert.That(count).IsPositive();\n\n    var rating = 4.5;\n    await Assert.That(rating).IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Works with all numeric types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task All_Numeric_Types()\n{\n    // Integers\n    await Assert.That(1).IsPositive();           // int\n    await Assert.That(1L).IsPositive();          // long\n    await Assert.That((short)1).IsPositive();    // short\n    await Assert.That((byte)1).IsPositive();     // byte\n\n    // Floating point\n    await Assert.That(1.5).IsPositive();         // double\n    await Assert.That(1.5f).IsPositive();        // float\n    await Assert.That(1.5m).IsPositive();        // decimal\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"isnegative",children:"IsNegative"}),"\n",(0,i.jsx)(n.p,{children:"Tests that a numeric value is less than zero:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Negative_Values()\n{\n    var loss = -250.50m;\n    await Assert.That(loss).IsNegative();\n\n    var temperature = -5;\n    await Assert.That(temperature).IsNegative();\n\n    var delta = -0.001;\n    await Assert.That(delta).IsNegative();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"zero-is-neither-positive-nor-negative",children:"Zero is Neither Positive Nor Negative"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Zero_Checks()\n{\n    var zero = 0;\n\n    // These will both fail:\n    // await Assert.That(zero).IsPositive();  // \u274c Fails\n    // await Assert.That(zero).IsNegative();  // \u274c Fails\n\n    // Instead, check for zero explicitly:\n    await Assert.That(zero).IsEqualTo(0);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"comparison-assertions",children:"Comparison Assertions"}),"\n",(0,i.jsxs)(n.p,{children:["All comparison operators work with numeric types. See ",(0,i.jsx)(n.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality and Comparison"})," for full details."]}),"\n",(0,i.jsx)(n.h3,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Numeric_Comparisons()\n{\n    var value = 42;\n\n    await Assert.That(value).IsGreaterThan(40);\n    await Assert.That(value).IsGreaterThanOrEqualTo(42);\n    await Assert.That(value).IsLessThan(50);\n    await Assert.That(value).IsLessThanOrEqualTo(42);\n    await Assert.That(value).IsBetween(0, 100);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tolerance-for-floating-point-numbers",children:"Tolerance for Floating-Point Numbers"}),"\n",(0,i.jsx)(n.p,{children:"Floating-point arithmetic can introduce rounding errors. Use tolerance for safe comparisons:"}),"\n",(0,i.jsx)(n.h3,{id:"double-tolerance",children:"Double Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Double_Tolerance()\n{\n    double result = 1.0 / 3.0;  // 0.33333333...\n    double expected = 0.333;\n\n    // Without tolerance - might fail\n    // await Assert.That(result).IsEqualTo(expected);\n\n    // With tolerance - safe\n    await Assert.That(result).IsEqualTo(expected, tolerance: 0.001);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"float-tolerance",children:"Float Tolerance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Float_Tolerance()\n{\n    float pi = 3.14159f;\n    float approximation = 3.14f;\n\n    await Assert.That(pi).IsEqualTo(approximation, tolerance: 0.01f);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"decimal-tolerance",children:"Decimal Tolerance"}),"\n",(0,i.jsx)(n.p,{children:"Useful for monetary calculations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Decimal_Tolerance()\n{\n    decimal price = 19.995m;\n    decimal rounded = 20.00m;\n\n    await Assert.That(price).IsEqualTo(rounded, tolerance: 0.01m);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"long-tolerance",children:"Long Tolerance"}),"\n",(0,i.jsx)(n.p,{children:"For timestamp or large number comparisons:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Long_Tolerance()\n{\n    long timestamp1 = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n    await Task.Delay(50);\n    long timestamp2 = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n\n    // Allow 100ms difference\n    await Assert.That(timestamp1).IsEqualTo(timestamp2, tolerance: 100L);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,i.jsx)(n.h3,{id:"financial-calculations",children:"Financial Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Calculate_Total_Price()\n{\n    decimal unitPrice = 9.99m;\n    int quantity = 3;\n    decimal tax = 0.08m; // 8%\n\n    decimal subtotal = unitPrice * quantity;\n    decimal total = subtotal * (1 + tax);\n\n    await Assert.That(total).IsPositive();\n    await Assert.That(total).IsGreaterThan(subtotal);\n    await Assert.That(total).IsEqualTo(32.37m, tolerance: 0.01m);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"temperature-conversions",children:"Temperature Conversions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Celsius_To_Fahrenheit()\n{\n    double celsius = 20.0;\n    double fahrenheit = celsius * 9.0 / 5.0 + 32.0;\n\n    await Assert.That(fahrenheit).IsEqualTo(68.0, tolerance: 0.1);\n    await Assert.That(fahrenheit).IsGreaterThan(celsius);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"percentage-calculations",children:"Percentage Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Calculate_Percentage()\n{\n    int total = 200;\n    int passed = 175;\n    double percentage = (double)passed / total * 100;\n\n    await Assert.That(percentage).IsPositive();\n    await Assert.That(percentage).IsBetween(0, 100);\n    await Assert.That(percentage).IsEqualTo(87.5, tolerance: 0.1);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"statistical-calculations",children:"Statistical Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Calculate_Average()\n{\n    var numbers = new[] { 10, 20, 30, 40, 50 };\n    double average = numbers.Average();\n\n    await Assert.That(average).IsEqualTo(30.0, tolerance: 0.01);\n    await Assert.That(average).IsGreaterThan(numbers.Min());\n    await Assert.That(average).IsLessThan(numbers.Max());\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"range-validation",children:"Range Validation"}),"\n",(0,i.jsx)(n.h3,{id:"valid-range-checks",children:"Valid Range Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_Age()\n{\n    int age = 25;\n\n    await Assert.That(age).IsBetween(0, 120);\n    await Assert.That(age).IsGreaterThanOrEqualTo(0);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"percentage-range",children:"Percentage Range"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_Percentage()\n{\n    double successRate = 87.5;\n\n    await Assert.That(successRate).IsBetween(0, 100);\n    await Assert.That(successRate).IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"score-validation",children:"Score Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Validate_Score()\n{\n    int score = 85;\n    int minPassing = 60;\n    int maxScore = 100;\n\n    await Assert.That(score).IsBetween(minPassing, maxScore);\n    await Assert.That(score).IsGreaterThanOrEqualTo(minPassing);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"mathematical-operations",children:"Mathematical Operations"}),"\n",(0,i.jsx)(n.h3,{id:"addition",children:"Addition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Addition()\n{\n    var result = 5 + 3;\n\n    await Assert.That(result).IsEqualTo(8);\n    await Assert.That(result).IsPositive();\n    await Assert.That(result).IsGreaterThan(5);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"subtraction",children:"Subtraction"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Subtraction()\n{\n    var result = 10 - 3;\n\n    await Assert.That(result).IsEqualTo(7);\n    await Assert.That(result).IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multiplication",children:"Multiplication"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Multiplication()\n{\n    var result = 4 * 5;\n\n    await Assert.That(result).IsEqualTo(20);\n    await Assert.That(result).IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"division",children:"Division"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Division()\n{\n    double result = 10.0 / 4.0;\n\n    await Assert.That(result).IsEqualTo(2.5, tolerance: 0.001);\n    await Assert.That(result).IsPositive();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"modulo",children:"Modulo"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Modulo()\n{\n    var result = 17 % 5;\n\n    await Assert.That(result).IsEqualTo(2);\n    await Assert.That(result).IsGreaterThanOrEqualTo(0);\n    await Assert.That(result).IsLessThan(5);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-math-library",children:"Working with Math Library"}),"\n",(0,i.jsx)(n.h3,{id:"rounding",children:"Rounding"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Math_Round()\n{\n    double value = 3.7;\n    double rounded = Math.Round(value);\n\n    await Assert.That(rounded).IsEqualTo(4.0, tolerance: 0.001);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ceiling-and-floor",children:"Ceiling and Floor"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Math_Ceiling_Floor()\n{\n    double value = 3.2;\n\n    double ceiling = Math.Ceiling(value);\n    await Assert.That(ceiling).IsEqualTo(4.0);\n\n    double floor = Math.Floor(value);\n    await Assert.That(floor).IsEqualTo(3.0);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"absolute-value",children:"Absolute Value"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Math_Abs()\n{\n    int negative = -42;\n    int positive = Math.Abs(negative);\n\n    await Assert.That(positive).IsPositive();\n    await Assert.That(positive).IsEqualTo(42);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"power-and-square-root",children:"Power and Square Root"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Math_Power_Sqrt()\n{\n    double squared = Math.Pow(5, 2);\n    await Assert.That(squared).IsEqualTo(25.0, tolerance: 0.001);\n\n    double root = Math.Sqrt(25);\n    await Assert.That(root).IsEqualTo(5.0, tolerance: 0.001);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"trigonometry",children:"Trigonometry"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Math_Trigonometry()\n{\n    double angle = Math.PI / 4; // 45 degrees\n    double sine = Math.Sin(angle);\n\n    await Assert.That(sine).IsEqualTo(Math.Sqrt(2) / 2, tolerance: 0.0001);\n    await Assert.That(sine).IsPositive();\n    await Assert.That(sine).IsBetween(0, 1);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"increment-and-decrement",children:"Increment and Decrement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Increment_Decrement()\n{\n    int counter = 0;\n\n    counter++;\n    await Assert.That(counter).IsEqualTo(1);\n    await Assert.That(counter).IsPositive();\n\n    counter--;\n    await Assert.That(counter).IsEqualTo(0);\n\n    counter--;\n    await Assert.That(counter).IsEqualTo(-1);\n    await Assert.That(counter).IsNegative();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"chaining-numeric-assertions",children:"Chaining Numeric Assertions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Chained_Numeric_Assertions()\n{\n    int score = 85;\n\n    await Assert.That(score)\n        .IsPositive()\n        .And.IsGreaterThan(70)\n        .And.IsLessThan(100)\n        .And.IsBetween(80, 90);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"nullable-numeric-types",children:"Nullable Numeric Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Nullable_Numerics()\n{\n    int? value = 42;\n\n    await Assert.That(value).IsNotNull();\n    await Assert.That(value).IsEqualTo(42);\n    await Assert.That(value).IsPositive();\n}\n\n[Test]\npublic async Task Nullable_Null()\n{\n    int? value = null;\n\n    await Assert.That(value).IsNull();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"special-floating-point-values",children:"Special Floating-Point Values"}),"\n",(0,i.jsx)(n.h3,{id:"infinity",children:"Infinity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Infinity_Checks()\n{\n    double positiveInfinity = double.PositiveInfinity;\n    double negativeInfinity = double.NegativeInfinity;\n\n    await Assert.That(positiveInfinity).IsEqualTo(double.PositiveInfinity);\n    await Assert.That(negativeInfinity).IsEqualTo(double.NegativeInfinity);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"nan-not-a-number",children:"NaN (Not a Number)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task NaN_Checks()\n{\n    double nan = double.NaN;\n\n    // NaN is never equal to itself\n    await Assert.That(double.IsNaN(nan)).IsTrue();\n\n    // Can't use IsEqualTo with NaN\n    // await Assert.That(nan).IsEqualTo(double.NaN); // \u274c Won't work\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Response_Time_Check()\n{\n    var stopwatch = Stopwatch.StartNew();\n    await PerformOperationAsync();\n    stopwatch.Stop();\n\n    long milliseconds = stopwatch.ElapsedMilliseconds;\n\n    await Assert.That(milliseconds).IsPositive();\n    await Assert.That(milliseconds).IsLessThan(1000); // Under 1 second\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"boundary-testing",children:"Boundary Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Boundary_Values()\n{\n    int min = int.MinValue;\n    int max = int.MaxValue;\n\n    await Assert.That(min).IsNegative();\n    await Assert.That(max).IsPositive();\n    await Assert.That(min).IsLessThan(max);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"growth-rate-validation",children:"Growth Rate Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Growth_Rate()\n{\n    decimal previousValue = 100m;\n    decimal currentValue = 125m;\n    decimal growthRate = (currentValue - previousValue) / previousValue * 100;\n\n    await Assert.That(growthRate).IsPositive();\n    await Assert.That(growthRate).IsEqualTo(25m, tolerance: 0.1m);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ratio-calculations",children:"Ratio Calculations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[Test]\npublic async Task Success_Ratio()\n{\n    int successful = 85;\n    int total = 100;\n    double ratio = (double)successful / total;\n\n    await Assert.That(ratio).IsPositive();\n    await Assert.That(ratio).IsBetween(0, 1);\n    await Assert.That(ratio).IsGreaterThan(0.8); // 80% threshold\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/equality-and-comparison",children:"Equality & Comparison"})," - General comparison assertions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/datetime",children:"DateTime Assertions"})," - Time-based numeric values with tolerance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/assertions/collections",children:"Collections"})," - Numeric operations on collections (Count, Sum, Average)"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>r});var s=a(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);