"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[910],{9365:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"execution/engine-modes","title":"Engine Modes","description":"TUnit supports both reflection-based and AOT (Ahead-of-Time) compilation modes, providing flexibility for different deployment scenarios.","source":"@site/docs/execution/engine-modes.md","sourceDirName":"execution","slug":"/execution/engine-modes","permalink":"/docs/execution/engine-modes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Executors","permalink":"/docs/execution/executors"},"next":{"title":"Not in Parallel","permalink":"/docs/parallelism/not-in-parallel"}}');var o=i(4848),r=i(8453);const s={},l="Engine Modes",c={},d=[{value:"Execution Modes",id:"execution-modes",level:2},{value:"AOT Support",id:"aot-support",level:2},{value:"How AOT Mode Works",id:"how-aot-mode-works",level:2},{value:"Publishing with Native AOT",id:"publishing-with-native-aot",level:2},{value:"Configuration",id:"configuration",level:2},{value:"EditorConfig (.editorconfig)",id:"editorconfig-editorconfig",level:3},{value:"MSBuild Properties",id:"msbuild-properties",level:3},{value:"Compatibility",id:"compatibility",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"engine-modes",children:"Engine Modes"})}),"\n",(0,o.jsx)(n.p,{children:"TUnit supports both reflection-based and AOT (Ahead-of-Time) compilation modes, providing flexibility for different deployment scenarios."}),"\n",(0,o.jsx)(n.h2,{id:"execution-modes",children:"Execution Modes"}),"\n",(0,o.jsx)(n.p,{children:"TUnit can run in two modes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Reflection Mode"})," (Default): Standard execution using runtime reflection for test discovery and execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"AOT Mode"}),": When published with Native AOT, TUnit uses compile-time source generation for full AOT compatibility"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"aot-support",children:"AOT Support"}),"\n",(0,o.jsx)(n.p,{children:"When publishing your tests with Native AOT, TUnit provides:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Source-Generated Execution"}),": All test discovery and execution uses compile-time generated code"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Native AOT Compatibility"}),": Full support for Native AOT compilation scenarios"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Superior Performance"}),": 2-3x performance improvement over reflection-based execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compile-Time Safety"}),": Type errors and configuration issues caught at build time"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"how-aot-mode-works",children:"How AOT Mode Works"}),"\n",(0,o.jsx)(n.p,{children:"When using Native AOT publishing, TUnit generates strongly-typed delegates for all test operations at compile time:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test Invocation"}),": Type-specific delegates instead of generic object arrays"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data Sources"}),": Specialized factory methods with exact return types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Property Injection"}),": Generated property setters with dependency resolution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Hook Methods"}),": Strongly-typed hook delegates with proper async support"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"publishing-with-native-aot",children:"Publishing with Native AOT"}),"\n",(0,o.jsx)(n.p,{children:"To use TUnit with Native AOT:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n    <PublishAot>true</PublishAot>\n</PropertyGroup>\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then publish your project:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"dotnet publish -c Release\n"})}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"You can configure TUnit behavior through EditorConfig or MSBuild properties:"}),"\n",(0,o.jsx)(n.h3,{id:"editorconfig-editorconfig",children:"EditorConfig (.editorconfig)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:"# Enable AOT optimizations when available (default: true)\ntunit.enable_aot_optimizations = true\n\n# Generic type resolution depth (default: 5)\ntunit.generic_depth_limit = 5\n\n# Property injection support (default: true)\ntunit.enable_property_injection = true\n\n# ValueTask hook support (default: true)\ntunit.enable_valuetask_hooks = true\n\n# Verbose diagnostics (default: false)\ntunit.enable_verbose_diagnostics = true\n"})}),"\n",(0,o.jsx)(n.h3,{id:"msbuild-properties",children:"MSBuild Properties"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<PropertyGroup>\n    <TUnitEnableAotOptimizations>true</TUnitEnableAotOptimizations>\n    <TUnitGenericDepthLimit>10</TUnitGenericDepthLimit>\n    <TUnitEnablePropertyInjection>true</TUnitEnablePropertyInjection>\n</PropertyGroup>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"compatibility",children:"Compatibility"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"C# Projects"}),": Full support with source generation\n",(0,o.jsx)(n.strong,{children:"F# Projects"}),": Limited support - use C# test projects that reference F# libraries\n",(0,o.jsx)(n.strong,{children:"VB.NET Projects"}),": Limited support - use C# test projects that reference VB.NET libraries"]}),"\n",(0,o.jsx)(n.p,{children:"For cross-language scenarios, create a separate C# test project that references your F#/VB.NET libraries and write tests there."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);