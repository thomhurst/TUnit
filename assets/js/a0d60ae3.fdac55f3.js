"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[5483],{3752:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"test-authoring/skip","title":"Skipping Tests","description":"If you want to simply skip a test, just place a [Skip(reason)] attribute on your test with an explanation of why you\'re skipping it.","source":"@site/docs/test-authoring/skip.md","sourceDirName":"test-authoring","slug":"/test-authoring/skip","permalink":"/docs/test-authoring/skip","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Nested Data Sources with Initialization","permalink":"/docs/test-authoring/nested-data-sources"},"next":{"title":"Explicit","permalink":"/docs/test-authoring/explicit"}}');var i=t(4848),a=t(8453);const o={},c="Skipping Tests",r={},l=[{value:"Custom Logic",id:"custom-logic",level:2},{value:"Global Skipping",id:"global-skipping",level:2}];function p(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"skipping-tests",children:"Skipping Tests"})}),"\n",(0,i.jsxs)(s.p,{children:["If you want to simply skip a test, just place a ",(0,i.jsx)(s.code,{children:"[Skip(reason)]"})," attribute on your test with an explanation of why you're skipping it."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test, Skip("There\'s a bug! See issue #1")]\n    public async Task MyTest()\n    {\n        ...\n    }\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"custom-logic",children:"Custom Logic"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"SkipAttribute"})," can be inherited and custom logic plugged into it, so it only skips the test if it meets certain criteria."]}),"\n",(0,i.jsx)(s.p,{children:"As an example, this could be used to skip tests on certain operating systems."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'public class WindowsOnlyAttribute() : SkipAttribute("This test is only supported on Windows")\n{\n    public override Task<bool> ShouldSkip(TestRegisteredContext context)\n    {\n        return Task.FromResult(!RuntimeInformation.IsOSPlatform(OSPlatform.Windows));\n    }\n}\n'})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\npublic class MyTestClass\n{\n    [Test, WindowsOnly]\n    public async Task MyTest()\n    {\n        ...\n    }\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"global-skipping",children:"Global Skipping"}),"\n",(0,i.jsx)(s.p,{children:"In case you want to skip all tests in a project, you can add the attribute on the assembly level."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'[assembly: Skip("Skipping all tests in this assembly")]\n'})}),"\n",(0,i.jsx)(s.p,{children:"Or you can skip all the tests in a class like this:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:'[Skip("Skipping all tests in this class")]\npublic class MyTestClass\n{\n}\n'})})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>c});var n=t(6540);const i={},a=n.createContext(i);function o(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);