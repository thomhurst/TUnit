"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[9335],{6705:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/complex-test-infrastructure","title":"Complex Test Infrastructure Orchestration","description":"TUnit provides a property injection system that can help orchestrate complex test infrastructure setups. This page demonstrates how TUnit handles test setups that typically require manual coordination in traditional testing approaches.","source":"@site/docs/examples/complex-test-infrastructure.md","sourceDirName":"examples","slug":"/examples/complex-test-infrastructure","permalink":"/docs/examples/complex-test-infrastructure","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Playwright","permalink":"/docs/examples/playwright"},"next":{"title":"Instrumenting: Global Test IDs","permalink":"/docs/examples/instrumenting-global-test-ids"}}');var a=i(4848),r=i(8453);const s={},o="Complex Test Infrastructure Orchestration",c={},l=[{value:"Real-World Example: Full Stack Integration Testing",id:"real-world-example-full-stack-integration-testing",level:2},{value:"Property Injection Chains",id:"property-injection-chains",level:2},{value:"Example: Docker Network Orchestration",id:"example-docker-network-orchestration",level:3},{value:"Example: Kafka Container with Network Injection",id:"example-kafka-container-with-network-injection",level:3},{value:"Example: Kafka UI Depending on Kafka Container",id:"example-kafka-ui-depending-on-kafka-container",level:3},{value:"Complete Integration: Web Application with Multiple Dependencies",id:"complete-integration-web-application-with-multiple-dependencies",level:2},{value:"Writing Clean Tests",id:"writing-clean-tests",level:2},{value:"Key Benefits",id:"key-benefits",level:2},{value:"1. <strong>Automatic Dependency Resolution</strong>",id:"1-automatic-dependency-resolution",level:3},{value:"2. <strong>Reduced Boilerplate</strong>",id:"2-reduced-boilerplate",level:3},{value:"3. <strong>Resource Sharing</strong>",id:"3-resource-sharing",level:3},{value:"4. <strong>Clean Separation of Concerns</strong>",id:"4-clean-separation-of-concerns",level:3},{value:"Advanced Scenarios",id:"advanced-scenarios",level:2},{value:"Database Migrations",id:"database-migrations",level:3},{value:"Comparison with Other Frameworks",id:"comparison-with-other-frameworks",level:2},{value:"Without TUnit (Traditional Approach)",id:"without-tunit-traditional-approach",level:3},{value:"With TUnit",id:"with-tunit",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"complex-test-infrastructure-orchestration",children:"Complex Test Infrastructure Orchestration"})}),"\n",(0,a.jsx)(n.p,{children:"TUnit provides a property injection system that can help orchestrate complex test infrastructure setups. This page demonstrates how TUnit handles test setups that typically require manual coordination in traditional testing approaches."}),"\n",(0,a.jsx)(n.h2,{id:"real-world-example-full-stack-integration-testing",children:"Real-World Example: Full Stack Integration Testing"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"TUnit.Example.Asp.Net.TestProject"})," showcases how to spin up an entire test environment including Docker networks, Kafka, PostgreSQL, Redis, and even a Kafka UI - all with minimal code and automatic lifecycle management."]}),"\n",(0,a.jsx)(n.h2,{id:"property-injection-chains",children:"Property Injection Chains"}),"\n",(0,a.jsx)(n.p,{children:"TUnit allows properties to be injected into other properties, creating dependency chains that are resolved and initialized in the correct order."}),"\n",(0,a.jsx)(n.h3,{id:"example-docker-network-orchestration",children:"Example: Docker Network Orchestration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Step 1: Create a shared Docker network\npublic class DockerNetwork : IAsyncInitializer, IAsyncDisposable\n{\n    public INetwork Instance { get; } = new NetworkBuilder()\n        .WithName($"tunit-{Guid.NewGuid():N}")\n        .Build();\n\n    public async Task InitializeAsync() => await Instance.CreateAsync();\n    public async ValueTask DisposeAsync() => await Instance.DisposeAsync();\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"example-kafka-container-with-network-injection",children:"Example: Kafka Container with Network Injection"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Step 2: Kafka needs the Docker network\npublic class InMemoryKafka : IAsyncInitializer, IAsyncDisposable\n{\n    // This property is automatically injected BEFORE InitializeAsync runs!\n    [ClassDataSource<DockerNetwork>(Shared = SharedType.PerTestSession)]\n    public required DockerNetwork DockerNetwork { get; init; }\n\n    public KafkaContainer Container => field ??= new KafkaBuilder()\n        .WithNetwork(DockerNetwork.Instance)  // Uses the injected network\n        .Build();\n\n    public async Task InitializeAsync() => await Container.StartAsync();\n    public async ValueTask DisposeAsync() => await Container.DisposeAsync();\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-kafka-ui-depending-on-kafka-container",children:"Example: Kafka UI Depending on Kafka Container"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'// Step 3: Kafka UI needs both the network AND the Kafka container\npublic class KafkaUI : IAsyncInitializer, IAsyncDisposable\n{\n    // Both dependencies are injected and initialized automatically!\n    [ClassDataSource<DockerNetwork>(Shared = SharedType.PerTestSession)]\n    public required DockerNetwork DockerNetwork { get; init; }\n\n    [ClassDataSource<InMemoryKafka>(Shared = SharedType.PerTestSession)]\n    public required InMemoryKafka Kafka { get; init; }\n\n    public IContainer Container => field ??= new ContainerBuilder()\n        .WithNetwork(DockerNetwork.Instance)\n        .WithImage("provectuslabs/kafka-ui:latest")\n        .WithPortBinding(8080, 8080)\n        .WithEnvironment(new Dictionary<string, string>\n        {\n            // Can reference the Kafka container that was injected!\n            ["KAFKA_CLUSTERS_0_NAME"] = "tunit_tests",\n            ["KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS"] = $"{Kafka.Container.Name}:9093",\n        })\n        .Build();\n\n    public async Task InitializeAsync() => await Container.StartAsync();\n    public async ValueTask DisposeAsync() => await Container.DisposeAsync();\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"complete-integration-web-application-with-multiple-dependencies",children:"Complete Integration: Web Application with Multiple Dependencies"}),"\n",(0,a.jsx)(n.p,{children:"Here's how everything comes together in a WebApplicationFactory that needs multiple infrastructure components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class WebApplicationFactory : WebApplicationFactory<Program>, IAsyncInitializer\n{\n    // All these dependencies are automatically initialized in dependency order!\n    [ClassDataSource<InMemoryKafka>(Shared = SharedType.PerTestSession)]\n    public required InMemoryKafka Kafka { get; init; }\n\n    [ClassDataSource<KafkaUI>(Shared = SharedType.PerTestSession)]\n    public required KafkaUI KafkaUI { get; init; }\n\n    [ClassDataSource<InMemoryRedis>(Shared = SharedType.PerTestSession)]\n    public required InMemoryRedis Redis { get; init; }\n\n    [ClassDataSource<InMemoryPostgreSqlDatabase>(Shared = SharedType.PerTestSession)]\n    public required InMemoryPostgreSqlDatabase PostgreSql { get; init; }\n\n    public Task InitializeAsync()\n    {\n        _ = Server;  // Force initialization\n        return Task.CompletedTask;\n    }\n\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\n    {\n        builder.ConfigureAppConfiguration((context, configBuilder) =>\n        {\n            // All containers are already running when this executes!\n            configBuilder.AddInMemoryCollection(new Dictionary<string, string?>\n            {\n                { "Redis:ConnectionString", Redis.Container.GetConnectionString() },\n                { "PostgreSql:ConnectionString", PostgreSql.Container.GetConnectionString() },\n                { "Kafka:ConnectionString", Kafka.Container.GetBootstrapAddress() },\n            });\n        });\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"writing-clean-tests",children:"Writing Clean Tests"}),"\n",(0,a.jsx)(n.p,{children:"Your actual test code remains clean and focused:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class Tests : TestsBase\n{\n    [ClassDataSource<WebApplicationFactory>(Shared = SharedType.PerTestSession)]\n    public required WebApplicationFactory WebApplicationFactory { get; init; }\n\n    [Test]\n    public async Task Test()\n    {\n        // Everything is already initialized and running!\n        var client = WebApplicationFactory.CreateClient();\n        var response = await client.GetAsync("/ping");\n        var content = await response.Content.ReadAsStringAsync();\n\n        await Assert.That(content).IsEqualTo("Hello, World!");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,a.jsxs)(n.h3,{id:"1-automatic-dependency-resolution",children:["1. ",(0,a.jsx)(n.strong,{children:"Automatic Dependency Resolution"})]}),"\n",(0,a.jsx)(n.p,{children:"TUnit determines the initialization order:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Docker Network \u2192 Kafka Container \u2192 Kafka UI"}),"\n",(0,a.jsx)(n.li,{children:"Docker Network \u2192 PostgreSQL Container"}),"\n",(0,a.jsx)(n.li,{children:"Docker Network \u2192 Redis Container"}),"\n",(0,a.jsx)(n.li,{children:"All containers \u2192 WebApplicationFactory"}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"2-reduced-boilerplate",children:["2. ",(0,a.jsx)(n.strong,{children:"Reduced Boilerplate"})]}),"\n",(0,a.jsx)(n.p,{children:"Traditional approaches often require:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Manual initialization order management"}),"\n",(0,a.jsx)(n.li,{children:"Complex setup/teardown methods"}),"\n",(0,a.jsx)(n.li,{children:"Careful coordination of shared resources"}),"\n",(0,a.jsx)(n.li,{children:"Manual dependency injection wiring"}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"3-resource-sharing",children:["3. ",(0,a.jsx)(n.strong,{children:"Resource Sharing"})]}),"\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.code,{children:"SharedType.PerTestSession"})," helps:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Expensive resources (containers) are created once"}),"\n",(0,a.jsx)(n.li,{children:"They're shared across all tests in the session"}),"\n",(0,a.jsx)(n.li,{children:"Automatic cleanup when tests complete"}),"\n",(0,a.jsx)(n.li,{children:"No resource leaks or orphaned containers"}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"4-clean-separation-of-concerns",children:["4. ",(0,a.jsx)(n.strong,{children:"Clean Separation of Concerns"})]}),"\n",(0,a.jsx)(n.p,{children:"Each class has a single responsibility:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"DockerNetwork"})," - manages the network"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"InMemoryKafka"})," - manages Kafka container"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"KafkaUI"})," - manages the UI container"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"WebApplicationFactory"})," - orchestrates the web app"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"advanced-scenarios",children:"Advanced Scenarios"}),"\n",(0,a.jsx)(n.h3,{id:"database-migrations",children:"Database Migrations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class InMemoryPostgreSqlDatabase : IAsyncInitializer, IAsyncDisposable\n{\n    [ClassDataSource<DockerNetwork>(Shared = SharedType.PerTestSession)]\n    public required DockerNetwork DockerNetwork { get; init; }\n\n\n    public PostgreSqlContainer Container => field ??= new PostgreSqlBuilder()\n        .WithUsername("User")\n        .WithPassword("Password")\n        .WithDatabase("TestDatabase")\n        .WithNetwork(DockerNetwork.Instance)\n        .Build();\n\n    public async Task InitializeAsync()\n    {\n        await Container.StartAsync();\n\n        // Run migrations after container starts\n        using var connection = new NpgsqlConnection(Container.GetConnectionString());\n        await connection.OpenAsync();\n        // Run your migration logic here\n    }\n\n    public async ValueTask DisposeAsync() => await Container.DisposeAsync();\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"comparison-with-other-frameworks",children:"Comparison with Other Frameworks"}),"\n",(0,a.jsx)(n.h3,{id:"without-tunit-traditional-approach",children:"Without TUnit (Traditional Approach)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class TestFixture : IAsyncLifetime\n{\n    private INetwork? _network;\n    private KafkaContainer? _kafka;\n    private IContainer? _kafkaUi;\n\n    public async Task InitializeAsync()\n    {\n        // Manual orchestration required\n        _network = new NetworkBuilder().Build();\n        await _network.CreateAsync();\n\n        _kafka = new KafkaBuilder()\n            .WithNetwork(_network)\n            .Build();\n        await _kafka.StartAsync();\n\n        _kafkaUi = new ContainerBuilder()\n            .WithNetwork(_network)\n            .WithEnvironment("KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS",\n                $"{_kafka.Name}:9093")  // Manual wiring\n            .Build();\n        await _kafkaUi.StartAsync();\n    }\n\n    public async Task DisposeAsync()\n    {\n        // Manual cleanup in reverse order\n        if (_kafkaUi != null) await _kafkaUi.DisposeAsync();\n        if (_kafka != null) await _kafka.DisposeAsync();\n        if (_network != null) await _network.DisposeAsync();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"with-tunit",children:"With TUnit"}),"\n",(0,a.jsx)(n.p,{children:"Declare your dependencies with attributes and TUnit manages the orchestration."}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Use ",(0,a.jsx)(n.code,{children:"SharedType.PerTestSession"})]})," for expensive resources like containers"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Implement ",(0,a.jsx)(n.code,{children:"IAsyncInitializer"})]})," for async initialization logic"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Implement ",(0,a.jsx)(n.code,{children:"IAsyncDisposable"})]})," for proper cleanup"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Use ",(0,a.jsx)(n.code,{children:"required"})," properties"]})," to ensure compile-time safety"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Keep classes focused"})," - one responsibility per class"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use TUnit's orchestration"})," - avoid manual dependency management"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"TUnit's property injection system helps simplify complex test infrastructure setup through a declarative, type-safe approach. By handling initialization order, lifecycle management, and dependency injection, TUnit allows you to focus on writing tests that validate your application's behavior."}),"\n",(0,a.jsx)(n.p,{children:"The framework manages the orchestration that would otherwise require manual coordination, helping to create cleaner, more maintainable test code with less boilerplate."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);