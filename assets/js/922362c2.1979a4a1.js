"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[2120],{2317:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"assertions/specialized-types","title":"Specialized Type Assertions","description":"TUnit provides assertions for many specialized .NET types beyond the common primitives. This page covers GUID, HTTP, file system, networking, and other specialized assertions.","source":"@site/docs/assertions/specialized-types.md","sourceDirName":"assertions","slug":"/assertions/specialized-types","permalink":"/docs/assertions/specialized-types","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"docs","previous":{"title":"Task and Async Assertions","permalink":"/docs/assertions/tasks-and-async"},"next":{"title":"Member Assertions","permalink":"/docs/assertions/member-assertions"}}');var t=n(4848),i=n(8453);const r={sidebar_position:12},l="Specialized Type Assertions",o={},c=[{value:"GUID Assertions",id:"guid-assertions",level:2},{value:"IsEmptyGuid / IsNotEmptyGuid",id:"isemptyguid--isnotemptyguid",level:3},{value:"HTTP Status Code Assertions",id:"http-status-code-assertions",level:2},{value:"IsSuccess",id:"issuccess",level:3},{value:"IsNotSuccess",id:"isnotsuccess",level:3},{value:"IsClientError",id:"isclienterror",level:3},{value:"IsServerError",id:"isservererror",level:3},{value:"IsRedirection",id:"isredirection",level:3},{value:"CancellationToken Assertions",id:"cancellationtoken-assertions",level:2},{value:"IsCancellationRequested / IsNotCancellationRequested",id:"iscancellationrequested--isnotcancellationrequested",level:3},{value:"CanBeCanceled / CannotBeCanceled",id:"canbecanceled--cannotbecanceled",level:3},{value:"Character Assertions",id:"character-assertions",level:2},{value:"IsLetter / IsNotLetter",id:"isletter--isnotletter",level:3},{value:"IsDigit / IsNotDigit",id:"isdigit--isnotdigit",level:3},{value:"IsWhiteSpace / IsNotWhiteSpace",id:"iswhitespace--isnotwhitespace",level:3},{value:"IsUpper / IsNotUpper",id:"isupper--isnotupper",level:3},{value:"IsLower / IsNotLower",id:"islower--isnotlower",level:3},{value:"IsPunctuation / IsNotPunctuation",id:"ispunctuation--isnotpunctuation",level:3},{value:"File System Assertions",id:"file-system-assertions",level:2},{value:"DirectoryInfo",id:"directoryinfo",level:3},{value:"Exists / DoesNotExist",id:"exists--doesnotexist",level:4},{value:"HasFiles / IsEmpty",id:"hasfiles--isempty",level:4},{value:"HasSubdirectories / HasNoSubdirectories",id:"hassubdirectories--hasnosubdirectories",level:4},{value:"FileInfo",id:"fileinfo",level:3},{value:"Exists / DoesNotExist",id:"exists--doesnotexist-1",level:4},{value:"IsReadOnly / IsNotReadOnly",id:"isreadonly--isnotreadonly",level:4},{value:"IsHidden / IsNotHidden",id:"ishidden--isnothidden",level:4},{value:"IsSystem / IsNotSystem",id:"issystem--isnotsystem",level:4},{value:"IsExecutable / IsNotExecutable",id:"isexecutable--isnotexecutable",level:4},{value:"IP Address Assertions",id:"ip-address-assertions",level:2},{value:"IsIPv4 / IsNotIPv4",id:"isipv4--isnotipv4",level:3},{value:"IsIPv6 / IsNotIPv6",id:"isipv6--isnotipv6",level:3},{value:"Lazy&lt;T&gt; Assertions",id:"lazyt-assertions",level:2},{value:"IsValueCreated / IsNotValueCreated",id:"isvaluecreated--isnotvaluecreated",level:3},{value:"Stream Assertions",id:"stream-assertions",level:2},{value:"CanRead / CannotRead",id:"canread--cannotread",level:3},{value:"CanWrite / CannotWrite",id:"canwrite--cannotwrite",level:3},{value:"CanSeek / CannotSeek",id:"canseek--cannotseek",level:3},{value:"CanTimeout / CannotTimeout",id:"cantimeout--cannottimeout",level:3},{value:"Process Assertions",id:"process-assertions",level:2},{value:"HasExited / HasNotExited",id:"hasexited--hasnotexited",level:3},{value:"IsResponding / IsNotResponding",id:"isresponding--isnotresponding",level:3},{value:"Thread Assertions",id:"thread-assertions",level:2},{value:"IsAlive / IsNotAlive",id:"isalive--isnotalive",level:3},{value:"IsBackground / IsNotBackground",id:"isbackground--isnotbackground",level:3},{value:"IsThreadPoolThread / IsNotThreadPoolThread",id:"isthreadpoolthread--isnotthreadpoolthread",level:3},{value:"WeakReference Assertions",id:"weakreference-assertions",level:2},{value:"IsAlive / IsNotAlive",id:"isalive--isnotalive-1",level:3},{value:"URI Assertions",id:"uri-assertions",level:2},{value:"IsAbsoluteUri / IsNotAbsoluteUri",id:"isabsoluteuri--isnotabsoluteuri",level:3},{value:"Encoding Assertions",id:"encoding-assertions",level:2},{value:"IsUtf8 / IsNotUtf8",id:"isutf8--isnotutf8",level:3},{value:"Version Assertions",id:"version-assertions",level:2},{value:"DayOfWeek Assertions",id:"dayofweek-assertions",level:2},{value:"IsWeekend / IsNotWeekend",id:"isweekend--isnotweekend",level:3},{value:"IsWeekday / IsNotWeekday",id:"isweekday--isnotweekday",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"API Testing",id:"api-testing",level:3},{value:"File Upload Validation",id:"file-upload-validation",level:3},{value:"Configuration Directory Check",id:"configuration-directory-check",level:3},{value:"Network Validation",id:"network-validation",level:3},{value:"See Also",id:"see-also",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"specialized-type-assertions",children:"Specialized Type Assertions"})}),"\n",(0,t.jsx)(s.p,{children:"TUnit provides assertions for many specialized .NET types beyond the common primitives. This page covers GUID, HTTP, file system, networking, and other specialized assertions."}),"\n",(0,t.jsx)(s.h2,{id:"guid-assertions",children:"GUID Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isemptyguid--isnotemptyguid",children:"IsEmptyGuid / IsNotEmptyGuid"}),"\n",(0,t.jsxs)(s.p,{children:["Tests whether a GUID is empty (",(0,t.jsx)(s.code,{children:"Guid.Empty"}),"):"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task GUID_Is_Empty()\n{\n    var emptyGuid = Guid.Empty;\n    await Assert.That(emptyGuid).IsEmptyGuid();\n\n    var newGuid = Guid.NewGuid();\n    await Assert.That(newGuid).IsNotEmptyGuid();\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"Practical usage:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Entity_Has_Valid_ID()\n{\n    var entity = new Entity { Id = Guid.NewGuid() };\n\n    await Assert.That(entity.Id).IsNotEmptyGuid();\n    await Assert.That(entity.Id).IsNotEqualTo(Guid.Empty);\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"http-status-code-assertions",children:"HTTP Status Code Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"issuccess",children:"IsSuccess"}),"\n",(0,t.jsx)(s.p,{children:"Tests for 2xx success status codes:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task HTTP_Success_Status()\n{\n    var response = await _client.GetAsync("/api/users");\n\n    await Assert.That(response.StatusCode).IsSuccess();\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"Works with all 2xx codes:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Various_Success_Codes()\n{\n    await Assert.That(HttpStatusCode.OK).IsSuccess();                  // 200\n    await Assert.That(HttpStatusCode.Created).IsSuccess();             // 201\n    await Assert.That(HttpStatusCode.Accepted).IsSuccess();            // 202\n    await Assert.That(HttpStatusCode.NoContent).IsSuccess();           // 204\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isnotsuccess",children:"IsNotSuccess"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task HTTP_Not_Success()\n{\n    await Assert.That(HttpStatusCode.NotFound).IsNotSuccess();         // 404\n    await Assert.That(HttpStatusCode.InternalServerError).IsNotSuccess(); // 500\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isclienterror",children:"IsClientError"}),"\n",(0,t.jsx)(s.p,{children:"Tests for 4xx client error status codes:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task HTTP_Client_Error()\n{\n    await Assert.That(HttpStatusCode.BadRequest).IsClientError();      // 400\n    await Assert.That(HttpStatusCode.Unauthorized).IsClientError();    // 401\n    await Assert.That(HttpStatusCode.Forbidden).IsClientError();       // 403\n    await Assert.That(HttpStatusCode.NotFound).IsClientError();        // 404\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isservererror",children:"IsServerError"}),"\n",(0,t.jsx)(s.p,{children:"Tests for 5xx server error status codes:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task HTTP_Server_Error()\n{\n    await Assert.That(HttpStatusCode.InternalServerError).IsServerError(); // 500\n    await Assert.That(HttpStatusCode.BadGateway).IsServerError();          // 502\n    await Assert.That(HttpStatusCode.ServiceUnavailable).IsServerError();  // 503\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isredirection",children:"IsRedirection"}),"\n",(0,t.jsx)(s.p,{children:"Tests for 3xx redirection status codes:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task HTTP_Redirection()\n{\n    await Assert.That(HttpStatusCode.MovedPermanently).IsRedirection();    // 301\n    await Assert.That(HttpStatusCode.Found).IsRedirection();               // 302\n    await Assert.That(HttpStatusCode.TemporaryRedirect).IsRedirection();   // 307\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"cancellationtoken-assertions",children:"CancellationToken Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"iscancellationrequested--isnotcancellationrequested",children:"IsCancellationRequested / IsNotCancellationRequested"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task CancellationToken_Is_Requested()\n{\n    var cts = new CancellationTokenSource();\n    cts.Cancel();\n\n    await Assert.That(cts.Token).IsCancellationRequested();\n}\n\n[Test]\npublic async Task CancellationToken_Not_Requested()\n{\n    var cts = new CancellationTokenSource();\n\n    await Assert.That(cts.Token).IsNotCancellationRequested();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"canbecanceled--cannotbecanceled",children:"CanBeCanceled / CannotBeCanceled"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Token_Can_Be_Canceled()\n{\n    var cts = new CancellationTokenSource();\n\n    await Assert.That(cts.Token).CanBeCanceled();\n}\n\n[Test]\npublic async Task Default_Token_Cannot_Be_Canceled()\n{\n    var token = CancellationToken.None;\n\n    await Assert.That(token).CannotBeCanceled();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"character-assertions",children:"Character Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isletter--isnotletter",children:"IsLetter / IsNotLetter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_Letter()\n{\n    await Assert.That('A').IsLetter();\n    await Assert.That('z').IsLetter();\n\n    await Assert.That('5').IsNotLetter();\n    await Assert.That('!').IsNotLetter();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isdigit--isnotdigit",children:"IsDigit / IsNotDigit"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_Digit()\n{\n    await Assert.That('0').IsDigit();\n    await Assert.That('9').IsDigit();\n\n    await Assert.That('A').IsNotDigit();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iswhitespace--isnotwhitespace",children:"IsWhiteSpace / IsNotWhiteSpace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_WhiteSpace()\n{\n    await Assert.That(' ').IsWhiteSpace();\n    await Assert.That('\\t').IsWhiteSpace();\n    await Assert.That('\\n').IsWhiteSpace();\n\n    await Assert.That('A').IsNotWhiteSpace();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isupper--isnotupper",children:"IsUpper / IsNotUpper"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_Upper()\n{\n    await Assert.That('A').IsUpper();\n    await Assert.That('Z').IsUpper();\n\n    await Assert.That('a').IsNotUpper();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"islower--isnotlower",children:"IsLower / IsNotLower"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_Lower()\n{\n    await Assert.That('a').IsLower();\n    await Assert.That('z').IsLower();\n\n    await Assert.That('A').IsNotLower();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"ispunctuation--isnotpunctuation",children:"IsPunctuation / IsNotPunctuation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Char_Is_Punctuation()\n{\n    await Assert.That('.').IsPunctuation();\n    await Assert.That(',').IsPunctuation();\n    await Assert.That('!').IsPunctuation();\n\n    await Assert.That('A').IsNotPunctuation();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"file-system-assertions",children:"File System Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"directoryinfo",children:"DirectoryInfo"}),"\n",(0,t.jsx)(s.h4,{id:"exists--doesnotexist",children:"Exists / DoesNotExist"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Directory_Exists()\n{\n    var tempDir = new DirectoryInfo(Path.GetTempPath());\n\n    await Assert.That(tempDir).Exists();\n}\n\n[Test]\npublic async Task Directory_Does_Not_Exist()\n{\n    var nonExistent = new DirectoryInfo(@"C:\\NonExistentFolder");\n\n    await Assert.That(nonExistent).DoesNotExist();\n}\n'})}),"\n",(0,t.jsx)(s.h4,{id:"hasfiles--isempty",children:"HasFiles / IsEmpty"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Directory_Has_Files()\n{\n    var tempDir = new DirectoryInfo(Path.GetTempPath());\n\n    // Likely has files\n    await Assert.That(tempDir).HasFiles();\n}\n\n[Test]\npublic async Task Directory_Is_Empty()\n{\n    var emptyDir = Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString()));\n\n    await Assert.That(emptyDir).IsEmpty();\n\n    // Cleanup\n    emptyDir.Delete();\n}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"hassubdirectories--hasnosubdirectories",children:"HasSubdirectories / HasNoSubdirectories"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Directory_Has_Subdirectories()\n{\n    var windowsDir = new DirectoryInfo(@"C:\\Windows");\n\n    await Assert.That(windowsDir).HasSubdirectories();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"fileinfo",children:"FileInfo"}),"\n",(0,t.jsx)(s.h4,{id:"exists--doesnotexist-1",children:"Exists / DoesNotExist"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task File_Exists()\n{\n    var tempFile = Path.GetTempFileName();\n    var fileInfo = new FileInfo(tempFile);\n\n    await Assert.That(fileInfo).Exists();\n\n    // Cleanup\n    File.Delete(tempFile);\n}\n\n[Test]\npublic async Task File_Does_Not_Exist()\n{\n    var nonExistent = new FileInfo(@"C:\\nonexistent.txt");\n\n    await Assert.That(nonExistent).DoesNotExist();\n}\n'})}),"\n",(0,t.jsx)(s.h4,{id:"isreadonly--isnotreadonly",children:"IsReadOnly / IsNotReadOnly"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task File_Is_ReadOnly()\n{\n    var tempFile = Path.GetTempFileName();\n    var fileInfo = new FileInfo(tempFile);\n\n    fileInfo.IsReadOnly = true;\n    await Assert.That(fileInfo).IsReadOnly();\n\n    fileInfo.IsReadOnly = false;\n    await Assert.That(fileInfo).IsNotReadOnly();\n\n    // Cleanup\n    File.Delete(tempFile);\n}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"ishidden--isnothidden",children:"IsHidden / IsNotHidden"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task File_Is_Hidden()\n{\n    var tempFile = Path.GetTempFileName();\n    var fileInfo = new FileInfo(tempFile);\n\n    fileInfo.Attributes |= FileAttributes.Hidden;\n    await Assert.That(fileInfo).IsHidden();\n\n    // Cleanup\n    fileInfo.Attributes &= ~FileAttributes.Hidden;\n    File.Delete(tempFile);\n}\n"})}),"\n",(0,t.jsx)(s.h4,{id:"issystem--isnotsystem",children:"IsSystem / IsNotSystem"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task File_Is_System()\n{\n    // System files are typically in System32\n    var systemFile = new FileInfo(@"C:\\Windows\\System32\\kernel32.dll");\n\n    if (systemFile.Exists)\n    {\n        await Assert.That(systemFile).IsSystem();\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h4,{id:"isexecutable--isnotexecutable",children:"IsExecutable / IsNotExecutable"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task File_Is_Executable()\n{\n    var exeFile = new FileInfo(@"C:\\Windows\\notepad.exe");\n\n    if (exeFile.Exists)\n    {\n        await Assert.That(exeFile).IsExecutable();\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"ip-address-assertions",children:"IP Address Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isipv4--isnotipv4",children:"IsIPv4 / IsNotIPv4"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task IP_Is_IPv4()\n{\n    var ipv4 = IPAddress.Parse("192.168.1.1");\n\n    await Assert.That(ipv4).IsIPv4();\n}\n\n[Test]\npublic async Task IP_Not_IPv4()\n{\n    var ipv6 = IPAddress.Parse("::1");\n\n    await Assert.That(ipv6).IsNotIPv4();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"isipv6--isnotipv6",children:"IsIPv6 / IsNotIPv6"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task IP_Is_IPv6()\n{\n    var ipv6 = IPAddress.Parse("2001:0db8:85a3:0000:0000:8a2e:0370:7334");\n\n    await Assert.That(ipv6).IsIPv6();\n}\n\n[Test]\npublic async Task IP_Not_IPv6()\n{\n    var ipv4 = IPAddress.Parse("127.0.0.1");\n\n    await Assert.That(ipv4).IsNotIPv6();\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"lazyt-assertions",children:"Lazy<T> Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isvaluecreated--isnotvaluecreated",children:"IsValueCreated / IsNotValueCreated"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Lazy_Value_Not_Created()\n{\n    var lazy = new Lazy<int>(() => 42);\n\n    await Assert.That(lazy).IsNotValueCreated();\n\n    var value = lazy.Value;\n\n    await Assert.That(lazy).IsValueCreated();\n    await Assert.That(value).IsEqualTo(42);\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"stream-assertions",children:"Stream Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"canread--cannotread",children:"CanRead / CannotRead"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Stream_Can_Read()\n{\n    using var stream = new MemoryStream();\n\n    await Assert.That(stream).CanRead();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"canwrite--cannotwrite",children:"CanWrite / CannotWrite"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Stream_Can_Write()\n{\n    using var stream = new MemoryStream();\n\n    await Assert.That(stream).CanWrite();\n}\n\n[Test]\npublic async Task Stream_Cannot_Write()\n{\n    var readOnlyStream = new MemoryStream(new byte[10], writable: false);\n\n    await Assert.That(readOnlyStream).CannotWrite();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"canseek--cannotseek",children:"CanSeek / CannotSeek"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Stream_Can_Seek()\n{\n    using var stream = new MemoryStream();\n\n    await Assert.That(stream).CanSeek();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"cantimeout--cannottimeout",children:"CanTimeout / CannotTimeout"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Network_Stream_Can_Timeout()\n{\n    using var client = new TcpClient();\n    // Note: stream only available after connection\n    // await Assert.That(stream).CanTimeout();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"process-assertions",children:"Process Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"hasexited--hasnotexited",children:"HasExited / HasNotExited"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Process_Has_Not_Exited()\n{\n    var process = Process.Start("notepad.exe");\n\n    await Assert.That(process).HasNotExited();\n\n    process.Kill();\n    process.WaitForExit();\n\n    await Assert.That(process).HasExited();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"isresponding--isnotresponding",children:"IsResponding / IsNotResponding"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Process_Is_Responding()\n{\n    var process = Process.GetCurrentProcess();\n\n    await Assert.That(process).IsResponding();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"thread-assertions",children:"Thread Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isalive--isnotalive",children:"IsAlive / IsNotAlive"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Thread_Is_Alive()\n{\n    var thread = new Thread(() => Thread.Sleep(1000));\n    thread.Start();\n\n    await Assert.That(thread).IsAlive();\n\n    thread.Join();\n    await Assert.That(thread).IsNotAlive();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isbackground--isnotbackground",children:"IsBackground / IsNotBackground"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Thread_Is_Background()\n{\n    var thread = new Thread(() => { });\n    thread.IsBackground = true;\n\n    await Assert.That(thread).IsBackground();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isthreadpoolthread--isnotthreadpoolthread",children:"IsThreadPoolThread / IsNotThreadPoolThread"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Check_ThreadPool_Thread()\n{\n    var currentThread = Thread.CurrentThread;\n\n    // Test thread is typically not a thread pool thread\n    await Assert.That(currentThread).IsNotThreadPoolThread();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"weakreference-assertions",children:"WeakReference Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isalive--isnotalive-1",children:"IsAlive / IsNotAlive"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task WeakReference_Is_Alive()\n{\n    var obj = new object();\n    var weakRef = new WeakReference(obj);\n\n    await Assert.That(weakRef).IsAlive();\n\n    obj = null!;\n    GC.Collect();\n    GC.WaitForPendingFinalizers();\n\n    await Assert.That(weakRef).IsNotAlive();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"uri-assertions",children:"URI Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isabsoluteuri--isnotabsoluteuri",children:"IsAbsoluteUri / IsNotAbsoluteUri"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task URI_Is_Absolute()\n{\n    var absolute = new Uri("https://example.com/path");\n\n    await Assert.That(absolute).IsAbsoluteUri();\n}\n\n[Test]\npublic async Task URI_Is_Relative()\n{\n    var relative = new Uri("/path/to/resource", UriKind.Relative);\n\n    await Assert.That(relative).IsNotAbsoluteUri();\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"encoding-assertions",children:"Encoding Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isutf8--isnotutf8",children:"IsUtf8 / IsNotUtf8"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Encoding_Is_UTF8()\n{\n    var encoding = Encoding.UTF8;\n\n    await Assert.That(encoding).IsUtf8();\n}\n\n[Test]\npublic async Task Encoding_Not_UTF8()\n{\n    var encoding = Encoding.ASCII;\n\n    await Assert.That(encoding).IsNotUtf8();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"version-assertions",children:"Version Assertions"}),"\n",(0,t.jsx)(s.p,{children:"Version comparisons using standard comparison operators:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Version_Comparison()\n{\n    var v1 = new Version(1, 0, 0);\n    var v2 = new Version(2, 0, 0);\n\n    await Assert.That(v2).IsGreaterThan(v1);\n    await Assert.That(v1).IsLessThan(v2);\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"dayofweek-assertions",children:"DayOfWeek Assertions"}),"\n",(0,t.jsx)(s.h3,{id:"isweekend--isnotweekend",children:"IsWeekend / IsNotWeekend"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Day_Is_Weekend()\n{\n    await Assert.That(DayOfWeek.Saturday).IsWeekend();\n    await Assert.That(DayOfWeek.Sunday).IsWeekend();\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isweekday--isnotweekday",children:"IsWeekday / IsNotWeekday"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:"[Test]\npublic async Task Day_Is_Weekday()\n{\n    await Assert.That(DayOfWeek.Monday).IsWeekday();\n    await Assert.That(DayOfWeek.Tuesday).IsWeekday();\n    await Assert.That(DayOfWeek.Wednesday).IsWeekday();\n    await Assert.That(DayOfWeek.Thursday).IsWeekday();\n    await Assert.That(DayOfWeek.Friday).IsWeekday();\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(s.h3,{id:"api-testing",children:"API Testing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task API_Returns_Success()\n{\n    var response = await _client.GetAsync("/api/health");\n\n    await Assert.That(response.StatusCode).IsSuccess();\n    await Assert.That(response.StatusCode).IsNotEqualTo(HttpStatusCode.InternalServerError);\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"file-upload-validation",children:"File Upload Validation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Uploaded_File_Validation()\n{\n    var uploadedFile = new FileInfo("upload.txt");\n\n    await Assert.That(uploadedFile).Exists();\n    await Assert.That(uploadedFile).IsNotReadOnly();\n    await Assert.That(uploadedFile.Length).IsGreaterThan(0);\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"configuration-directory-check",children:"Configuration Directory Check"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Config_Directory_Setup()\n{\n    var configDir = new DirectoryInfo(@"C:\\ProgramData\\MyApp");\n\n    await Assert.That(configDir).Exists();\n    await Assert.That(configDir).HasFiles();\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"network-validation",children:"Network Validation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-csharp",children:'[Test]\npublic async Task Server_IP_Is_Valid()\n{\n    var serverIp = IPAddress.Parse(Configuration["ServerIP"]);\n\n    await Assert.That(serverIp).IsIPv4();\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/boolean",children:"Boolean"})," - For boolean properties of specialized types"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/string",children:"String"})," - For string conversions and properties"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/collections",children:"Collections"})," - For collections of specialized types"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/assertions/types",children:"Types"})," - For type checking specialized types"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var a=n(6540);const t={},i=a.createContext(t);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);