"use strict";(self.webpackChunktunit_docs_site=self.webpackChunktunit_docs_site||[]).push([[8528],{8034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"assertions/extensibility/extensibility-returning-items-from-await","title":"Returning Data via await","description":"Sometimes, you may want your assertion to return a value, such as an item found in a collection, so you can use it in further assertions or logic.","source":"@site/docs/assertions/extensibility/extensibility-returning-items-from-await.md","sourceDirName":"assertions/extensibility","slug":"/assertions/extensibility/extensibility-returning-items-from-await","permalink":"/docs/assertions/extensibility/extensibility-returning-items-from-await","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Chaining and Converting","permalink":"/docs/assertions/extensibility/extensibility-chaining-and-converting"},"next":{"title":"Test Set Ups","permalink":"/docs/test-lifecycle/setup"}}');var s=t(4848),r=t(8453);const o={},a="Returning Data via await",l={},c=[{value:"How to Return Values from Assertions",id:"how-to-return-values-from-assertions",level:2},{value:"Example: Contains with Predicate",id:"example-contains-with-predicate",level:3},{value:"How It Works",id:"how-it-works",level:3},{value:"Extension Method",id:"extension-method",level:3},{value:"Usage",id:"usage",level:3},{value:"Built-in Examples",id:"built-in-examples",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"returning-data-via-await",children:["Returning Data via ",(0,s.jsx)(n.code,{children:"await"})]})}),"\n",(0,s.jsx)(n.p,{children:"Sometimes, you may want your assertion to return a value, such as an item found in a collection, so you can use it in further assertions or logic.\nTUnit supports this by allowing your assertion to return a value when awaited."}),"\n",(0,s.jsx)(n.p,{children:"This is useful for scenarios where you want to extract a value from an assertion and use it in subsequent test logic, reducing the need for manual extraction or casting."}),"\n",(0,s.jsxs)(n.p,{children:["For example, ",(0,s.jsx)(n.code,{children:"await Assert.That(collection).Contains(item => item.Price < 0.99)"})," can return the first item that meets the criteria."]}),"\n",(0,s.jsx)(n.h2,{id:"how-to-return-values-from-assertions",children:"How to Return Values from Assertions"}),"\n",(0,s.jsxs)(n.p,{children:["The key to returning values is to make your assertion class extend ",(0,s.jsx)(n.code,{children:"Assertion<TReturn>"})," where ",(0,s.jsx)(n.code,{children:"TReturn"})," is the type you want to return when awaited. The value is returned by transforming the input using ",(0,s.jsx)(n.code,{children:"context.Map<TReturn>(...)"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"example-contains-with-predicate",children:"Example: Contains with Predicate"}),"\n",(0,s.jsxs)(n.p,{children:["Let's say we want to create a ",(0,s.jsx)(n.code,{children:"Contains"})," assertion that returns the found item:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class CollectionContainsPredicateAssertion<TCollection, TItem> : Assertion<TItem>\n    where TCollection : IEnumerable<TItem>\n{\n    private readonly Func<TItem, bool> _predicate;\n\n    public CollectionContainsPredicateAssertion(\n        AssertionContext<TCollection> context,\n        Func<TItem, bool> predicate)\n        : base(context.Map<TItem>(collection =>\n        {\n            if (collection == null)\n            {\n                throw new ArgumentNullException(nameof(collection), "collection was null");\n            }\n\n            foreach (var item in collection)\n            {\n                if (predicate(item))\n                {\n                    // Return the found item - this becomes the value when awaited\n                    return item;\n                }\n            }\n\n            // Throw an exception if not found - this will be captured as a failure\n            throw new InvalidOperationException("no item matching predicate found in collection");\n        }))\n    {\n        _predicate = predicate;\n    }\n\n    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<TItem> metadata)\n    {\n        // The transformation already happened in the Map function\n        // If we got here without exception, the item was found\n        if (metadata.Exception != null)\n        {\n            return Task.FromResult(AssertionResult.Failed(metadata.Exception.Message));\n        }\n\n        return Task.FromResult(AssertionResult.Passed);\n    }\n\n    protected override string GetExpectation() => "to contain item matching predicate";\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Extend ",(0,s.jsx)(n.code,{children:"Assertion<TReturn>"})]}),": Your assertion class extends ",(0,s.jsx)(n.code,{children:"Assertion<TItem>"})," where ",(0,s.jsx)(n.code,{children:"TItem"})," is what you want to return"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Use ",(0,s.jsx)(n.code,{children:"context.Map<TReturn>(...)"})]}),": In the constructor, call ",(0,s.jsx)(n.code,{children:"context.Map<TReturn>(...)"})," to transform the input value"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Return the value"}),": Inside the Map function, return the value you want to make available when the assertion is awaited"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Throw on failure"}),": If you can't find/produce the value, throw an exception - this will be captured as an assertion failure"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"extension-method",children:"Extension Method"}),"\n",(0,s.jsx)(n.p,{children:"The extension method is straightforward - just return your assertion class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public static class CollectionAssertionExtensions\n{\n    public static CollectionContainsPredicateAssertion<TCollection, TItem> Contains<TCollection, TItem>(\n        this IAssertionSource<TCollection> source,\n        Func<TItem, bool> predicate,\n        [CallerArgumentExpression(nameof(predicate))] string? expression = null)\n        where TCollection : IEnumerable<TItem>\n    {\n        source.Context.ExpressionBuilder.Append($".Contains({expression})");\n        return new CollectionContainsPredicateAssertion<TCollection, TItem>(source.Context, predicate);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"You can now use the assertion and get the found item:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'// Returns the first item with price < 0.99\nProduct cheapProduct = await Assert.That(products).Contains(p => p.Price < 0.99);\n\n// Use the returned value in further assertions\nawait Assert.That(cheapProduct.Name).IsNotNull();\nawait Assert.That(cheapProduct.Category).IsEqualTo("Bargain");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"built-in-examples",children:"Built-in Examples"}),"\n",(0,s.jsx)(n.p,{children:"TUnit includes several built-in examples of assertions that return values:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Contains(predicate)"})," - Returns the first item matching the predicate"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"WhenParsedInto<T>()"})," - Returns the parsed value (e.g., ",(0,s.jsx)(n.code,{children:'int value = await Assert.That("123").WhenParsedInto<int>()'}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IsTypeOf<T>()"})," - Returns the casted value (e.g., ",(0,s.jsx)(n.code,{children:"StringBuilder sb = await Assert.That(obj).IsTypeOf<StringBuilder>()"}),")"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);