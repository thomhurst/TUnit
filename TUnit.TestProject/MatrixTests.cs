using OneOf;

namespace TUnit.TestProject;

public class MatrixTests
{
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_One(
        [Matrix("A", "B", "C", "D")] string str, 
        [Matrix(1, 2, 3)] int i, 
        [Matrix(true, false)] bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_Two(
        [Matrix(1, 2)] int i, 
        [Matrix(1, 2, 3)] int i2, 
        [Matrix(1, 2, 3, 4)] int i3, 
        [Matrix(true, false)] bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_Enum(
        [Matrix(1, 2)] int i, 
        [Matrix(-1, TestEnum.One)] TestEnum testEnum)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task AutoGenerateBools(
        [Matrix("A", "B", "C")] string str, 
        bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task AutoGenerateBools2(
        [Matrix("A", "B", "C")] string str, 
        [Matrix] bool boolean)
    {
        await Task.CompletedTask;
    }

    [Test]
    [MatrixDataSource]
    public async Task ImplicitConversion(
        [Matrix(TestEnum.One, TestEnum2.Two)] OneOf<TestEnum, TestEnum2> @enum,
        [Matrix] bool boolean)
    {
        await Task.CompletedTask;
    }
    
        [Test]
        [MatrixDataSource]
        public async Task ExcludingAutoGeneratedMatrixValues(
            [Matrix<CountToTenEnum>(Excluding = [CountToTenEnum.Three, CountToTenEnum.Seven])] CountToTenEnum @enum,
            [Matrix] bool boolean)
        {
            await Task.CompletedTask;
        }

#if NET7_0_OR_GREATER
        [Test]
        [MatrixDataSource]
        public async Task Range(
            [MatrixRange<int>(-50, 50)] int item)
        {
            await Task.CompletedTask;
        }
#endif

    [Test]
    [MatrixDataSource]
    public async Task Method1(
        [MatrixMethod<MatrixTests>(nameof(EnumerableMethod))] int item)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task Method2(
        [MatrixMethod<MatrixTests>(nameof(ArrayMethod))] int item)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task Method3(
        [MatrixMethod<MatrixTests>(nameof(IntMethod))] int item)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task Method4(
        [MatrixMethod<MatrixTests>(nameof(ObjectMethod))] int item)
    {
        await Task.CompletedTask;
    }

    public enum CountToTenEnum
    {
        One,
        Two,
        Three,
        Four,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        Ten
    }

    public static IEnumerable<int> EnumerableMethod()
    {
        yield return 1;
        yield return 2;
        yield return 3;
    }
    
    public static object?[] ArrayMethod()
    {
        return [1, 2, 3];
    }
    
    public static int IntMethod()
    {
        return 1;
    }
    
    public static object ObjectMethod()
    {
        return 1;
    }
}