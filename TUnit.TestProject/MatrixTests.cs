using Humanizer;
using OneOf;

namespace TUnit.TestProject;

public class MatrixTests
{
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_One(
        [Matrix("A", "B", "C", "D")] string str, 
        [Matrix(1, 2, 3)] int i, 
        [Matrix(true, false)] bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_Two(
        [Matrix(1, 2)] int i, 
        [Matrix(1, 2, 3)] int i2, 
        [Matrix(1, 2, 3, 4)] int i3, 
        [Matrix(true, false)] bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task MatrixTest_Enum(
        [Matrix(1, 2)] int i, 
        [Matrix(-1, TestEnum.One)] TestEnum testEnum)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task AutoGenerateBools(
        [Matrix("A", "B", "C")] string str, 
        bool boolean)
    {
        await Task.CompletedTask;
    }
    
    [Test]
    [MatrixDataSource]
    public async Task AutoGenerateBools2(
        [Matrix("A", "B", "C")] string str, 
        [Matrix] bool boolean)
    {
        await Task.CompletedTask;
    }

    [Test]
    [MatrixDataSource]
    public async Task ImplicitConversion(
        [Matrix(TestEnum.One, TestEnum2.Two)] OneOf<TestEnum, TestEnum2> @enum,
        [Matrix] bool boolean)
    {
        await Task.CompletedTask;
    }
    
        [Test]
        [MatrixDataSource]
        public async Task ExcludingAutoGeneratedMatrixValues(
            [Matrix<CountToTenEnum>(Excluding = [CountToTenEnum.Three, CountToTenEnum.Seven])] CountToTenEnum @enum,
            [Matrix] bool boolean)
        {
            await Task.CompletedTask;
        }

        public enum CountToTenEnum
        {
            One,
            Two,
            Three,
            Four,
            Five,
            Six,
            Seven,
            Eight,
            Nine,
            Ten
        }
}