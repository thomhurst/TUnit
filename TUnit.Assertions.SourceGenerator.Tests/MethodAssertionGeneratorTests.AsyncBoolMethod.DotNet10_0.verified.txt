[  
// This file is generated to verify the MethodAssertionGenerator is running.
// If you see this file, the generator executed successfully.
namespace TUnit.Assertions.Diagnostics
{
    internal static class MethodAssertionGeneratorDiagnostic
    {
        public const string Message = "MethodAssertionGenerator is running";
    }
}

  
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.Core;

namespace TUnit.Assertions.Tests.TestData;

/// <summary>
/// Generated assertion for IsPositiveAsync
/// </summary>
public sealed class IsPositiveAsync_Assertion : Assertion<int>
{
    public IsPositiveAsync_Assertion(AssertionContext<int> context)
        : base(context)
    {
    }

    protected override async Task<AssertionResult> CheckAsync(EvaluationMetadata<int> metadata)
    {
        var value = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return AssertionResult.Failed($"threw {exception.GetType().FullName}");
        }

        var result = await value.IsPositiveAsync();
        return result
            ? AssertionResult.Passed
            : AssertionResult.Failed($"found {value}");
    }

    protected override string GetExpectation()
    {
        return "to satisfy IsPositiveAsync";
    }
}

/// <summary>
/// Generated assertion for IsGreaterThanAsync
/// </summary>
public sealed class IsGreaterThanAsync_Int_Assertion : Assertion<int>
{
    private readonly int _threshold;

    public IsGreaterThanAsync_Int_Assertion(AssertionContext<int> context, int threshold)
        : base(context)
    {
        _threshold = threshold;
    }

    protected override async Task<AssertionResult> CheckAsync(EvaluationMetadata<int> metadata)
    {
        var value = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return AssertionResult.Failed($"threw {exception.GetType().FullName}");
        }

        var result = await value.IsGreaterThanAsync(_threshold);
        return result
            ? AssertionResult.Passed
            : AssertionResult.Failed($"found {value}");
    }

    protected override string GetExpectation()
    {
        return $"to satisfy IsGreaterThanAsync({_threshold})";
    }
}

public static partial class AsyncBoolAssertionExtensions_GeneratedAssertionExtensions
{
    /// <summary>
    /// Generated extension method for IsPositiveAsync
    /// </summary>
    public static IsPositiveAsync_Assertion IsPositiveAsync(this IAssertionSource<int> source)
    {
        source.Context.ExpressionBuilder.Append(".IsPositiveAsync()");
        return new IsPositiveAsync_Assertion(source.Context);
    }

    /// <summary>
    /// Generated extension method for IsGreaterThanAsync
    /// </summary>
    public static IsGreaterThanAsync_Int_Assertion IsGreaterThanAsync(this IAssertionSource<int> source, int threshold, [CallerArgumentExpression(nameof(threshold))] string? thresholdExpression = null)
    {
        source.Context.ExpressionBuilder.Append($".IsGreaterThanAsync({thresholdExpression})");
        return new IsGreaterThanAsync_Int_Assertion(source.Context, threshold);
    }

}

]