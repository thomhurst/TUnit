#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.AssertConditions;
using TUnit.Assertions.AssertConditions.Interfaces;
using TUnit.Assertions.AssertionBuilders;
using TUnit.Assertions.Extensions;

namespace TestNamespace;

public class EnumIsDefinedWithTypeAnd1MoreAssertCondition<T> : BaseAssertCondition<T>
    where T : Enum
{
    private readonly bool _negated;

    public EnumIsDefinedWithTypeAnd1MoreAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(T? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = System.Enum.IsDefined(typeof(T), actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsDefined");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsDefined";
    }
}

public static partial class EnumAssertions
{
    public static InvokableValueAssertionBuilder<T> IsDefined<T>(this IValueSource<T> valueSource)
        where T : Enum
    {
        return valueSource.RegisterAssertion(
            new EnumIsDefinedWithTypeAnd1MoreAssertCondition<T>(false),
            []);
    }

    public static InvokableValueAssertionBuilder<T> IsNotDefined<T>(this IValueSource<T> valueSource)
        where T : Enum
    {
        return valueSource.RegisterAssertion(
            new EnumIsDefinedWithTypeAnd1MoreAssertCondition<T>(true),
            []);
    }

}
