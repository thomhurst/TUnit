#nullable disable

using System;
using System.Threading.Tasks;
using TUnit.Assertions.AssertConditions;
using TUnit.Assertions.AssertConditions.Interfaces;
using TUnit.Assertions.AssertionBuilders;

namespace TestNamespace;

public class EnumIsDefinedWith2ParametersAssertCondition : BaseAssertCondition<System.Enum> where System.Enum : Enum
{
    private readonly bool _negated;

    public EnumIsDefinedWith2ParametersAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Enum? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = System.Enum.IsDefined(typeof(System.Enum), actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsDefined");
    }

    protected override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsDefined";
    }
}

public static partial class EnumAssertions
{
    public static InvokableValueAssertionBuilder<System.Enum> IsDefined(this IValueSource<System.Enum> valueSource)
    {
        return valueSource.RegisterAssertion(
            new EnumIsDefinedWith2ParametersAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Enum> IsNotDefined(this IValueSource<System.Enum> valueSource)
    {
        return valueSource.RegisterAssertion(
            new EnumIsDefinedWith2ParametersAssertCondition(true),
            []);
    }

}
