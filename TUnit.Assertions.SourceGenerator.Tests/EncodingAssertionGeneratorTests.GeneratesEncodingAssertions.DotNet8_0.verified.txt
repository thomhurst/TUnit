[  
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.Core;
using TUnit.Assertions.Conditions;

namespace TUnit.Assertions.Extensions;

public class EncodingIsSingleByteAssertion : Assertion<System.Text.Encoding>
{
    private readonly bool _negated;

    public EncodingIsSingleByteAssertion(AssertionContext<System.Text.Encoding> context, bool negated = false)
        : base(context)
    {
        _negated = negated;
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<System.Text.Encoding> metadata)
    {
        var actualValue = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (actualValue is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = actualValue.IsSingleByte;
        var condition = _negated ? result : !result;
        return Task.FromResult(AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsSingleByte"));
    }

    protected override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")} be single-byte encoding";
    }
}

public static partial class EncodingAssertionExtensions
{
    public static EncodingIsSingleByteAssertion IsSingleByte(this IAssertionSource<System.Text.Encoding> source)
    {
        source.Context.ExpressionBuilder.Append(".IsSingleByte()");
        return new EncodingIsSingleByteAssertion(source.Context, false);
    }

    public static EncodingIsSingleByteAssertion IsNotSingleByte(this IAssertionSource<System.Text.Encoding> source)
    {
        source.Context.ExpressionBuilder.Append(".IsNotSingleByte()");
        return new EncodingIsSingleByteAssertion(source.Context, true);
    }

}

]