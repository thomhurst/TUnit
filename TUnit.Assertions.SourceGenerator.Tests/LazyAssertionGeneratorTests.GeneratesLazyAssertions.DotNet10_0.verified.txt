[  
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.Core;
using TUnit.Assertions.Conditions;

namespace TUnit.Assertions.Extensions;

/// <summary>
/// Generated assertion for IsValueCreated
/// </summary>
[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2091", Justification = "Generic type parameter is only used for property access, not instantiation")]
public sealed class LazyT_IsValueCreated_Assertion<T> : Assertion<System.Lazy<T>>
{
    public LazyT_IsValueCreated_Assertion(AssertionContext<System.Lazy<T>> context)
        : base(context)
    {
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<System.Lazy<T>> metadata)
    {
        var value = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (value is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = value.IsValueCreated<T>();
        return Task.FromResult(result
            ? AssertionResult.Passed
            : AssertionResult.Failed($"found {value}"));
    }

    protected override string GetExpectation()
    {
        return "to have its value created";
    }
}

/// <summary>
/// Generated assertion for IsValueNotCreated
/// </summary>
[System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2091", Justification = "Generic type parameter is only used for property access, not instantiation")]
public sealed class LazyT_IsValueNotCreated_Assertion<T> : Assertion<System.Lazy<T>>
{
    public LazyT_IsValueNotCreated_Assertion(AssertionContext<System.Lazy<T>> context)
        : base(context)
    {
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<System.Lazy<T>> metadata)
    {
        var value = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (value is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = value.IsValueNotCreated<T>();
        return Task.FromResult(result
            ? AssertionResult.Passed
            : AssertionResult.Failed($"found {value}"));
    }

    protected override string GetExpectation()
    {
        return "to not have its value created";
    }
}

public static partial class LazyAssertionExtensions
{
    /// <summary>
    /// Generated extension method for IsValueCreated
    /// </summary>
    [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2091", Justification = "Generic type parameter is only used for property access, not instantiation")]
    public static LazyT_IsValueCreated_Assertion<T> IsValueCreated<T>(this IAssertionSource<System.Lazy<T>> source)
    {
        source.Context.ExpressionBuilder.Append(".IsValueCreated()");
        return new LazyT_IsValueCreated_Assertion<T>(source.Context);
    }

    /// <summary>
    /// Generated extension method for IsValueNotCreated
    /// </summary>
    [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessage("Trimming", "IL2091", Justification = "Generic type parameter is only used for property access, not instantiation")]
    public static LazyT_IsValueNotCreated_Assertion<T> IsValueNotCreated<T>(this IAssertionSource<System.Lazy<T>> source)
    {
        source.Context.ExpressionBuilder.Append(".IsValueNotCreated()");
        return new LazyT_IsValueNotCreated_Assertion<T>(source.Context);
    }

}

]