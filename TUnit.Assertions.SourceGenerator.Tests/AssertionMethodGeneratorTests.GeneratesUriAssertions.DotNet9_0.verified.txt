[  
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.AssertConditions;
using TUnit.Assertions.AssertConditions.Interfaces;
using TUnit.Assertions.AssertionBuilders;
using TUnit.Assertions.Extensions;

namespace TUnit.Assertions.Extensions;

public class UriIsAbsoluteUriAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsAbsoluteUriAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsAbsoluteUri;
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsAbsoluteUri");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsAbsoluteUri";
    }
}

public class UriIsDefaultPortAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsDefaultPortAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsDefaultPort;
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsDefaultPort");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsDefaultPort";
    }
}

public class UriIsFileAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsFileAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsFile;
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsFile");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsFile";
    }
}

public class UriIsLoopbackAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsLoopbackAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsLoopback;
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsLoopback");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsLoopback";
    }
}

public class UriIsUncAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsUncAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsUnc;
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsUnc");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsUnc";
    }
}

public class UriIsBaseOfWithUriAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly System.Uri _uri;
    private readonly bool _negated;

    public UriIsBaseOfWithUriAssertCondition(System.Uri uri, bool negated = false)
    {
        _uri = uri;
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsBaseOf(_uri);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsBaseOf({_uri})");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsBaseOf({_uri})";
    }
}

public class UriIsWellFormedOriginalStringAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriIsWellFormedOriginalStringAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = actualValue.IsWellFormedOriginalString();
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsWellFormedOriginalString");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsWellFormedOriginalString";
    }
}

public class StringUriIsWellFormedUriStringWithStringAnd1MoreAssertCondition : BaseAssertCondition<string>
{
    private readonly System.UriKind _uriKind;
    private readonly bool _negated;

    public StringUriIsWellFormedUriStringWithStringAnd1MoreAssertCondition(System.UriKind uriKind, bool negated = false)
    {
        _uriKind = uriKind;
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(string? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = System.Uri.IsWellFormedUriString(actualValue, _uriKind);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsWellFormedUriString({_uriKind})");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsWellFormedUriString({_uriKind})";
    }
}

public class CharUriIsHexDigitWithCharAssertCondition : BaseAssertCondition<char>
{
    private readonly bool _negated;

    public CharUriIsHexDigitWithCharAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(char actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        var result = System.Uri.IsHexDigit(actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsHexDigit");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsHexDigit";
    }
}

public class StringUriIsHexEncodingWithStringAnd1MoreAssertCondition : BaseAssertCondition<string>
{
    private readonly int _index;
    private readonly bool _negated;

    public StringUriIsHexEncodingWithStringAnd1MoreAssertCondition(int index, bool negated = false)
    {
        _index = index;
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(string? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = System.Uri.IsHexEncoding(actualValue, _index);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsHexEncoding({_index})");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsHexEncoding({_index})";
    }
}

public class UriUriAssertionExtensionsIsHttpsWithUriAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriUriAssertionExtensionsIsHttpsWithUriAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = TUnit.Assertions.Extensions.UriAssertionExtensions.IsHttps(actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsHttps");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsHttps";
    }
}

public class UriUriAssertionExtensionsIsHttpWithUriAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriUriAssertionExtensionsIsHttpWithUriAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = TUnit.Assertions.Extensions.UriAssertionExtensions.IsHttp(actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsHttp");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsHttp";
    }
}

public class UriUriAssertionExtensionsIsHttpOrHttpsWithUriAssertCondition : BaseAssertCondition<System.Uri>
{
    private readonly bool _negated;

    public UriUriAssertionExtensionsIsHttpOrHttpsWithUriAssertCondition(bool negated = false)
    {
        _negated = negated;
    }

    protected override ValueTask<AssertionResult> GetResult(System.Uri? actualValue, Exception? exception, AssertionMetadata assertionMetadata)
    {
        if (actualValue is null)
        {
            return AssertionResult.Fail("Actual value is null");
        }

        var result = TUnit.Assertions.Extensions.UriAssertionExtensions.IsHttpOrHttps(actualValue);
        var condition = _negated ? result : !result;
        return AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsHttpOrHttps");
    }

    protected internal override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")}to satisfy IsHttpOrHttps";
    }
}

public static partial class UriAssertionExtensions
{
    public static InvokableValueAssertionBuilder<System.Uri> IsAbsoluteUri(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsAbsoluteUriAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotAbsoluteUri(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsAbsoluteUriAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsDefaultPort(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsDefaultPortAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotDefaultPort(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsDefaultPortAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsFile(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsFileAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotFile(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsFileAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsLoopback(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsLoopbackAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotLoopback(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsLoopbackAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsUnc(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsUncAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotUnc(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsUncAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsBaseOf(this IValueSource<System.Uri> valueSource, System.Uri uri, [CallerArgumentExpression(nameof(uri))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new UriIsBaseOfWithUriAssertCondition(uri, false),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotBaseOf(this IValueSource<System.Uri> valueSource, System.Uri uri, [CallerArgumentExpression(nameof(uri))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new UriIsBaseOfWithUriAssertCondition(uri, true),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsWellFormedOriginalString(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsWellFormedOriginalStringAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotWellFormedOriginalString(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriIsWellFormedOriginalStringAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<string> IsWellFormedUriString(this IValueSource<string> valueSource, System.UriKind uriKind, [CallerArgumentExpression(nameof(uriKind))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new StringUriIsWellFormedUriStringWithStringAnd1MoreAssertCondition(uriKind, false),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<string> IsNotWellFormedUriString(this IValueSource<string> valueSource, System.UriKind uriKind, [CallerArgumentExpression(nameof(uriKind))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new StringUriIsWellFormedUriStringWithStringAnd1MoreAssertCondition(uriKind, true),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<char> IsHexDigit(this IValueSource<char> valueSource)
    {
        return valueSource.RegisterAssertion(
            new CharUriIsHexDigitWithCharAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<char> IsNotHexDigit(this IValueSource<char> valueSource)
    {
        return valueSource.RegisterAssertion(
            new CharUriIsHexDigitWithCharAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<string> IsHexEncoding(this IValueSource<string> valueSource, int index, [CallerArgumentExpression(nameof(index))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new StringUriIsHexEncodingWithStringAnd1MoreAssertCondition(index, false),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<string> IsNotHexEncoding(this IValueSource<string> valueSource, int index, [CallerArgumentExpression(nameof(index))] string? doNotPopulateThisValue1 = null)
    {
        return valueSource.RegisterAssertion(
            new StringUriIsHexEncodingWithStringAnd1MoreAssertCondition(index, true),
            [doNotPopulateThisValue1]);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsHttps(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpsWithUriAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotHttps(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpsWithUriAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsHttp(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpWithUriAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotHttp(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpWithUriAssertCondition(true),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsHttpOrHttps(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpOrHttpsWithUriAssertCondition(false),
            []);
    }

    public static InvokableValueAssertionBuilder<System.Uri> IsNotHttpOrHttps(this IValueSource<System.Uri> valueSource)
    {
        return valueSource.RegisterAssertion(
            new UriUriAssertionExtensionsIsHttpOrHttpsWithUriAssertCondition(true),
            []);
    }

}

]