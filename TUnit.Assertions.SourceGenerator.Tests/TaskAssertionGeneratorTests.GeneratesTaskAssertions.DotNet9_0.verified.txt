[  
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using TUnit.Assertions.Core;
using TUnit.Assertions.Conditions;

namespace TUnit.Assertions.Extensions;

public class TaskIsCompletedAssertion<TTask> : Assertion<TTask>
    where TTask : System.Threading.Tasks.Task
{
    private readonly bool _negated;

    public TaskIsCompletedAssertion(AssertionContext<TTask> context, bool negated = false)
        : base(context)
    {
        _negated = negated;
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<TTask> metadata)
    {
        var actualValue = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (actualValue is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = actualValue.IsCompleted;
        var condition = _negated ? result : !result;
        return Task.FromResult(AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsCompleted"));
    }

    protected override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")} be completed";
    }
}

public class TaskIsCanceledAssertion<TTask> : Assertion<TTask>
    where TTask : System.Threading.Tasks.Task
{
    private readonly bool _negated;

    public TaskIsCanceledAssertion(AssertionContext<TTask> context, bool negated = false)
        : base(context)
    {
        _negated = negated;
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<TTask> metadata)
    {
        var actualValue = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (actualValue is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = actualValue.IsCanceled;
        var condition = _negated ? result : !result;
        return Task.FromResult(AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsCanceled"));
    }

    protected override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")} be canceled";
    }
}

public class TaskIsFaultedAssertion<TTask> : Assertion<TTask>
    where TTask : System.Threading.Tasks.Task
{
    private readonly bool _negated;

    public TaskIsFaultedAssertion(AssertionContext<TTask> context, bool negated = false)
        : base(context)
    {
        _negated = negated;
    }

    protected override Task<AssertionResult> CheckAsync(EvaluationMetadata<TTask> metadata)
    {
        var actualValue = metadata.Value;
        var exception = metadata.Exception;

        if (exception != null)
        {
            return Task.FromResult(AssertionResult.Failed($"threw {exception.GetType().FullName}"));
        }

        if (actualValue is null)
        {
            return Task.FromResult(AssertionResult.Failed("Actual value is null"));
        }

        var result = actualValue.IsFaulted;
        var condition = _negated ? result : !result;
        return Task.FromResult(AssertionResult.FailIf(condition, $"'{actualValue}' was expected {(_negated ? "not " : "")}to satisfy IsFaulted"));
    }

    protected override string GetExpectation()
    {
        return $"{(_negated ? "not " : "")} be faulted";
    }
}

public static partial class TaskAssertionExtensions
{
    public static TaskIsCompletedAssertion<TTask> IsCompleted<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsCompleted()");
        return new TaskIsCompletedAssertion<TTask>(source.Context, false);
    }

    public static TaskIsCompletedAssertion<TTask> IsNotCompleted<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsNotCompleted()");
        return new TaskIsCompletedAssertion<TTask>(source.Context, true);
    }

    public static TaskIsCanceledAssertion<TTask> IsCanceled<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsCanceled()");
        return new TaskIsCanceledAssertion<TTask>(source.Context, false);
    }

    public static TaskIsCanceledAssertion<TTask> IsNotCanceled<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsNotCanceled()");
        return new TaskIsCanceledAssertion<TTask>(source.Context, true);
    }

    public static TaskIsFaultedAssertion<TTask> IsFaulted<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsFaulted()");
        return new TaskIsFaultedAssertion<TTask>(source.Context, false);
    }

    public static TaskIsFaultedAssertion<TTask> IsNotFaulted<TTask>(this IAssertionSource<TTask> source)
        where TTask : System.Threading.Tasks.Task
    {
        source.Context.ExpressionBuilder.Append(".IsNotFaulted()");
        return new TaskIsFaultedAssertion<TTask>(source.Context, true);
    }

}

]